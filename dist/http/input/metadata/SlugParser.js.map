{"version":3,"file":"SlugParser.js","sourceRoot":"","sources":["../../../../src/http/input/metadata/SlugParser.ts"],"names":[],"mappings":";;;AAAA,sDAAwD;AAExD,kFAA+E;AAC/E,6DAAwD;AAExD,qDAAkD;AAElD;;GAEG;AACH,MAAa,UAAW,SAAQ,+BAAc;IAA9C;;QACqB,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;IAajD,CAAC;IAXQ,KAAK,CAAC,MAAM,CAAC,KAAiE;QACnF,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;QACvC,IAAI,IAAI,EAAE;YACR,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6CAA6C,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;gBAC7E,MAAM,IAAI,yCAAmB,CAAC,mCAAmC,CAAC,CAAC;aACpE;YACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,IAAI,IAAI,CAAC,CAAC;YAChD,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,yBAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC3C;IACH,CAAC;CACF;AAdD,gCAcC","sourcesContent":["import { getLoggerFor } from '../../../logging/LogUtil';\nimport type { HttpRequest } from '../../../server/HttpRequest';\nimport { BadRequestHttpError } from '../../../util/errors/BadRequestHttpError';\nimport { SOLID_HTTP } from '../../../util/Vocabularies';\nimport type { RepresentationMetadata } from '../../representation/RepresentationMetadata';\nimport { MetadataParser } from './MetadataParser';\n\n/**\n * Converts the contents of the slug header to metadata.\n */\nexport class SlugParser extends MetadataParser {\n  protected readonly logger = getLoggerFor(this);\n\n  public async handle(input: { request: HttpRequest; metadata: RepresentationMetadata }): Promise<void> {\n    const { slug } = input.request.headers;\n    if (slug) {\n      if (Array.isArray(slug)) {\n        this.logger.warn(`Expected 0 or 1 Slug headers but received ${slug.length}`);\n        throw new BadRequestHttpError('Request has multiple Slug headers');\n      }\n      this.logger.debug(`Request Slug is '${slug}'.`);\n      input.metadata.set(SOLID_HTTP.slug, slug);\n    }\n  }\n}\n"]}