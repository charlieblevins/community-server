{"version":3,"file":"BasicRequestParser.js","sourceRoot":"","sources":["../../../src/http/input/BasicRequestParser.ts"],"names":[],"mappings":";;;AACA,+EAA4E;AAE5E,qFAAkF;AAMlF,mDAAgD;AAahD;;;;GAIG;AACH,MAAa,kBAAmB,SAAQ,6BAAa;IAOnD,YAAmB,IAA4B;QAC7C,KAAK,EAAE,CAAC;QACR,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,OAAoB;QACtC,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;QAC3B,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,yCAAmB,CAAC,yCAAyC,CAAC,CAAC;SAC1E;QACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QACxE,MAAM,QAAQ,GAAG,IAAI,+CAAsB,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC5D,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;QAErE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;IAC3D,CAAC;CACF;AA1BD,gDA0BC","sourcesContent":["import type { HttpRequest } from '../../server/HttpRequest';\nimport { InternalServerError } from '../../util/errors/InternalServerError';\nimport type { Operation } from '../Operation';\nimport { RepresentationMetadata } from '../representation/RepresentationMetadata';\nimport type { BodyParser } from './body/BodyParser';\nimport type { ConditionsParser } from './conditions/ConditionsParser';\nimport type { TargetExtractor } from './identifier/TargetExtractor';\nimport type { MetadataParser } from './metadata/MetadataParser';\nimport type { PreferenceParser } from './preferences/PreferenceParser';\nimport { RequestParser } from './RequestParser';\n\n/**\n * Input parsers required for a {@link BasicRequestParser}.\n */\nexport interface BasicRequestParserArgs {\n  targetExtractor: TargetExtractor;\n  preferenceParser: PreferenceParser;\n  metadataParser: MetadataParser;\n  conditionsParser: ConditionsParser;\n  bodyParser: BodyParser;\n}\n\n/**\n * Creates an {@link Operation} from an incoming {@link HttpRequest} by aggregating the results\n * of a {@link TargetExtractor}, {@link PreferenceParser}, {@link MetadataParser},\n * {@link ConditionsParser} and {@link BodyParser}.\n */\nexport class BasicRequestParser extends RequestParser {\n  private readonly targetExtractor!: TargetExtractor;\n  private readonly preferenceParser!: PreferenceParser;\n  private readonly metadataParser!: MetadataParser;\n  private readonly conditionsParser!: ConditionsParser;\n  private readonly bodyParser!: BodyParser;\n\n  public constructor(args: BasicRequestParserArgs) {\n    super();\n    Object.assign(this, args);\n  }\n\n  public async handle(request: HttpRequest): Promise<Operation> {\n    const { method } = request;\n    if (!method) {\n      throw new InternalServerError('No method specified on the HTTP request');\n    }\n    const target = await this.targetExtractor.handleSafe({ request });\n    const preferences = await this.preferenceParser.handleSafe({ request });\n    const metadata = new RepresentationMetadata(target);\n    await this.metadataParser.handleSafe({ request, metadata });\n    const conditions = await this.conditionsParser.handleSafe(request);\n    const body = await this.bodyParser.handleSafe({ request, metadata });\n\n    return { method, target, preferences, conditions, body };\n  }\n}\n"]}