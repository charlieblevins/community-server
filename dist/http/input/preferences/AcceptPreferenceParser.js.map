{"version":3,"file":"AcceptPreferenceParser.js","sourceRoot":"","sources":["../../../../src/http/input/preferences/AcceptPreferenceParser.ts"],"names":[],"mappings":";;;AAEA,yDAMkC;AAElC,yDAAsD;AAEtD,MAAM,OAAO,GAIP;IACJ,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,wBAAW,EAAE;IACtD,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,gBAAgB,EAAE,KAAK,EAAE,+BAAkB,EAAE;IACxE,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,iBAAiB,EAAE,KAAK,EAAE,gCAAmB,EAAE;IAC3E,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,iBAAiB,EAAE,KAAK,EAAE,gCAAmB,EAAE;IAC3E,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,iBAAiB,EAAE,KAAK,EAAE,gCAAmB,EAAE;CAC5E,CAAC;AAEF;;;GAGG;AACH,MAAa,sBAAuB,SAAQ,mCAAgB;IACnD,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,EAA2B;QACnE,MAAM,WAAW,GAA8B,EAAE,CAAC;QAClD,KAAK,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,OAAO,EAAE;YAC7C,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;YAC9B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC7B,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC;qBAC3C,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAoB,EAAE,CAAC,CAAE,KAAK,EAAE,MAAM,CAAE,CAAC,CAAC,CAAC;gBACpE,wFAAwF;gBACxF,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;oBAClC,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;iBAC5B;aACF;SACF;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;CACF;AAhBD,wDAgBC","sourcesContent":["import type { HttpRequest } from '../../../server/HttpRequest';\nimport type { AcceptHeader } from '../../../util/HeaderUtil';\nimport {\n  parseAccept,\n  parseAcceptCharset,\n  parseAcceptEncoding,\n  parseAcceptLanguage,\n  parseAcceptDateTime,\n} from '../../../util/HeaderUtil';\nimport type { RepresentationPreferences } from '../../representation/RepresentationPreferences';\nimport { PreferenceParser } from './PreferenceParser';\n\nconst parsers: {\n  name: keyof RepresentationPreferences;\n  header: string;\n  parse: (value: string) => AcceptHeader[];\n}[] = [\n  { name: 'type', header: 'accept', parse: parseAccept },\n  { name: 'charset', header: 'accept-charset', parse: parseAcceptCharset },\n  { name: 'encoding', header: 'accept-encoding', parse: parseAcceptEncoding },\n  { name: 'language', header: 'accept-language', parse: parseAcceptLanguage },\n  { name: 'datetime', header: 'accept-datetime', parse: parseAcceptDateTime },\n];\n\n/**\n * Extracts preferences from the Accept-* headers from an incoming {@link HttpRequest}.\n * Supports Accept, Accept-Charset, Accept-Encoding, Accept-Language and Accept-DateTime.\n */\nexport class AcceptPreferenceParser extends PreferenceParser {\n  public async handle({ request: { headers }}: { request: HttpRequest }): Promise<RepresentationPreferences> {\n    const preferences: RepresentationPreferences = {};\n    for (const { name, header, parse } of parsers) {\n      const value = headers[header];\n      if (typeof value === 'string') {\n        const result = Object.fromEntries(parse(value)\n          .map(({ range, weight }): [string, number] => [ range, weight ]));\n        // Interpret empty headers (or headers with no valid values) the same as missing headers\n        if (Object.keys(result).length > 0) {\n          preferences[name] = result;\n        }\n      }\n    }\n    return preferences;\n  }\n}\n"]}