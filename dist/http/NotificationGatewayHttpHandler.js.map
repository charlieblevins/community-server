{"version":3,"file":"NotificationGatewayHttpHandler.js","sourceRoot":"","sources":["../../src/http/NotificationGatewayHttpHandler.ts"],"names":[],"mappings":";;;AAAA,mCAAkC;AAElC,gDAAkD;AAClD,yEAAsE;AAEtE,oFAAiF;AACjF,yDAAoD;AACpD,+CAAgE;AAGhE,mFAAgF;AAChF,oFAAiF;AAiBjF;;GAEG;AACH,MAAa,8BAA+B,SAAQ,2CAAoB;IAOtE,YAAmB,IAAwC;QACzD,KAAK,EAAE,CAAC;QAPS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAQ7C,2FAA2F;QAC3F,IAAI,CAAC,oBAAoB,GAAG,8BAAmB,CAAC,kBAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAC9F,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QACpD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,CAAC;IACrE,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,SAAS,EAAyB;QACzD,IAAI,SAAS,CAAC,MAAM,KAAK,MAAM,EAAE;YAC/B,MAAM,IAAI,iDAAuB,CAAC,4CAA4C,CAAC,CAAC;SACjF;IACH,CAAC;IAED,6DAA6D;IACtD,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,OAAO,EAA6B;QACnE,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;QAClC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzC,MAAM,cAAc,GAAa,IAAI,CAAC,IAAI,CAAC;QAC3C,MAAM,OAAO,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,EAAW,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7F,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,MAAM,IAAI,iDAAuB,CAAC,8BAA8B,IAAI,CAAC,cAAc,gBAAgB,CAAC,CAAC;SACtG;QACD,MAAM,YAAY,GAAG;YACnB,UAAU,EAAE,CAAE,6CAA6C,CAAE;YAC7D,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;YAChB,QAAQ,EAAE,IAAI,CAAC,oBAAoB;YACnC,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,MAAM,sBAAsB,GAAG,IAAI,+CAAsB,CAAC,qBAAqB,CAAC,CAAC;QACjF,MAAM,IAAI,GAAG,2BAAW,CAAC,iBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACtE,OAAO,IAAI,6CAAqB,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;IACjE,CAAC;CACF;AAxCD,wEAwCC","sourcesContent":["import { Readable } from 'stream';\nimport type { ResponseDescription } from '../http/output/response/ResponseDescription';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport { OperationHttpHandler } from '../server/OperationHttpHandler';\nimport type { OperationHttpHandlerInput } from '../server/OperationHttpHandler';\nimport { NotImplementedHttpError } from '../util/errors/NotImplementedHttpError';\nimport { guardStream } from '../util/GuardedStream';\nimport { joinUrl, trimTrailingSlashes } from '../util/PathUtil';\nimport type { OperationHandlerInput } from './ldp/OperationHandler';\nimport type { NotificationSubscriptionHttpHandler } from './NotificationSubscriptionHttpHandler';\nimport { OkResponseDescription } from './output/response/OkResponseDescription';\nimport { RepresentationMetadata } from './representation/RepresentationMetadata';\n\nexport interface NotificationGatewayHttpHandlerArgs {\n  /**\n   * Base URL of the gateway.\n   */\n  baseUrl: string;\n  /**\n   * Relative path of the IDP entry point.\n   */\n  subscriptionPath: string;\n  /**\n    * The notification handler.\n    */\n  subscriptionHandler: NotificationSubscriptionHttpHandler;\n}\n\n/**\n * Handles the negotiation of notification channels\n */\nexport class NotificationGatewayHttpHandler extends OperationHttpHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly subscriptionHandler: NotificationSubscriptionHttpHandler;\n  private readonly subscriptionEndpoint: string;\n  private readonly supportedTypes: string[];\n\n  public constructor(args: NotificationGatewayHttpHandlerArgs) {\n    super();\n    // Trimming trailing slashes so the relative URL starts with a slash after slicing this off\n    this.subscriptionEndpoint = trimTrailingSlashes(joinUrl(args.baseUrl, args.subscriptionPath));\n    this.subscriptionHandler = args.subscriptionHandler;\n    this.supportedTypes = this.subscriptionHandler.getSupportedTypes();\n  }\n\n  public async canHandle({ operation }: OperationHandlerInput): Promise<void> {\n    if (operation.method !== 'POST') {\n      throw new NotImplementedHttpError('This handler only supports POST operations');\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public async handle({ operation, request }: OperationHttpHandlerInput): Promise<ResponseDescription | undefined> {\n    const body = await request.read();\n    const json = JSON.parse(body.toString());\n    const requestedTypes: string[] = json.type;\n    const matches = requestedTypes.filter((type): boolean => this.supportedTypes.includes(type));\n    if (matches.length === 0) {\n      throw new NotImplementedHttpError(`This gateway only supports ${this.supportedTypes} notifications`);\n    }\n    const responseJson = {\n      '@context': [ 'https://www.w3.org/ns/solid/notification/v1' ],\n      type: matches[0],\n      endpoint: this.subscriptionEndpoint,\n      features: [],\n    };\n    const representationMetadata = new RepresentationMetadata('application/ld+json');\n    const data = guardStream(Readable.from(JSON.stringify(responseJson)));\n    return new OkResponseDescription(representationMetadata, data);\n  }\n}\n"]}