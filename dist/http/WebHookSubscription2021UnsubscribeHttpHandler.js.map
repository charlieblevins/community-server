{"version":3,"file":"WebHookSubscription2021UnsubscribeHttpHandler.js","sourceRoot":"","sources":["../../src/http/WebHookSubscription2021UnsubscribeHttpHandler.ts"],"names":[],"mappings":";;;AAEA,yFAAsF;AACtF,0FAAuF;AAGvF,yEAAsE;AAEtE,4EAAyE;AAUzE,MAAa,6CAA8C,SAAQ,2CAAoB;IAKrF,YAAmB,IAAuD;QACxE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;QACtD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;IACtD,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAgC;;QAClD,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QAE1B,2BAA2B;QAC3B,MAAM,WAAW,GACf,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,CAAA,MAAA,WAAW,CAAC,KAAK,0CAAE,KAAK,CAAA,EAAE;YAC7B,MAAM,IAAI,yCAAmB,CAAC,6BAA6B,CAAC,CAAC;SAC9D;QACD,MAAM,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC;QAEpC,0BAA0B;QAC1B,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;YAChB,MAAM,IAAI,yCAAmB,CAAC,2BAA2B,CAAC,CAAC;SAC5D;QACD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACxC,MAAM,cAAc,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACrD,MAAM,wBAAwB,GAAG,kBAAkB,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpF,oCAAoC;QACpC,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtF,IACE,CAAC,CAAC,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,aAAa,CAAC,KAAK,CAAC;YACvC,gBAAgB,CAAC,aAAa,CAAC,KAAK,CAA6B,CAAC,EAAE,KAAK,cAAc,CAAC,EACzF;YACA,MAAM,IAAI,yCAAmB,CAAC,6BAA6B,CAAC,CAAC;SAC9D;QACD,mFAAmF;QACnF,wCAAwC;QACxC,gEAAgE;QAChE,OAAO,gBAAgB,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE7C,MAAM,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,wBAAwB,EAAE,gBAAgB,CAAC,CAAC;QAE/E,kBAAkB;QAClB,MAAM,sBAAsB,GAAG,IAAI,+CAAsB,CACvD,qBAAqB,CACtB,CAAC;QACF,OAAO,IAAI,6CAAqB,CAC9B,sBAAsB,CACvB,CAAC;IACJ,CAAC;CACF;AAtDD,sGAsDC","sourcesContent":["import type { CredentialSet } from '../authentication/Credentials';\nimport type { CredentialsExtractor } from '../authentication/CredentialsExtractor';\nimport { OkResponseDescription } from '../http/output/response/OkResponseDescription';\nimport { RepresentationMetadata } from '../http/representation/RepresentationMetadata';\nimport type { WebHookSubscription2021 } from '../notification/webhook-subscription-2021/WebHookSubscription2021Handler';\nimport type { OperationHttpHandlerInput } from '../server/OperationHttpHandler';\nimport { OperationHttpHandler } from '../server/OperationHttpHandler';\nimport type { KeyValueStorage } from '../storage/keyvalue/KeyValueStorage';\nimport { BadRequestHttpError } from '../util/errors/BadRequestHttpError';\nimport type { Topic } from './NotificationSubscriptionHttpHandler';\nimport type { ResponseDescription } from './output/response/ResponseDescription';\n\nexport interface WebHookSubscription2021UnsubscribeHttpHandlerArgs {\n  baseUrl: string;\n  credentialsExtractor: CredentialsExtractor;\n  notificationStorage: KeyValueStorage<string, Topic>;\n}\n\nexport class WebHookSubscription2021UnsubscribeHttpHandler extends OperationHttpHandler {\n  private readonly baseUrl: string;\n  private readonly credentialsExtractor: CredentialsExtractor;\n  private readonly notificationStorage: KeyValueStorage<string, Topic>;\n\n  public constructor(args: WebHookSubscription2021UnsubscribeHttpHandlerArgs) {\n    super();\n    this.baseUrl = args.baseUrl;\n    this.credentialsExtractor = args.credentialsExtractor;\n    this.notificationStorage = args.notificationStorage;\n  }\n\n  public async handle(input: OperationHttpHandlerInput): Promise<ResponseDescription | undefined> {\n    const { request } = input;\n\n    // Extract WebId Credential\n    const credentials: CredentialSet =\n      await this.credentialsExtractor.handleSafe(request);\n    if (!credentials.agent?.webId) {\n      throw new BadRequestHttpError('No WebId present in request');\n    }\n    const { webId } = credentials.agent;\n\n    // Get the subscription id\n    if (!request.url) {\n      throw new BadRequestHttpError('No url present in request');\n    }\n    const splitUrl = request.url.split('/');\n    const subscriptionId = splitUrl[splitUrl.length - 1];\n    const subscriptionTargetFromId = decodeURIComponent(subscriptionId.split('~~~')[0]);\n\n    // Get the current notification data\n    const notificationData = await this.notificationStorage.get(subscriptionTargetFromId);\n    if (\n      !(notificationData?.subscriptions[webId] &&\n      (notificationData.subscriptions[webId] as WebHookSubscription2021).id === subscriptionId)\n    ) {\n      throw new BadRequestHttpError('Subscription does not exist');\n    }\n    // This rules says that we're using the wrong data structure. I agree, I will bring\n    // this up in the next meeting - Jackson\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete notificationData.subscriptions[webId];\n\n    await this.notificationStorage.set(subscriptionTargetFromId, notificationData);\n\n    // Return Response\n    const representationMetadata = new RepresentationMetadata(\n      'application/ld+json',\n    );\n    return new OkResponseDescription(\n      representationMetadata,\n    );\n  }\n}\n"]}