{"version":3,"file":"RoutingAuxiliaryIdentifierStrategy.js","sourceRoot":"","sources":["../../../src/http/auxiliary/RoutingAuxiliaryIdentifierStrategy.ts"],"names":[],"mappings":";;;AAAA,+EAA4E;AAC5E,uFAAoF;AAIpF;;;GAGG;AACH,MAAa,kCAAkC;IAG7C,YAAmB,OAAsC;QACvD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,sBAAsB;QAC3B,MAAM,IAAI,yCAAmB,CAC3B,+GAA+G,CAChH,CAAC;IACJ,CAAC;IAEM,uBAAuB,CAAC,UAA8B;QAC3D,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAwB,EAAE,CAAC,MAAM,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC,CAAC;IAC5G,CAAC;IAEM,qBAAqB,CAAC,UAA8B;QACzD,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAW,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC;IAC1F,CAAC;IAEM,oBAAoB,CAAC,UAA8B;QACxD,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAClD,OAAO,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;IACjD,CAAC;IAES,iBAAiB,CAAC,UAA8B;QACxD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAW,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC;QAC/F,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,iDAAuB,CAAC,0CAA0C,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;SAChG;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAlCD,gFAkCC","sourcesContent":["import { InternalServerError } from '../../util/errors/InternalServerError';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport type { ResourceIdentifier } from '../representation/ResourceIdentifier';\nimport type { AuxiliaryIdentifierStrategy } from './AuxiliaryIdentifierStrategy';\n\n/**\n * An {@link AuxiliaryIdentifierStrategy} that combines multiple AuxiliaryIdentifierStrategies into one.\n * Uses `isAuxiliaryIdentifier` to know which strategy to route to.\n */\nexport class RoutingAuxiliaryIdentifierStrategy implements AuxiliaryIdentifierStrategy {\n  protected readonly sources: AuxiliaryIdentifierStrategy[];\n\n  public constructor(sources: AuxiliaryIdentifierStrategy[]) {\n    this.sources = sources;\n  }\n\n  public getAuxiliaryIdentifier(): never {\n    throw new InternalServerError(\n      'RoutingAuxiliaryIdentifierStrategy has multiple auxiliary strategies and thus no single auxiliary identifier.',\n    );\n  }\n\n  public getAuxiliaryIdentifiers(identifier: ResourceIdentifier): ResourceIdentifier[] {\n    return this.sources.flatMap((source): ResourceIdentifier[] => source.getAuxiliaryIdentifiers(identifier));\n  }\n\n  public isAuxiliaryIdentifier(identifier: ResourceIdentifier): boolean {\n    return this.sources.some((source): boolean => source.isAuxiliaryIdentifier(identifier));\n  }\n\n  public getSubjectIdentifier(identifier: ResourceIdentifier): ResourceIdentifier {\n    const source = this.getMatchingSource(identifier);\n    return source.getSubjectIdentifier(identifier);\n  }\n\n  protected getMatchingSource(identifier: ResourceIdentifier): AuxiliaryIdentifierStrategy {\n    const match = this.sources.find((source): boolean => source.isAuxiliaryIdentifier(identifier));\n    if (!match) {\n      throw new NotImplementedHttpError(`Could not find an AuxiliaryManager for ${identifier.path}`);\n    }\n\n    return match;\n  }\n}\n"]}