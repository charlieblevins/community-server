{"version":3,"file":"AuxiliaryStrategy.js","sourceRoot":"","sources":["../../../src/http/auxiliary/AuxiliaryStrategy.ts"],"names":[],"mappings":"","sourcesContent":["import type { Representation } from '../representation/Representation';\nimport type { RepresentationMetadata } from '../representation/RepresentationMetadata';\nimport type { ResourceIdentifier } from '../representation/ResourceIdentifier';\nimport type { AuxiliaryIdentifierStrategy } from './AuxiliaryIdentifierStrategy';\n\n/**\n * A strategy for handling one or more types of auxiliary resources.\n * References to \"an auxiliary resource\" implicitly imply a specific type of auxiliary resources\n * supported by this strategy.\n */\nexport interface AuxiliaryStrategy extends AuxiliaryIdentifierStrategy {\n  /**\n   * Whether this auxiliary resources uses its own authorization instead of the subject resource authorization.\n   * @param identifier - Identifier of the auxiliary resource.\n   */\n  usesOwnAuthorization: (identifier: ResourceIdentifier) => boolean;\n\n  /**\n   * Whether the root storage container requires this auxiliary resource to be present.\n   * If yes, this means they can't be deleted individually from such a container.\n   * @param identifier - Identifier of the auxiliary resource.\n   */\n  isRequiredInRoot: (identifier: ResourceIdentifier) => boolean;\n\n  /**\n   * Adds metadata related to this auxiliary resource,\n   * in case this is required for this type of auxiliary resource.\n   * The metadata that is added depends on the given identifier being an auxiliary or subject resource:\n   * the metadata will be used to link to the other one, and potentially add extra typing info.\n   *\n   * Used for:\n   * Solid, ยง4.3.1: \"For any defined auxiliary resource available for a given Solid resource, all representations of\n   * that resource MUST include an HTTP Link header pointing to the location of each auxiliary resource.\"\n   * https://solid.github.io/specification/protocol#auxiliary-resources-server\n   *\n   * The above is an example of how that metadata would only be added in case the input is the subject identifier.\n   *\n   * @param metadata - Metadata to update.\n   */\n  addMetadata: (metadata: RepresentationMetadata) => Promise<void>;\n\n  /**\n   * Validates if the representation contains valid data for an auxiliary resource.\n   * Should throw an error in case the data is invalid.\n   * @param identifier - Identifier of the auxiliary resource.\n   * @param representation - Representation of the auxiliary resource.\n   */\n  validate: (representation: Representation) => Promise<void>;\n}\n"]}