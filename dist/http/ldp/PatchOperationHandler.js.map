{"version":3,"file":"PatchOperationHandler.js","sourceRoot":"","sources":["../../../src/http/ldp/PatchOperationHandler.ts"],"names":[],"mappings":";;;AAAA,mDAAqD;AAErD,+EAA4E;AAC5E,uFAAoF;AACpF,8FAA2F;AAC3F,0FAAuF;AAIvF,yDAAsD;AAEtD;;;GAGG;AACH,MAAa,qBAAsB,SAAQ,mCAAgB;IAKzD,YAAmB,KAAoB;QACrC,KAAK,EAAE,CAAC;QALS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAM7C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,SAAS,EAAyB;QACzD,IAAI,SAAS,CAAC,MAAM,KAAK,OAAO,EAAE;YAChC,MAAM,IAAI,iDAAuB,CAAC,8CAA8C,CAAC,CAAC;SACnF;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAAyB;QACtD,wEAAwE;QACxE,8DAA8D;QAC9D,6DAA6D;QAC7D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;YACxC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;YAC7E,MAAM,IAAI,yCAAmB,CAAC,0DAA0D,CAAC,CAAC;SAC3F;QACD,yGAAyG;QACzG,2DAA2D;QAC3D,yFAAyF;QACzF,yEAAyE;QACzE,oDAAoD;QACpD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;QACvF,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,IAAa,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;QACjG,IAAI,MAAM,EAAE;YACV,OAAO,IAAI,mDAAwB,EAAE,CAAC;SACvC;QACD,OAAO,IAAI,uDAA0B,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC1D,CAAC;CACF;AApCD,sDAoCC","sourcesContent":["import { getLoggerFor } from '../../logging/LogUtil';\nimport type { ResourceStore } from '../../storage/ResourceStore';\nimport { BadRequestHttpError } from '../../util/errors/BadRequestHttpError';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { CreatedResponseDescription } from '../output/response/CreatedResponseDescription';\nimport { ResetResponseDescription } from '../output/response/ResetResponseDescription';\nimport type { ResponseDescription } from '../output/response/ResponseDescription';\nimport type { Patch } from '../representation/Patch';\nimport type { OperationHandlerInput } from './OperationHandler';\nimport { OperationHandler } from './OperationHandler';\n\n/**\n * Handles PATCH {@link Operation}s.\n * Calls the modifyResource function from a {@link ResourceStore}.\n */\nexport class PatchOperationHandler extends OperationHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly store: ResourceStore;\n\n  public constructor(store: ResourceStore) {\n    super();\n    this.store = store;\n  }\n\n  public async canHandle({ operation }: OperationHandlerInput): Promise<void> {\n    if (operation.method !== 'PATCH') {\n      throw new NotImplementedHttpError('This handler only supports PATCH operations.');\n    }\n  }\n\n  public async handle({ operation }: OperationHandlerInput): Promise<ResponseDescription> {\n    // Solid, ยง2.1: \"A Solid server MUST reject PUT, POST and PATCH requests\n    // without the Content-Type header with a status code of 400.\"\n    // https://solid.github.io/specification/protocol#http-server\n    if (!operation.body.metadata.contentType) {\n      this.logger.warn('PATCH requests require the Content-Type header to be set');\n      throw new BadRequestHttpError('PATCH requests require the Content-Type header to be set');\n    }\n    // A more efficient approach would be to have the server return metadata indicating if a resource was new\n    // See https://github.com/solid/community-server/issues/632\n    // RFC7231, ยง4.3.4: If the target resource does not have a current representation and the\n    //   PUT successfully creates one, then the origin server MUST inform the\n    //   user agent by sending a 201 (Created) response.\n    const exists = await this.store.resourceExists(operation.target, operation.conditions);\n    await this.store.modifyResource(operation.target, operation.body as Patch, operation.conditions);\n    if (exists) {\n      return new ResetResponseDescription();\n    }\n    return new CreatedResponseDescription(operation.target);\n  }\n}\n"]}