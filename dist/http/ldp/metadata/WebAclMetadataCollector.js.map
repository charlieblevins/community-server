{"version":3,"file":"WebAclMetadataCollector.js","sourceRoot":"","sources":["../../../../src/http/ldp/metadata/WebAclMetadataCollector.ts"],"names":[],"mappings":";;;AAAA,oFAA2E;AAE3E,gFAA4E;AAC5E,6DAAuD;AAGvD,6EAA0E;AAE1E,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,CAAE,MAAM,EAAE,KAAK,CAAE,CAAC,CAAC;AACjD,MAAM,eAAe,GAAG,IAAI,GAAG,CAAC,CAAE,wBAAU,CAAC,IAAI,EAAE,wBAAU,CAAC,KAAK,EAAE,wBAAU,CAAC,MAAM,EAAE,uBAAO,CAAC,OAAO,CAAE,CAAC,CAAC;AAE3G;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,uDAA0B;IAC9D,KAAK,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAmC;;QAC1E,IAAI,CAAC,SAAS,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACpE,OAAO;SACR;QACD,MAAM,IAAI,GAAkB,MAAA,SAAS,CAAC,aAAa,CAAC,KAAK,mCAAI,EAAE,CAAC;QAChE,MAAM,QAAQ,GAAkB,MAAA,SAAS,CAAC,aAAa,CAAC,MAAM,mCAAI,EAAE,CAAC;QAErE,MAAM,KAAK,GAAG,IAAI,GAAG,CAAa,CAAE,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAkB,CAAC,CAAC;QAEtG,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,IAAI,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC7B,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAA4C,CAAC;gBAChH,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;oBAClB,QAAQ,CAAC,GAAG,CAAC,mBAAI,CAAC,KAAK,CAAC,UAAU,EAAE,kBAAG,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;iBACjE;gBACD,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE;oBACd,QAAQ,CAAC,GAAG,CAAC,mBAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,kBAAG,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;iBAC/D;aACF;SACF;IACH,CAAC;CACF;AAtBD,0DAsBC","sourcesContent":["import { AclMode } from '../../../authorization/permissions/AclPermission';\nimport type { AclPermission } from '../../../authorization/permissions/AclPermission';\nimport { AccessMode } from '../../../authorization/permissions/Permissions';\nimport { ACL, AUTH } from '../../../util/Vocabularies';\n\nimport type { OperationMetadataCollectorInput } from './OperationMetadataCollector';\nimport { OperationMetadataCollector } from './OperationMetadataCollector';\n\nconst VALID_METHODS = new Set([ 'HEAD', 'GET' ]);\nconst VALID_ACL_MODES = new Set([ AccessMode.read, AccessMode.write, AccessMode.append, AclMode.control ]);\n\n/**\n * Indicates which acl permissions are available on the requested resource.\n * Only adds public and agent permissions for HEAD/GET requests.\n */\nexport class WebAclMetadataCollector extends OperationMetadataCollector {\n  public async handle({ metadata, operation }: OperationMetadataCollectorInput): Promise<void> {\n    if (!operation.permissionSet || !VALID_METHODS.has(operation.method)) {\n      return;\n    }\n    const user: AclPermission = operation.permissionSet.agent ?? {};\n    const everyone: AclPermission = operation.permissionSet.public ?? {};\n\n    const modes = new Set<AccessMode>([ ...Object.keys(user), ...Object.keys(everyone) ] as AccessMode[]);\n\n    for (const mode of modes) {\n      if (VALID_ACL_MODES.has(mode)) {\n        const capitalizedMode = mode.charAt(0).toUpperCase() + mode.slice(1) as 'Read' | 'Write' | 'Append' | 'Control';\n        if (everyone[mode]) {\n          metadata.add(AUTH.terms.publicMode, ACL.terms[capitalizedMode]);\n        }\n        if (user[mode]) {\n          metadata.add(AUTH.terms.userMode, ACL.terms[capitalizedMode]);\n        }\n      }\n    }\n  }\n}\n"]}