{"version":3,"file":"BasicRepresentation.js","sourceRoot":"","sources":["../../../src/http/representation/BasicRepresentation.ts"],"names":[],"mappings":";;;AACA,0DAAyD;AAEzD,4DAAuD;AACvD,sDAA0D;AAG1D,qEAA4F;AAE5F;;;;;;;;;;;GAWG;AACH,MAAa,mBAAmB;IAuE9B,YACE,IAAgC,EAChC,QAAgF,EAChF,YAAgD,EAChD,MAAgB;QAEhB,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnD,IAAI,GAAG,8BAAiB,CAAC,IAAI,CAAC,CAAC;SAChC;aAAM,IAAI,CAAC,IAAI,EAAE;YAChB,IAAI,GAAG,8BAAiB,CAAC,EAAE,CAAC,CAAC;SAC9B;QACD,IAAI,CAAC,IAAI,GAAG,2BAAW,CAAC,IAAI,CAAC,CAAC;QAE9B,IAAI,OAAO,YAAY,KAAK,SAAS,EAAE;YACrC,MAAM,GAAG,YAAY,CAAC;YACtB,YAAY,GAAG,SAAS,CAAC;SAC1B;QACD,IAAI,CAAC,iDAAwB,CAAC,QAAQ,CAAC,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;YAC3E,QAAQ,GAAG,IAAI,+CAAsB,CAAC,QAAe,EAAE,YAAmB,CAAC,CAAC;SAC7E;QACD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,OAAO,MAAM,KAAK,SAAS,EAAE;YAC/B,MAAM,GAAG,QAAQ,CAAC,WAAW,KAAK,6BAAc,CAAC;SAClD;QACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,IAAW,OAAO;QAChB,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;IACpC,CAAC;CACF;AAzGD,kDAyGC","sourcesContent":["import type { Readable } from 'stream';\nimport { INTERNAL_QUADS } from '../../util/ContentTypes';\nimport type { Guarded } from '../../util/GuardedStream';\nimport { guardStream } from '../../util/GuardedStream';\nimport { guardedStreamFrom } from '../../util/StreamUtil';\nimport type { Representation } from './Representation';\nimport type { MetadataIdentifier, MetadataRecord } from './RepresentationMetadata';\nimport { RepresentationMetadata, isRepresentationMetadata } from './RepresentationMetadata';\n\n/**\n * Class with various constructors to facilitate creating a representation.\n *\n * A representation consists of 1) data, 2) metadata, and 3) a binary flag\n * to indicate whether the data is a binary stream or an object stream.\n *\n * 1. The data can be given as a stream, array, or string.\n * 2. The metadata can be specified as one or two parameters\n *    that will be passed to the {@link RepresentationMetadata} constructor.\n * 3. The binary field is optional, and if not specified,\n *    is determined from the content type inside the metadata.\n */\nexport class BasicRepresentation implements Representation {\n  public readonly data: Guarded<Readable>;\n  public readonly metadata: RepresentationMetadata;\n  public readonly binary: boolean;\n\n  /**\n   * An empty Representation\n   */\n  public constructor();\n\n  /**\n   * @param data - The representation data\n   * @param metadata - The representation metadata\n   * @param binary - Whether the representation is a binary or object stream\n   */\n  public constructor(\n    data: Guarded<Readable> | Readable | any[] | string,\n    metadata: RepresentationMetadata | MetadataRecord,\n    binary?: boolean,\n  );\n\n  /**\n   * @param data - The representation data\n   * @param metadata - The representation metadata\n   * @param contentType - The representation's content type\n   * @param binary - Whether the representation is a binary or object stream\n   */\n  public constructor(\n    data: Guarded<Readable> | Readable | any[] | string,\n    metadata: RepresentationMetadata | MetadataRecord,\n    contentType?: string,\n    binary?: boolean,\n  );\n\n  /**\n   * @param data - The representation data\n   * @param contentType - The representation's content type\n   * @param binary - Whether the representation is a binary or object stream\n   */\n  public constructor(\n    data: Guarded<Readable> | Readable | any[] | string,\n    contentType: string,\n    binary?: boolean,\n  );\n\n  /**\n   * @param data - The representation data\n   * @param identifier - The representation's identifier\n   * @param metadata - The representation metadata\n   * @param binary - Whether the representation is a binary or object stream\n   */\n  public constructor(\n    data: Guarded<Readable> | Readable | any[] | string,\n    identifier: MetadataIdentifier,\n    metadata?: MetadataRecord,\n    binary?: boolean,\n  );\n\n  /**\n   * @param data - The representation data\n   * @param identifier - The representation's identifier\n   * @param contentType - The representation's content type\n   * @param binary - Whether the representation is a binary or object stream\n   */\n  public constructor(\n    data: Guarded<Readable> | Readable | any[] | string,\n    identifier: MetadataIdentifier,\n    contentType?: string,\n    binary?: boolean,\n  );\n\n  public constructor(\n    data?: Readable | any[] | string,\n    metadata?: RepresentationMetadata | MetadataRecord | MetadataIdentifier | string,\n    metadataRest?: MetadataRecord | string | boolean,\n    binary?: boolean,\n  ) {\n    if (typeof data === 'string' || Array.isArray(data)) {\n      data = guardedStreamFrom(data);\n    } else if (!data) {\n      data = guardedStreamFrom([]);\n    }\n    this.data = guardStream(data);\n\n    if (typeof metadataRest === 'boolean') {\n      binary = metadataRest;\n      metadataRest = undefined;\n    }\n    if (!isRepresentationMetadata(metadata) || typeof metadataRest === 'string') {\n      metadata = new RepresentationMetadata(metadata as any, metadataRest as any);\n    }\n    this.metadata = metadata;\n\n    if (typeof binary !== 'boolean') {\n      binary = metadata.contentType !== INTERNAL_QUADS;\n    }\n    this.binary = binary;\n  }\n\n  /**\n   * Data should only be interpreted if there is a content type.\n   */\n  public get isEmpty(): boolean {\n    return !this.metadata.contentType;\n  }\n}\n"]}