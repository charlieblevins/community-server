{"version":3,"file":"UnsecureWebSocketsProtocol.js","sourceRoot":"","sources":["../../src/http/UnsecureWebSocketsProtocol.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport type { WebSocket } from 'ws';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { HttpRequest } from '../server/HttpRequest';\nimport { WebSocketHandler } from '../server/WebSocketHandler';\nimport type { ModifiedResource } from '../storage/ResourceStore';\nimport { parseForwarded } from '../util/HeaderUtil';\n\nconst VERSION = 'solid-0.1';\n\n/**\n * Implementation of Solid WebSockets API Spec solid-0.1\n * at https://github.com/solid/solid-spec/blob/master/api-websockets.md\n */\nclass WebSocketListener extends EventEmitter {\n  private host = '';\n  private protocol = '';\n  private readonly socket: WebSocket;\n  private readonly subscribedPaths = new Set<string>();\n  private readonly logger = getLoggerFor(this);\n\n  public constructor(socket: WebSocket) {\n    super();\n    this.socket = socket;\n    socket.addListener('error', (): void => this.stop());\n    socket.addListener('close', (): void => this.stop());\n    socket.addListener('message', (message: string): void => this.onMessage(message));\n  }\n\n  public start({ headers, socket }: HttpRequest): void {\n    // Greet the client\n    this.sendMessage('protocol', VERSION);\n\n    // Verify the WebSocket protocol version\n    const protocolHeader = headers['sec-websocket-protocol'];\n    if (!protocolHeader) {\n      this.sendMessage('warning', `Missing Sec-WebSocket-Protocol header, expected value '${VERSION}'`);\n    } else {\n      const supportedProtocols = protocolHeader.split(/\\s*,\\s*/u);\n      if (!supportedProtocols.includes(VERSION)) {\n        this.sendMessage('error', `Client does not support protocol ${VERSION}`);\n        this.stop();\n      }\n    }\n\n    // Store the HTTP host and protocol\n    const forwarded = parseForwarded(headers);\n    this.host = forwarded.host ?? headers.host ?? 'localhost';\n    this.protocol = forwarded.proto === 'https' || (socket as any).secure ? 'https:' : 'http:';\n  }\n\n  private stop(): void {\n    try {\n      this.socket.close();\n    } catch {\n      // Ignore\n    }\n    this.subscribedPaths.clear();\n    this.socket.removeAllListeners();\n    this.emit('closed');\n  }\n\n  public onResourceChanged(modifiedResources: ModifiedResource[]): void {\n    modifiedResources.forEach((modified: ModifiedResource): void => {\n      const resourcePath = modified.resource.path;\n      if (this.subscribedPaths.has(resourcePath)) {\n        this.sendMessage('pub', resourcePath);\n      }\n    });\n  }\n\n  private onMessage(message: string): void {\n    // Parse the message\n    const match = /^(\\w+)\\s+(.+)$/u.exec(message);\n    if (!match) {\n      this.sendMessage('warning', `Unrecognized message format: ${message}`);\n      return;\n    }\n\n    // Process the message\n    const [ , type, value ] = match;\n    switch (type) {\n      case 'sub':\n        this.subscribe(value);\n        break;\n      default:\n        this.sendMessage('warning', `Unrecognized message type: ${type}`);\n    }\n  }\n\n  private subscribe(path: string): void {\n    try {\n      // Resolve and verify the URL\n      const resolved = new URL(path, `${this.protocol}${this.host}`);\n      if (resolved.host !== this.host) {\n        throw new Error(`Mismatched host: ${resolved.host} instead of ${this.host}`);\n      }\n      if (resolved.protocol !== this.protocol) {\n        throw new Error(`Mismatched protocol: ${resolved.protocol} instead of ${this.protocol}`);\n      }\n      // Subscribe to the URL\n      const url = resolved.href;\n      this.subscribedPaths.add(url);\n      this.sendMessage('ack', url);\n      this.logger.debug(`WebSocket subscribed to changes on ${url}`);\n    } catch (error: unknown) {\n      // Report errors to the socket\n      const errorText: string = (error as any).message;\n      this.sendMessage('error', errorText);\n      this.logger.warn(`WebSocket could not subscribe to ${path}: ${errorText}`);\n    }\n  }\n\n  private sendMessage(type: string, value: string): void {\n    this.socket.send(`${type} ${value}`);\n  }\n}\n\n/**\n * Provides live update functionality following\n * the Solid WebSockets API Spec solid-0.1\n */\nexport class UnsecureWebSocketsProtocol extends WebSocketHandler {\n  private readonly logger = getLoggerFor(this);\n  private readonly listeners = new Set<WebSocketListener>();\n\n  public constructor(source: EventEmitter) {\n    super();\n    source.on('changed', (modified: ModifiedResource[]): void => this.onResourceChanged(modified));\n  }\n\n  public async handle(input: { webSocket: WebSocket; upgradeRequest: HttpRequest }): Promise<void> {\n    const listener = new WebSocketListener(input.webSocket);\n    this.listeners.add(listener);\n    this.logger.info(`New WebSocket added, ${this.listeners.size} in total`);\n\n    listener.on('closed', (): void => {\n      this.listeners.delete(listener);\n      this.logger.info(`WebSocket closed, ${this.listeners.size} remaining`);\n    });\n    listener.start(input.upgradeRequest);\n  }\n\n  private onResourceChanged(modified: ModifiedResource[]): void {\n    for (const listener of this.listeners) {\n      listener.onResourceChanged(modified);\n    }\n  }\n}\n"]}