{"version":3,"file":"AggregateWellKnownBuilder.js","sourceRoot":"","sources":["../../../src/http/well-known/AggregateWellKnownBuilder.ts"],"names":[],"mappings":";;;AAEA,MAAa,yBAAyB;IACpC,YAAoC,iBAAqC;QAArC,sBAAiB,GAAjB,iBAAiB,CAAoB;IAAG,CAAC;IAEtE,KAAK,CAAC,mBAAmB;QAC9B,MAAM,UAAU,GAA0B,EAAE,CAAC;QAC7C,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAC,OAAO,EAAiB,EAAE;YAC3E,UAAU,CAAC,IAAI,CAAC,MAAM,OAAO,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC,CAAC;QACJ,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,YAAY,EAAuB,EAAE,CAAC,CAAC;YACxF,GAAG,YAAY;YACf,GAAG,YAAY;SAChB,CAAC,EAAE,EAAE,CAAC,CAAC;QACR,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAdD,8DAcC","sourcesContent":["import type { WellKnownBuilder } from './WellKnownBuilder';\n\nexport class AggregateWellKnownBuilder implements WellKnownBuilder {\n  public constructor(private readonly wellKnownBuilders: WellKnownBuilder[]) {}\n\n  public async getWellKnownSegment(): Promise<Record<string, any>> {\n    const wellKnowns: Record<string, any>[] = [];\n    await Promise.all(this.wellKnownBuilders.map(async(builder): Promise<void> => {\n      wellKnowns.push(await builder.getWellKnownSegment());\n    }));\n    const wellKnown = wellKnowns.reduce((aggWellKnown, newWellKnown): Record<string, any> => ({\n      ...aggWellKnown,\n      ...newWellKnown,\n    }), {});\n    return wellKnown;\n  }\n}\n"]}