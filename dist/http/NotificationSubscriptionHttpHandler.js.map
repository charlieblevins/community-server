{"version":3,"file":"NotificationSubscriptionHttpHandler.js","sourceRoot":"","sources":["../../src/http/NotificationSubscriptionHttpHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import type { EventEmitter } from 'events';\nimport type { CredentialSet } from '../authentication/Credentials';\nimport type { CredentialsExtractor } from '../authentication/CredentialsExtractor';\nimport type {\n  PermissionReader,\n  PermissionReaderInput,\n} from '../authorization/PermissionReader';\nimport type { PermissionSet } from '../authorization/permissions/Permissions';\nimport type { OperationHandlerInput } from '../http/ldp/OperationHandler';\nimport { OkResponseDescription } from '../http/output/response/OkResponseDescription';\nimport type { ResponseDescription } from '../http/output/response/ResponseDescription';\nimport { RepresentationMetadata } from '../http/representation/RepresentationMetadata';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type {\n  Subscription,\n  SubscriptionHandler,\n} from '../notification/SubscriptionHandler';\nimport { OperationHttpHandler } from '../server/OperationHttpHandler';\nimport type { OperationHttpHandlerInput } from '../server/OperationHttpHandler';\nimport type { KeyValueStorage } from '../storage/keyvalue/KeyValueStorage';\nimport type { ModifiedResource } from '../storage/ResourceStore';\nimport { BadRequestHttpError } from '../util/errors/BadRequestHttpError';\nimport { NotImplementedHttpError } from '../util/errors/NotImplementedHttpError';\n\nexport interface NotificationSubscriptionHttpHandlerArgs {\n  /**\n   * Base URL of the gateway.\n   */\n  baseUrl: string;\n  /**\n   * Relative path of the IDP entry point.\n   */\n  wsEndpoint: string;\n  /**\n   * Extracts the credentials from the incoming request.\n   */\n  credentialsExtractor: CredentialsExtractor;\n  /**\n   * Reads the permissions available for the Operation.\n   */\n  permissionReader: PermissionReader;\n  /**\n   * The storage where notification metadata will be stored.\n   */\n  notificationStorage: KeyValueStorage<string, Topic>;\n  /**\n   * The configured subscription handlers\n   */\n  handlers: SubscriptionHandler[];\n  /**\n   * The resource store to monitor for changes\n   */\n  source: EventEmitter;\n}\n\nexport interface Topic {\n  subscriptions: Record<string, Subscription>;\n}\n\n/**\n * Handles the negotiation of notification channels\n */\nexport class NotificationSubscriptionHttpHandler extends OperationHttpHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly credentialsExtractor: CredentialsExtractor;\n  private readonly permissionReader: PermissionReader;\n  private readonly notificationStorage: KeyValueStorage<string, Topic>;\n  private readonly subscriptionHandlers: Map<string, SubscriptionHandler> = new Map();\n\n  private readonly source: EventEmitter;\n\n  public constructor(args: NotificationSubscriptionHttpHandlerArgs) {\n    super();\n    this.credentialsExtractor = args.credentialsExtractor;\n    this.permissionReader = args.permissionReader;\n    // Trimming trailing slashes so the relative URL starts with a slash after slicing this off\n    this.notificationStorage = args.notificationStorage;\n    args.handlers.forEach((handler): void => {\n      this.subscriptionHandlers.set(handler.getType(), handler);\n    });\n    this.source = args.source;\n    this.source.on(\n      'changed',\n      async(changed: ModifiedResource[]): Promise<void> =>\n        this.onResourceChanged(changed),\n    );\n  }\n\n  public getSupportedTypes(): string[] {\n    return [ ...this.subscriptionHandlers.keys() ];\n  }\n\n  public async canHandle({ operation }: OperationHandlerInput): Promise<void> {\n    if (operation.method !== 'POST') {\n      throw new NotImplementedHttpError(\n        'This handler only supports POST operations',\n      );\n    }\n  }\n\n  public async handle(\n    input: OperationHttpHandlerInput,\n  ): Promise<ResponseDescription | undefined> {\n    const { request } = input;\n\n    const body = await request.read();\n    const subscriptionRequest = JSON.parse(body.toString());\n    const subscriptionType: string = subscriptionRequest.type;\n\n    const subscriptionHandler = this.subscriptionHandlers.get(subscriptionType);\n    if (!subscriptionHandler) {\n      throw new BadRequestHttpError(\n        `Subscription type ${subscriptionType} not supported`,\n      );\n    }\n    const topicURI: string = subscriptionRequest.topic;\n\n    const credentials: CredentialSet =\n      await this.credentialsExtractor.handleSafe(request);\n    if (!credentials.agent?.webId) {\n      throw new BadRequestHttpError('No WebId present in request');\n    }\n\n    const permissionReaderInput: PermissionReaderInput = {\n      credentials,\n      identifier: { path: topicURI },\n    };\n\n    const permissionSet: PermissionSet = await this.permissionReader.handleSafe(\n      permissionReaderInput,\n    );\n    if (!permissionSet.public?.read && !permissionSet.agent?.read) {\n      throw new BadRequestHttpError('Agent not allowed to read resource.');\n    }\n\n    let topic = await this.notificationStorage.get(topicURI);\n\n    if (!topic) {\n      topic = { subscriptions: {}};\n    }\n\n    const { subscriptions } = topic;\n    const subscription: Subscription =\n      subscriptionHandler.subscribe(subscriptionRequest);\n    subscriptions[credentials.agent.webId] = subscription;\n\n    await this.notificationStorage.set(topicURI, topic);\n\n    this.logger.verbose(\n      `Registered subscription[${subscriptionType}] at topic[${topicURI}] for agent[${credentials.agent.webId}]`,\n    );\n\n    const representationMetadata = new RepresentationMetadata(\n      'application/ld+json',\n    );\n    return new OkResponseDescription(\n      representationMetadata,\n      subscriptionHandler.getResponseData(subscription),\n    );\n  }\n\n  private async onResourceChanged(\n    resources: ModifiedResource[],\n  ): Promise<void> {\n    const orgResources = [ ...resources ];\n    for (const modified of orgResources) {\n      // Aconst modified = resources[0];\n      let topic = await this.notificationStorage.get(modified.resource.path);\n      if (!topic) {\n        topic = { subscriptions: {}};\n      }\n      const { subscriptions } = topic;\n      // eslint-disable-next-line guard-for-in\n      for (const key in subscriptions) {\n        const subscription = subscriptions[key];\n        const subscriptionHandler = this.subscriptionHandlers.get(\n          subscription.type,\n        );\n        await subscriptionHandler!.onResourcesChanged(resources, subscription);\n      }\n      resources.shift();\n    }\n  }\n}\n"]}