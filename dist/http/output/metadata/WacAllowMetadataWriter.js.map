{"version":3,"file":"WacAllowMetadataWriter.js","sourceRoot":"","sources":["../../../../src/http/output/metadata/WacAllowMetadataWriter.ts"],"names":[],"mappings":";;;AAEA,yDAAqD;AACrD,6DAAuD;AAEvD,qDAAkD;AAElD;;;;;GAKG;AACH,MAAa,sBAAuB,SAAQ,+BAAc;IACjD,KAAK,CAAC,MAAM,CAAC,KAAmE;QACrF,IAAI,SAAS,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,mBAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;QAC9F,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,mBAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;QAEpG,oCAAoC;QACpC,SAAS,GAAG,IAAI,GAAG,CAAC,CAAE,GAAG,SAAS,EAAE,GAAG,WAAW,CAAE,CAAC,CAAC;QAEtD,MAAM,aAAa,GAAa,EAAE,CAAC;QACnC,IAAI,SAAS,CAAC,IAAI,GAAG,CAAC,EAAE;YACtB,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;SAC/D;QACD,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC,EAAE;YACxB,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;SACnE;QAED,uDAAuD;QACvD,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,sBAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,WAAW,EAAE,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACjE;IACH,CAAC;IAEO,eAAe,CAAC,OAAa;QACnC,OAAO,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,kBAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;IACjE,CAAC;IAEO,iBAAiB,CAAC,IAAY,EAAE,KAAkB;QACxD,yCAAyC;QACzC,OAAO,GAAG,IAAI,KAAK,CAAE,GAAG,KAAK,CAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,KAAK,EAAU,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;IACxG,CAAC;CACF;AA9BD,wDA8BC","sourcesContent":["import type { Term } from 'rdf-js';\nimport type { HttpResponse } from '../../../server/HttpResponse';\nimport { addHeader } from '../../../util/HeaderUtil';\nimport { ACL, AUTH } from '../../../util/Vocabularies';\nimport type { RepresentationMetadata } from '../../representation/RepresentationMetadata';\nimport { MetadataWriter } from './MetadataWriter';\n\n/**\n * Add the necessary WAC-Allow header values.\n * Solid, §10.1: \"Servers exposing client’s access privileges on a resource URL MUST advertise\n * by including the WAC-Allow HTTP header in the response of HTTP HEAD and GET requests.\"\n * https://solid.github.io/specification/protocol#web-access-control\n */\nexport class WacAllowMetadataWriter extends MetadataWriter {\n  public async handle(input: { response: HttpResponse; metadata: RepresentationMetadata }): Promise<void> {\n    let userModes = new Set(input.metadata.getAll(AUTH.terms.userMode).map(this.aclToPermission));\n    const publicModes = new Set(input.metadata.getAll(AUTH.terms.publicMode).map(this.aclToPermission));\n\n    // Public access implies user access\n    userModes = new Set([ ...userModes, ...publicModes ]);\n\n    const headerStrings: string[] = [];\n    if (userModes.size > 0) {\n      headerStrings.push(this.createAccessParam('user', userModes));\n    }\n    if (publicModes.size > 0) {\n      headerStrings.push(this.createAccessParam('public', publicModes));\n    }\n\n    // Only add the header if there are permissions to show\n    if (headerStrings.length > 0) {\n      addHeader(input.response, 'WAC-Allow', headerStrings.join(','));\n    }\n  }\n\n  private aclToPermission(aclTerm: Term): string {\n    return aclTerm.value.slice(ACL.namespace.length).toLowerCase();\n  }\n\n  private createAccessParam(name: string, modes: Set<string>): string {\n    // Sort entries to have consistent output\n    return `${name}=\"${[ ...modes ].sort((left, right): number => left.localeCompare(right)).join(' ')}\"`;\n  }\n}\n"]}