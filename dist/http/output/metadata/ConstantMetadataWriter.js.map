{"version":3,"file":"ConstantMetadataWriter.js","sourceRoot":"","sources":["../../../../src/http/output/metadata/ConstantMetadataWriter.ts"],"names":[],"mappings":";;;AACA,yDAAqD;AACrD,qDAAkD;AAElD;;GAEG;AACH,MAAa,sBAAuB,SAAQ,+BAAc;IAGxD,YAAmB,OAA+B;QAChD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,QAAQ,EAA8B;QAC1D,KAAK,MAAM,CAAE,GAAG,EAAE,KAAK,CAAE,IAAI,IAAI,CAAC,OAAO,EAAE;YACzC,sBAAS,CAAC,QAAQ,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;SACjC;IACH,CAAC;CACF;AAbD,wDAaC","sourcesContent":["import type { HttpResponse } from '../../../server/HttpResponse';\nimport { addHeader } from '../../../util/HeaderUtil';\nimport { MetadataWriter } from './MetadataWriter';\n\n/**\n * A {@link MetadataWriter} that takes a constant map of header names and values.\n */\nexport class ConstantMetadataWriter extends MetadataWriter {\n  private readonly headers: [string, string][];\n\n  public constructor(headers: Record<string, string>) {\n    super();\n    this.headers = Object.entries(headers);\n  }\n\n  public async handle({ response }: { response: HttpResponse }): Promise<void> {\n    for (const [ key, value ] of this.headers) {\n      addHeader(response, key, value);\n    }\n  }\n}\n"]}