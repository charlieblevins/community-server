{"version":3,"file":"SafeErrorHandler.js","sourceRoot":"","sources":["../../../../src/http/output/error/SafeErrorHandler.ts"],"names":[],"mappings":";;;AAAA,sDAAwD;AACxD,8DAAoE;AACpE,sEAAmE;AACnE,yDAA6D;AAC7D,qDAAmD;AACnD,6DAAuD;AACvD,wFAAqF;AAGrF,iDAA8C;AAE9C;;;GAGG;AACH,MAAa,gBAAiB,SAAQ,2BAAY;IAMhD,YAAmB,YAA0B,EAAE,cAAc,GAAG,KAAK;QACnE,KAAK,EAAE,CAAC;QANS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAuB;QACzC,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;SAClD;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0CAA0C,8BAAkB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;SAC1F;QACD,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;QACxB,MAAM,UAAU,GAAG,6BAAa,CAAC,KAAK,CAAC,CAAC;QACxC,MAAM,QAAQ,GAAG,IAAI,+CAAsB,CAAC,YAAY,CAAC,CAAC;QAC1D,QAAQ,CAAC,GAAG,CAAC,mBAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,oBAAS,CAAC,UAAU,EAAE,kBAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QAEpF,MAAM,IAAI,GAAG,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC;YACnE,GAAG,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;YACpB,GAAG,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,OAAO,IAAI,CAAC;QAEtC,OAAO;YACL,UAAU;YACV,QAAQ;YACR,IAAI,EAAE,8BAAiB,CAAC,IAAI,CAAC;SAC9B,CAAC;IACJ,CAAC;CACF;AAjCD,4CAiCC","sourcesContent":["import { getLoggerFor } from '../../../logging/LogUtil';\nimport { createErrorMessage } from '../../../util/errors/ErrorUtil';\nimport { getStatusCode } from '../../../util/errors/HttpErrorUtil';\nimport { guardedStreamFrom } from '../../../util/StreamUtil';\nimport { toLiteral } from '../../../util/TermUtil';\nimport { HTTP, XSD } from '../../../util/Vocabularies';\nimport { RepresentationMetadata } from '../../representation/RepresentationMetadata';\nimport type { ResponseDescription } from '../response/ResponseDescription';\nimport type { ErrorHandlerArgs } from './ErrorHandler';\nimport { ErrorHandler } from './ErrorHandler';\n\n/**\n * Returns a simple text description of an error.\n * This class is a failsafe in case the wrapped error handler fails.\n */\nexport class SafeErrorHandler extends ErrorHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly errorHandler: ErrorHandler;\n  private readonly showStackTrace: boolean;\n\n  public constructor(errorHandler: ErrorHandler, showStackTrace = false) {\n    super();\n    this.errorHandler = errorHandler;\n    this.showStackTrace = showStackTrace;\n  }\n\n  public async handle(input: ErrorHandlerArgs): Promise<ResponseDescription> {\n    try {\n      return await this.errorHandler.handleSafe(input);\n    } catch (error: unknown) {\n      this.logger.debug(`Recovering from error handler failure: ${createErrorMessage(error)}`);\n    }\n    const { error } = input;\n    const statusCode = getStatusCode(error);\n    const metadata = new RepresentationMetadata('text/plain');\n    metadata.add(HTTP.terms.statusCodeNumber, toLiteral(statusCode, XSD.terms.integer));\n\n    const text = typeof error.stack === 'string' && this.showStackTrace ?\n      `${error.stack}\\n` :\n      `${error.name}: ${error.message}\\n`;\n\n    return {\n      statusCode,\n      metadata,\n      data: guardedStreamFrom(text),\n    };\n  }\n}\n"]}