{"version":3,"file":"RepresentationConvertingStore.js","sourceRoot":"","sources":["../../src/storage/RepresentationConvertingStore.ts"],"names":[],"mappings":";;;AAGA,gDAAkD;AAElD,4EAAyE;AAEzE,yDAAsD;AAGtD;;GAEG;AACH,MAAa,6BAAuE,SAAQ,mCAAmB;IAO7G;;OAEG;IACH,YAAmB,MAAS,EAAE,OAI7B;QACC,KAAK,CAAC,MAAM,CAAC,CAAC;QAdG,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAe7C,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;QACtD,IAAI,CAAC,WAAW,GAAG,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,IAAI,2CAAoB,EAAE,CAAC;QAC7D,IAAI,CAAC,YAAY,GAAG,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,IAAI,2CAAoB,EAAE,CAAC;QAC/D,IAAI,CAAC,aAAa,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,EAAC,CAAC;IAC/D,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,UAA8B,EAAE,WAAsC,EACnG,UAAuB;QACvB,MAAM,cAAc,GAAG,MAAM,KAAK,CAAC,iBAAiB,CAAC,UAAU,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;QAC1F,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,EAAE,CAAC,CAAC;IACnF,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,UAA8B,EAAE,cAA8B,EACrF,UAAuB;QACvB,4GAA4G;QAC5G,0DAA0D;QAC1D,cAAc,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QACpH,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;IACzE,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,UAA8B,EAAE,cAA8B,EAC3F,UAAuB;QACvB,cAAc,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QACpH,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,UAAU,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;IAC/E,CAAC;CACF;AAzCD,sEAyCC","sourcesContent":["import type { Representation } from '../http/representation/Representation';\nimport type { RepresentationPreferences } from '../http/representation/RepresentationPreferences';\nimport type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { Conditions } from './Conditions';\nimport { PassthroughConverter } from './conversion/PassthroughConverter';\nimport type { RepresentationConverter } from './conversion/RepresentationConverter';\nimport { PassthroughStore } from './PassthroughStore';\nimport type { ModifiedResource, ResourceStore } from './ResourceStore';\n\n/**\n * Store that provides (optional) conversion of incoming and outgoing {@link Representation}s.\n */\nexport class RepresentationConvertingStore<T extends ResourceStore = ResourceStore> extends PassthroughStore<T> {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly inConverter: RepresentationConverter;\n  private readonly outConverter: RepresentationConverter;\n  private readonly inPreferences: RepresentationPreferences;\n\n  /**\n   * TODO: This should take RepresentationPreferences instead of a type string when supported by Components.js.\n   */\n  public constructor(source: T, options: {\n    outConverter?: RepresentationConverter;\n    inConverter?: RepresentationConverter;\n    inType?: string;\n  }) {\n    super(source);\n    const { inConverter, outConverter, inType } = options;\n    this.inConverter = inConverter ?? new PassthroughConverter();\n    this.outConverter = outConverter ?? new PassthroughConverter();\n    this.inPreferences = !inType ? {} : { type: { [inType]: 1 }};\n  }\n\n  public async getRepresentation(identifier: ResourceIdentifier, preferences: RepresentationPreferences,\n    conditions?: Conditions): Promise<Representation> {\n    const representation = await super.getRepresentation(identifier, preferences, conditions);\n    return this.outConverter.handleSafe({ identifier, representation, preferences });\n  }\n\n  public async addResource(identifier: ResourceIdentifier, representation: Representation,\n    conditions?: Conditions): Promise<ModifiedResource> {\n    // We can potentially run into problems here if we convert a turtle document where the base IRI is required,\n    // since we don't know the resource IRI yet at this point.\n    representation = await this.inConverter.handleSafe({ identifier, representation, preferences: this.inPreferences });\n    return this.source.addResource(identifier, representation, conditions);\n  }\n\n  public async setRepresentation(identifier: ResourceIdentifier, representation: Representation,\n    conditions?: Conditions): Promise<ModifiedResource[]> {\n    representation = await this.inConverter.handleSafe({ identifier, representation, preferences: this.inPreferences });\n    return this.source.setRepresentation(identifier, representation, conditions);\n  }\n}\n"]}