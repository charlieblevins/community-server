{"version":3,"file":"PreferenceSupport.js","sourceRoot":"","sources":["../../../src/storage/routing/PreferenceSupport.ts"],"names":[],"mappings":";;;AAKA;;;;;;GAMG;AACH,MAAa,iBAAiB;IAI5B,YAAmB,IAAY,EAAE,SAAkC;QACjE,IAAI,CAAC,WAAW,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAC,CAAC;QAC1C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,KAAyE;QAC7F,MAAM,QAAQ,GAAG,EAAE,GAAG,KAAK,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7D,IAAI;YACF,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACzC,OAAO,IAAI,CAAC;SACb;QAAC,MAAM;YACN,OAAO,KAAK,CAAC;SACd;IACH,CAAC;CACF;AAlBD,8CAkBC","sourcesContent":["import type { Representation } from '../../http/representation/Representation';\nimport type { RepresentationPreferences } from '../../http/representation/RepresentationPreferences';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport type { RepresentationConverter } from '../conversion/RepresentationConverter';\n\n/**\n * Helper class that checks if the stored {@link RepresentationConverter} and {@link RepresentationPreferences}\n * support the given input {@link RepresentationPreferences} and {@link Representation}.\n *\n * Creates a new object by combining the input arguments together with the stored preferences and checks\n * if the converter can handle that object.\n */\nexport class PreferenceSupport {\n  private readonly preferences: RepresentationPreferences;\n  private readonly converter: RepresentationConverter;\n\n  public constructor(type: string, converter: RepresentationConverter) {\n    this.preferences = { type: { [type]: 1 }};\n    this.converter = converter;\n  }\n\n  public async supports(input: { identifier: ResourceIdentifier; representation: Representation }): Promise<boolean> {\n    const newInput = { ...input, preferences: this.preferences };\n    try {\n      await this.converter.canHandle(newInput);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n"]}