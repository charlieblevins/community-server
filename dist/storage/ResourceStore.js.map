{"version":3,"file":"ResourceStore.js","sourceRoot":"","sources":["../../src/storage/ResourceStore.ts"],"names":[],"mappings":";;;AAMA;;GAEG;AACH,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,6DAAO,CAAA;IACP,6DAAO,CAAA;IACP,6DAAO,CAAA;AACT,CAAC,EAJW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAI3B;AAUD;;;GAGG;AACH,SAAgB,sBAAsB,CACpC,QAA4B,EAC5B,gBAAkC;IAElC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,CAAC;AACxC,CAAC;AALD,wDAKC","sourcesContent":["import type { Patch } from '../http/representation/Patch';\nimport type { Representation } from '../http/representation/Representation';\nimport type { RepresentationPreferences } from '../http/representation/RepresentationPreferences';\nimport type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport type { Conditions } from './Conditions';\n\n/**\n * The types of modification being tracked\n */\nexport enum ModificationType {\n  created,\n  changed,\n  deleted\n}\n\n/**\n * A modified resource with a specific modification type\n */\nexport interface ModifiedResource {\n  resource: ResourceIdentifier;\n  modificationType: ModificationType;\n}\n\n/**\n * The factory functions to be used when creating modified resources in storage classes and tests.\n * This is done for convinience.\n */\nexport function createModifiedResource(\n  resource: ResourceIdentifier,\n  modificationType: ModificationType,\n): ModifiedResource {\n  return { resource, modificationType };\n}\n\n/**\n * A ResourceStore represents a collection of resources.\n * It has been designed such that each of its methods\n * can be implemented in an atomic way:  for each CRUD operation, only one\n * dedicated method needs to be called. A fifth method enables the optimization\n * of partial updates with PATCH. It is up to the implementer of the interface to\n * (not) make an implementation atomic.\n *\n * ResourceStores are also responsible for taking auxiliary resources into account\n * should those be relevant to the store.\n */\nexport interface ResourceStore {\n\n  /**\n   * Check if a resource exists.\n   * @param identifier - Identifier of resource to check.\n   *\n   * @returns A promise resolving if the resource already exists\n   */\n  resourceExists: (identifier: ResourceIdentifier, conditions?: Conditions) => Promise<boolean>;\n\n  /**\n   * Retrieves a representation of a resource.\n   * @param identifier - Identifier of the resource to read.\n   * @param preferences - Preferences indicating desired representations.\n   * @param conditions - Optional conditions under which to proceed.\n   *\n   * @returns A representation corresponding to the identifier.\n   */\n  getRepresentation: (\n    identifier: ResourceIdentifier,\n    preferences: RepresentationPreferences,\n    conditions?: Conditions,\n  ) => Promise<Representation>;\n\n  /**\n   * Sets or replaces the representation of a resource,\n   * creating a new resource and intermediary containers as needed.\n   * @param identifier - Identifier of resource to update.\n   * @param representation - New representation of the resource.\n   * @param conditions - Optional conditions under which to proceed.\n   *\n   * @returns Info about the possibly modified resources.\n   */\n  setRepresentation: (\n    identifier: ResourceIdentifier,\n    representation: Representation,\n    conditions?: Conditions,\n  ) => Promise<ModifiedResource[]>;\n\n  /**\n   * Creates a new resource in the container.\n   * @param container - Container in which to create a resource.\n   * @param representation - Representation of the new resource\n   * @param conditions - Optional conditions under which to proceed.\n   *\n   * @returns Info about the newly created resource.\n   */\n  addResource: (\n    container: ResourceIdentifier,\n    representation: Representation,\n    conditions?: Conditions,\n  ) => Promise<ModifiedResource>;\n\n  /**\n   * Deletes a resource.\n   * @param identifier - Identifier of resource to delete.\n   * @param conditions - Optional conditions under which to proceed.\n   *\n   * @returns Info about the possibly modified resources.\n   */\n  deleteResource: (\n    identifier: ResourceIdentifier,\n    conditions?: Conditions,\n  ) => Promise<ModifiedResource[]>;\n\n  /**\n   * Sets or updates the representation of a resource,\n   * creating a new resource and intermediary containers as needed.\n   * @param identifier - Identifier of resource to update.\n   * @param patch - Description of which parts to update.\n   * @param conditions - Optional conditions under which to proceed.\n   *\n   * @returns Info about the possibly modified resources.\n   */\n  modifyResource: (\n    identifier: ResourceIdentifier,\n    patch: Patch,\n    conditions?: Conditions,\n  ) => Promise<ModifiedResource[]>;\n}\n"]}