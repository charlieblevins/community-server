{"version":3,"file":"KeyValueStorage.js","sourceRoot":"","sources":["../../../src/storage/keyvalue/KeyValueStorage.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * A simple storage solution that can be used for internal values that need to be stored.\n */\nexport interface KeyValueStorage<TKey, TValue> {\n  /**\n   * Returns the value stored for the given identifier.\n   * `undefined` if no value is stored.\n   * @param identifier - Identifier to get the value for.\n   */\n  get: (key: TKey) => Promise<TValue | undefined>;\n\n  /**\n   * Checks if there is a value stored for the given key.\n   * @param identifier - Identifier to check.\n   */\n  has: (key: TKey) => Promise<boolean>;\n\n  /**\n   * Sets the value for the given key.\n   * @param key - Key to set/update.\n   * @param value - Value to store.\n   *\n   * @returns The storage.\n   */\n  set: (key: TKey, value: TValue) => Promise<this>;\n\n  /**\n   * Deletes the value stored for the given key.\n   * @param key - Key to delete.\n   *\n   * @returns If there was a value to delete.\n   */\n  delete: (key: TKey) => Promise<boolean>;\n\n  /**\n   * An iterable of entries in the storage.\n   */\n  entries: () => AsyncIterableIterator<[TKey, TValue]>;\n}\n"]}