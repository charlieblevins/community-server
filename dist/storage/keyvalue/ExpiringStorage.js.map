{"version":3,"file":"ExpiringStorage.js","sourceRoot":"","sources":["../../../src/storage/keyvalue/ExpiringStorage.ts"],"names":[],"mappings":"","sourcesContent":["import type { KeyValueStorage } from './KeyValueStorage';\n\n/* eslint-disable @typescript-eslint/method-signature-style */\n/**\n * A KeyValueStorage in which the values can expire.\n * Entries with no expiration date never expire.\n */\nexport interface ExpiringStorage<TKey, TValue> extends KeyValueStorage<TKey, TValue> {\n  /**\n   * Sets the value for the given key.\n   * Should error if the data is already expired.\n   *\n   * @param key - Key to set/update.\n   * @param value - Value to store.\n   * @param expiration - How long this data should stay valid in milliseconds.\n   *\n   * @returns The storage.\n   */\n  set(key: TKey, value: TValue, expiration?: number): Promise<this>;\n\n  /**\n   * Sets the value for the given key.\n   * Should error if the data is already expired.\n   *\n   * @param key - Key to set/update.\n   * @param value - Value to store.\n   * @param expires - When this value expires. Never if undefined.\n   *\n   * @returns The storage.\n   */\n  set(key: TKey, value: TValue, expires?: Date): Promise<this>;\n}\n"]}