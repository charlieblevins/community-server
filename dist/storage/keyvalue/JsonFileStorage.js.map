{"version":3,"file":"JsonFileStorage.js","sourceRoot":"","sources":["../../../src/storage/keyvalue/JsonFileStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import { promises as fsPromises } from 'fs';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { isSystemError } from '../../util/errors/SystemError';\nimport type { ReadWriteLocker } from '../../util/locking/ReadWriteLocker';\nimport type { KeyValueStorage } from './KeyValueStorage';\n\n/**\n * Uses a JSON file to store key/value pairs.\n */\nexport class JsonFileStorage implements KeyValueStorage<string, unknown> {\n  private readonly filePath: string;\n  private readonly locker: ReadWriteLocker;\n  private readonly lockIdentifier: ResourceIdentifier;\n\n  public constructor(filePath: string, locker: ReadWriteLocker) {\n    this.filePath = filePath;\n    this.locker = locker;\n\n    // Using file path as identifier for the lock as it should be unique for this file\n    this.lockIdentifier = { path: filePath };\n  }\n\n  public async get(key: string): Promise<unknown | undefined> {\n    const json = await this.getJsonSafely();\n    return json[key];\n  }\n\n  public async has(key: string): Promise<boolean> {\n    const json = await this.getJsonSafely();\n    return typeof json[key] !== 'undefined';\n  }\n\n  public async set(key: string, value: unknown): Promise<this> {\n    return this.updateJsonSafely((json: NodeJS.Dict<unknown>): this => {\n      json[key] = value;\n      return this;\n    });\n  }\n\n  public async delete(key: string): Promise<boolean> {\n    return this.updateJsonSafely((json: NodeJS.Dict<unknown>): boolean => {\n      if (typeof json[key] !== 'undefined') {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete json[key];\n        return true;\n      }\n      return false;\n    });\n  }\n\n  public async* entries(): AsyncIterableIterator<[ string, unknown ]> {\n    const json = await this.getJsonSafely();\n    yield* Object.entries(json);\n  }\n\n  /**\n   * Acquires the data in the JSON file while using a read lock.\n   */\n  private async getJsonSafely(): Promise<NodeJS.Dict<unknown>> {\n    return this.locker.withReadLock(this.lockIdentifier, this.getJson.bind(this));\n  }\n\n  /**\n   * Updates the data in the JSON file while using a write lock.\n   * @param updateFn - A function that updates the JSON object.\n   *\n   * @returns The return value of `updateFn`.\n   */\n  private async updateJsonSafely<T>(updateFn: (json: NodeJS.Dict<unknown>) => T): Promise<T> {\n    return this.locker.withWriteLock(this.lockIdentifier, async(): Promise<T> => {\n      const json = await this.getJson();\n      const result = updateFn(json);\n      const updatedText = JSON.stringify(json, null, 2);\n      await fsPromises.writeFile(this.filePath, updatedText, 'utf8');\n      return result;\n    });\n  }\n\n  /**\n   * Reads and parses the data from the JSON file (without locking).\n   */\n  private async getJson(): Promise<NodeJS.Dict<unknown>> {\n    try {\n      const text = await fsPromises.readFile(this.filePath, 'utf8');\n      return JSON.parse(text);\n    } catch (error: unknown) {\n      if (isSystemError(error) && error.code === 'ENOENT') {\n        return {};\n      }\n      throw error;\n    }\n  }\n}\n"]}