{"version":3,"file":"MemoryMapStorage.js","sourceRoot":"","sources":["../../../src/storage/keyvalue/MemoryMapStorage.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,gBAAgB;IAG3B;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,EAAkB,CAAC;IACxC,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,KAAa;QACzC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAW;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAA,CAAE,OAAO;QACnB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;YACvC,MAAM,KAAK,CAAC;SACb;IACH,CAAC;CACF;AA7BD,4CA6BC","sourcesContent":["import type { KeyValueStorage } from './KeyValueStorage';\n\n/**\n * A {@link KeyValueStorage} which uses a JavaScript Map for internal storage.\n */\nexport class MemoryMapStorage<TValue> implements KeyValueStorage<string, TValue> {\n  private readonly data: Map<string, TValue>;\n\n  public constructor() {\n    this.data = new Map<string, TValue>();\n  }\n\n  public async get(key: string): Promise<TValue | undefined> {\n    return this.data.get(key);\n  }\n\n  public async has(key: string): Promise<boolean> {\n    return this.data.has(key);\n  }\n\n  public async set(key: string, value: TValue): Promise<this> {\n    this.data.set(key, value);\n    return this;\n  }\n\n  public async delete(key: string): Promise<boolean> {\n    return this.data.delete(key);\n  }\n\n  public async* entries(): AsyncIterableIterator<[string, TValue]> {\n    for (const entry of this.data.entries()) {\n      yield entry;\n    }\n  }\n}\n"]}