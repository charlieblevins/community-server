{"version":3,"file":"SubdomainExtensionBasedMapper.js","sourceRoot":"","sources":["../../../src/storage/mapping/SubdomainExtensionBasedMapper.ts"],"names":[],"mappings":";;;AAAA,wCAA+C;AAE/C,6EAA0E;AAC1E,+EAA4E;AAC5E,2EAAwE;AACxE,kDAO6B;AAC7B,iEAA8D;AAE9D;;;;;;;;;;;;;;;GAeG;AACH,MAAa,6BAA8B,SAAQ,2CAAoB;IAKrE,YAAmB,IAAY,EAAE,YAAoB,EAAE,aAAa,GAAG,KAAK,EAC1E,WAAoC;QACpC,KAAK,CAAC,IAAI,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;QACvC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,gCAAqB,CAAC,8BAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,SAAS,GAAG,wBAAa,CAAC,8BAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5D,CAAC;IAES,KAAK,CAAC,eAAe,CAAC,QAAgB;QAC9C,OAAO,8BAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3D,CAAC;IAES,KAAK,CAAC,cAAc,CAAC,QAAgB;QAC7C,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QACzC,OAAO,8BAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED;;;;;OAKG;IACO,aAAa,CAAC,QAAgB;QACtC,MAAM,KAAK,GAAG,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACzB,MAAM,IAAI,yCAAmB,CAAC,yBAAyB,QAAQ,EAAE,CAAC,CAAC;SACpE;QACD,MAAM,IAAI,GAAG,kCAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,aAAa,EAAE;YACnC,OAAO,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,EAAE,CAAC;SACzC;QACD,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,kBAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,EAAE,CAAC;IACtF,CAAC;IAED;;;;;OAKG;IACO,eAAe,CAAC,UAA8B;QACtD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,UAAU,CAAC,IAAI,4BAA4B,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;YAC9F,MAAM,IAAI,qCAAiB,EAAE,CAAC;SAC/B;QACD,8EAA8E;QAC9E,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,aAAa,EAAE;YACnC,MAAM,IAAI,uCAAkB,CAAC,aAAa,IAAI,CAAC,aAAa,mBAAmB,CAAC,CAAC;SAClF;QACD,MAAM,IAAI,GAAG,IAAI,kCAAuB,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;QACnF,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,oBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;QACtE,OAAO,IAAI,SAAS,GAAG,IAAI,EAAE,CAAC;IAChC,CAAC;CACF;AA5DD,sEA4DC","sourcesContent":["import { toASCII, toUnicode } from 'punycode/';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { ForbiddenHttpError } from '../../util/errors/ForbiddenHttpError';\nimport { InternalServerError } from '../../util/errors/InternalServerError';\nimport { NotFoundHttpError } from '../../util/errors/NotFoundHttpError';\nimport {\n  decodeUriPathComponents,\n  encodeUriPathComponents,\n  ensureTrailingSlash,\n  createSubdomainRegexp,\n  extractScheme,\n  trimTrailingSlashes,\n} from '../../util/PathUtil';\nimport { ExtensionBasedMapper } from './ExtensionBasedMapper';\n\n/**\n * Extends the functionality of an {@link ExtensionBasedMapper} to support identifiers containing subdomains.\n * This is mostly only relevant in case you want to support multiple pods with subdomain identifiers\n * in a single ResourceStore.\n *\n * When converting to/from file paths, the subdomain is interpreted as a folder in the rootFilePath.\n * The rest of the path is then interpreted relative to that folder.\n * E.g. `http://alice.test.com/foo` results in the relative path `/alice/foo`.\n *\n * In case there is no subdomain in the URL, the `baseSubdomain` parameter is used instead.\n * E.g., if the `baseSubdomain` is \"www\", `http://test.com/foo` would result in the relative path `/www/foo`.\n * This means that there is no identifier that maps to the `rootFilePath` itself.\n * To prevent the possibility of 2 identifiers linking to the same file,\n * identifiers containing the default subdomain are rejected.\n * E.g., `http://www.test.com/foo` would result in a 403, even if `http://test.com/foo` exists.\n */\nexport class SubdomainExtensionBasedMapper extends ExtensionBasedMapper {\n  private readonly baseSubdomain: string;\n  private readonly regex: RegExp;\n  private readonly baseParts: { scheme: string; rest: string };\n\n  public constructor(base: string, rootFilepath: string, baseSubdomain = 'www',\n    customTypes?: Record<string, string>) {\n    super(base, rootFilepath, customTypes);\n    this.baseSubdomain = baseSubdomain;\n    this.regex = createSubdomainRegexp(ensureTrailingSlash(base));\n    this.baseParts = extractScheme(ensureTrailingSlash(base));\n  }\n\n  protected async getContainerUrl(relative: string): Promise<string> {\n    return ensureTrailingSlash(this.relativeToUrl(relative));\n  }\n\n  protected async getDocumentUrl(relative: string): Promise<string> {\n    relative = this.stripExtension(relative);\n    return trimTrailingSlashes(this.relativeToUrl(relative));\n  }\n\n  /**\n   * Converts a relative path to a URL.\n   * Examples assuming http://test.com/ is the base url and `www` the base subdomain:\n   *  * /www/foo gives http://test.com/foo\n   *  * /alice/foo/ gives http://alice.test.com/foo/\n   */\n  protected relativeToUrl(relative: string): string {\n    const match = /^\\/([^/]+)\\/(.*)$/u.exec(relative);\n    if (!Array.isArray(match)) {\n      throw new InternalServerError(`Illegal relative path ${relative}`);\n    }\n    const tail = encodeUriPathComponents(match[2]);\n    if (match[1] === this.baseSubdomain) {\n      return `${this.baseRequestURI}/${tail}`;\n    }\n    return `${this.baseParts.scheme}${toASCII(match[1])}.${this.baseParts.rest}${tail}`;\n  }\n\n  /**\n   * Gets the relative path as though the subdomain url is the base, and then prepends it with the subdomain.\n   * Examples assuming http://test.com/ is the base url and `www` the base subdomain:\n   *  * http://test.com/foo gives /www/foo\n   *  * http://alice.test.com/foo/ gives /alice/foo/\n   */\n  protected getRelativePath(identifier: ResourceIdentifier): string {\n    const match = this.regex.exec(identifier.path);\n    if (!Array.isArray(match)) {\n      this.logger.warn(`The URL ${identifier.path} is outside of the scope ${this.baseRequestURI}`);\n      throw new NotFoundHttpError();\n    }\n    // Otherwise 2 different identifiers would be able to access the same resource\n    if (match[1] === this.baseSubdomain) {\n      throw new ForbiddenHttpError(`Subdomain ${this.baseSubdomain} can not be used.`);\n    }\n    const tail = `/${decodeUriPathComponents(identifier.path.slice(match[0].length))}`;\n    const subdomain = match[1] ? toUnicode(match[1]) : this.baseSubdomain;\n    return `/${subdomain}${tail}`;\n  }\n}\n"]}