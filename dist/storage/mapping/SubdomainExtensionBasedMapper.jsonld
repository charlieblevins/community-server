{
  "@context": [
    "https://linkedsoftwaredependencies.org/bundles/npm/@solid/community-server/^2.0.0/components/context.jsonld"
  ],
  "@id": "npmd:@solid/community-server",
  "components": [
    {
      "@id": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper",
      "@type": "Class",
      "requireElement": "SubdomainExtensionBasedMapper",
      "extends": [
        "scs:dist/storage/mapping/ExtensionBasedMapper#ExtensionBasedMapper"
      ],
      "comment": "Extends the functionality of an {@link ExtensionBasedMapper} to support identifiers containing subdomains. This is mostly only relevant in case you want to support multiple pods with subdomain identifiers in a single ResourceStore.  When converting to/from file paths, the subdomain is interpreted as a folder in the rootFilePath. The rest of the path is then interpreted relative to that folder. E.g. `http://alice.test.com/foo` results in the relative path `/alice/foo`.  In case there is no subdomain in the URL, the `baseSubdomain` parameter is used instead. E.g., if the `baseSubdomain` is \"www\", `http://test.com/foo` would result in the relative path `/www/foo`. This means that there is no identifier that maps to the `rootFilePath` itself. To prevent the possibility of 2 identifiers linking to the same file, identifiers containing the default subdomain are rejected. E.g., `http://www.test.com/foo` would result in a 403, even if `http://test.com/foo` exists.",
      "parameters": [
        {
          "@id": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_base",
          "range": "xsd:string",
          "unique": true,
          "required": true
        },
        {
          "@id": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_rootFilepath",
          "range": "xsd:string",
          "unique": true,
          "required": true
        },
        {
          "@id": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_baseSubdomain",
          "range": "xsd:string",
          "unique": true
        },
        {
          "@id": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_customTypes",
          "range": {
            "@type": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_customTypes_range",
            "parameters": [
              {
                "@id": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_customTypes_key",
                "required": true,
                "unique": true
              },
              {
                "@id": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_customTypes_value",
                "range": "xsd:string",
                "required": true,
                "unique": true
              }
            ]
          }
        }
      ],
      "constructorArguments": [
        {
          "@id": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_base"
        },
        {
          "@id": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_rootFilepath"
        },
        {
          "@id": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_baseSubdomain"
        },
        {
          "fields": [
            {
              "collectEntries": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_customTypes",
              "key": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_customTypes_key",
              "value": {
                "@id": "scs:dist/storage/mapping/SubdomainExtensionBasedMapper#SubdomainExtensionBasedMapper_customTypes_value"
              }
            }
          ]
        }
      ]
    }
  ]
}