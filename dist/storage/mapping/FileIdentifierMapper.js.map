{"version":3,"file":"FileIdentifierMapper.js","sourceRoot":"","sources":["../../../src/storage/mapping/FileIdentifierMapper.ts"],"names":[],"mappings":"","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\n\nexport interface ResourceLink {\n  /**\n   * Identifier of a resource.\n   */\n  identifier: ResourceIdentifier;\n  /**\n   * File path of a resource.\n   */\n  filePath: string;\n  /**\n   * Content-type for a document (not defined for containers).\n   */\n  contentType?: string;\n  /**\n   * If the resource is a metadata file.\n   */\n  isMetadata: boolean;\n}\n\n/**\n * Supports mapping a file to an URL and back.\n */\nexport interface FileIdentifierMapper {\n  /**\n   * Maps the given file path to an URL and determines the content-type\n   * @param filePath - The input file path.\n   * @param isContainer - If the path corresponds to a file.\n   *\n   * @returns A ResourceLink with all the necessary metadata.\n   */\n  mapFilePathToUrl: (filePath: string, isContainer: boolean) => Promise<ResourceLink>;\n  /**\n   * Maps the given resource identifier / URL to a file path.\n   * Determines the content-type if no content-type was provided by finding the corresponding file.\n   * If there is no corresponding file a file path will be generated.\n   * For containers the content-type input gets ignored.\n   * @param identifier - The input identifier.\n   * @param isMetadata - If we are mapping the metadata of the resource instead of its data.\n   * @param contentType - The (optional) content-type of the resource.\n   *\n   * @returns A ResourceLink with all the necessary metadata.\n   */\n  mapUrlToFilePath: (identifier: ResourceIdentifier, isMetadata: boolean, contentType?: string) =>\n  Promise<ResourceLink>;\n}\n\n/**\n * Factory that can create FileIdentifierMappers so the base and rootFilePath can be set dynamically.\n * Specifically used when identifiers need to be generated for a new pod (since pod identifiers are generated).\n */\nexport interface FileIdentifierMapperFactory<T extends FileIdentifierMapper = FileIdentifierMapper> {\n  create: (base: string, rootFilePath: string) => Promise<T>;\n}\n"]}