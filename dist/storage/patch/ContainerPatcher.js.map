{"version":3,"file":"ContainerPatcher.js","sourceRoot":"","sources":["../../../src/storage/patch/ContainerPatcher.ts"],"names":[],"mappings":";;;AAAA,uFAAoF;AAEpF,0DAAyD;AACzD,uFAAoF;AACpF,kDAA4D;AAC5D,0DAAqD;AAErD,mEAAgE;AAEhE;;;;GAIG;AACH,MAAa,gBAAiB,SAAQ,6CAAqB;IAGzD,YAAmB,OAA8B;QAC/C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAAiC;QACtD,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,KAAK,CAAC;QAC7C,IAAI,CAAC,gCAAqB,CAAC,UAAU,CAAC,EAAE;YACtC,MAAM,IAAI,iDAAuB,CAAC,gCAAgC,CAAC,CAAC;SACrE;QACD,yEAAyE;QACzE,IAAI,oBAAoB,GAAG,cAAc,CAAC;QAC1C,IAAI,cAAc,EAAE;YAClB,oBAAoB,GAAG,IAAI,yCAAmB,CAAC,EAAE,EAAE,cAAc,CAAC,QAAQ,EAAE,6BAAc,CAAC,CAAC;SAC7F;QACD,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,GAAG,KAAK,EAAE,cAAc,EAAE,oBAAoB,EAAE,CAAC,CAAC;IACnF,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAiC;QACnD,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,KAAK,CAAC;QAC7C,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACzC;QACD,4EAA4E;QAC5E,cAAc,CAAC,QAAQ,CAAC,WAAW,CACjC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,yBAAU,CAAC,KAAK,CAAC,gBAAgB,CAAC,CACnF,CAAC;QACF,MAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QAE9C,uGAAuG;QACvG,MAAM,uBAAuB,GAAG,IAAI,yCAAmB,CAAC,KAAK,EAAE,UAAU,EAAE,6BAAc,EAAE,KAAK,CAAC,CAAC;QAClG,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,GAAG,KAAK,EAAE,cAAc,EAAE,uBAAuB,EAAE,CAAC,CAAC;IAC1F,CAAC;CACF;AApCD,4CAoCC","sourcesContent":["import { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport { INTERNAL_QUADS } from '../../util/ContentTypes';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { isContainerIdentifier } from '../../util/PathUtil';\nimport { SOLID_META } from '../../util/Vocabularies';\nimport type { RepresentationPatcherInput } from './RepresentationPatcher';\nimport { RepresentationPatcher } from './RepresentationPatcher';\n\n/**\n * A `RepresentationPatcher` specifically for patching containers.\n * A new body will be constructed from the metadata by removing all generated metadata.\n * This body will be passed to the wrapped patcher.\n */\nexport class ContainerPatcher extends RepresentationPatcher {\n  private readonly patcher: RepresentationPatcher;\n\n  public constructor(patcher: RepresentationPatcher) {\n    super();\n    this.patcher = patcher;\n  }\n\n  public async canHandle(input: RepresentationPatcherInput): Promise<void> {\n    const { identifier, representation } = input;\n    if (!isContainerIdentifier(identifier)) {\n      throw new NotImplementedHttpError('Only containers are supported.');\n    }\n    // Verify the patcher can handle a representation containing the metadata\n    let containerPlaceholder = representation;\n    if (representation) {\n      containerPlaceholder = new BasicRepresentation([], representation.metadata, INTERNAL_QUADS);\n    }\n    await this.patcher.canHandle({ ...input, representation: containerPlaceholder });\n  }\n\n  public async handle(input: RepresentationPatcherInput): Promise<Representation> {\n    const { identifier, representation } = input;\n    if (!representation) {\n      return await this.patcher.handle(input);\n    }\n    // Remove all generated metadata to prevent it from being stored permanently\n    representation.metadata.removeQuads(\n      representation.metadata.quads(null, null, null, SOLID_META.terms.ResponseMetadata),\n    );\n    const quads = representation.metadata.quads();\n\n    // We do not copy the original metadata here, otherwise it would put back triples that might be deleted\n    const containerRepresentation = new BasicRepresentation(quads, identifier, INTERNAL_QUADS, false);\n    return await this.patcher.handle({ ...input, representation: containerRepresentation });\n  }\n}\n"]}