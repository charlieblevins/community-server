{"version":3,"file":"ReadOnlyStore.js","sourceRoot":"","sources":["../../src/storage/ReadOnlyStore.ts"],"names":[],"mappings":";;;AAGA,0EAAuE;AAEvE,yDAAsD;AAGtD;;GAEG;AACH,sDAAsD;AACtD,MAAa,aAAuD,SAAQ,mCAAmB;IAC7F,YAAmB,MAAS;QAC1B,KAAK,CAAC,MAAM,CAAC,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,SAA6B,EAAE,cAA8B,EACpF,UAAuB;QACvB,MAAM,IAAI,uCAAkB,EAAE,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,UAA8B,EACxD,UAAuB;QACvB,MAAM,IAAI,uCAAkB,EAAE,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,UAA8B,EAAE,KAAY,EACtE,UAAuB;QACvB,MAAM,IAAI,uCAAkB,EAAE,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,UAA8B,EAAE,cAA8B,EAC3F,UAAuB;QACvB,MAAM,IAAI,uCAAkB,EAAE,CAAC;IACjC,CAAC;CACF;AAxBD,sCAwBC","sourcesContent":["import type { Patch } from '../http/representation/Patch';\nimport type { Representation } from '../http/representation/Representation';\nimport type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport { ForbiddenHttpError } from '../util/errors/ForbiddenHttpError';\nimport type { Conditions } from './Conditions';\nimport { PassthroughStore } from './PassthroughStore';\nimport type { ModifiedResource, ResourceStore } from './ResourceStore';\n\n/**\n * Store that only allow read operations on the underlying source.\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nexport class ReadOnlyStore<T extends ResourceStore = ResourceStore> extends PassthroughStore<T> {\n  public constructor(source: T) {\n    super(source);\n  }\n\n  public async addResource(container: ResourceIdentifier, representation: Representation,\n    conditions?: Conditions): Promise<ModifiedResource> {\n    throw new ForbiddenHttpError();\n  }\n\n  public async deleteResource(identifier: ResourceIdentifier,\n    conditions?: Conditions): Promise<ModifiedResource[]> {\n    throw new ForbiddenHttpError();\n  }\n\n  public async modifyResource(identifier: ResourceIdentifier, patch: Patch,\n    conditions?: Conditions): Promise<ModifiedResource[]> {\n    throw new ForbiddenHttpError();\n  }\n\n  public async setRepresentation(identifier: ResourceIdentifier, representation: Representation,\n    conditions?: Conditions): Promise<ModifiedResource[]> {\n    throw new ForbiddenHttpError();\n  }\n}\n"]}