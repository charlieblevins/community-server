{"version":3,"file":"PassthroughStore.js","sourceRoot":"","sources":["../../src/storage/PassthroughStore.ts"],"names":[],"mappings":";;;AAOA;;;;GAIG;AACH,MAAa,gBAAgB;IAG3B,YAAmB,MAAS;QAC1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,UAA8B,EAAE,UAAuB;QACjF,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAC5D,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,UAA8B,EAAE,WAAsC,EACnG,UAAuB;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,UAAU,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;IAC5E,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,SAA6B,EAAE,cAA8B,EACpF,UAAuB;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;IACxE,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,UAA8B,EACxD,UAAuB;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAC5D,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,UAA8B,EAAE,KAAY,EACtE,UAAuB;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;IACnE,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,UAA8B,EAAE,cAA8B,EAC3F,UAAuB;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,UAAU,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;IAC/E,CAAC;CACF;AAnCD,4CAmCC","sourcesContent":["import type { Patch } from '../http/representation/Patch';\nimport type { Representation } from '../http/representation/Representation';\nimport type { RepresentationPreferences } from '../http/representation/RepresentationPreferences';\nimport type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport type { Conditions } from './Conditions';\nimport type { ModifiedResource, ResourceStore } from './ResourceStore';\n\n/**\n * Store that calls the corresponding functions of the source Store.\n * Can be extended by stores that do not want to override all functions\n * by implementing a decorator pattern.\n */\nexport class PassthroughStore<T extends ResourceStore = ResourceStore> implements ResourceStore {\n  protected readonly source: T;\n\n  public constructor(source: T) {\n    this.source = source;\n  }\n\n  public async resourceExists(identifier: ResourceIdentifier, conditions?: Conditions): Promise<boolean> {\n    return this.source.resourceExists(identifier, conditions);\n  }\n\n  public async getRepresentation(identifier: ResourceIdentifier, preferences: RepresentationPreferences,\n    conditions?: Conditions): Promise<Representation> {\n    return this.source.getRepresentation(identifier, preferences, conditions);\n  }\n\n  public async addResource(container: ResourceIdentifier, representation: Representation,\n    conditions?: Conditions): Promise<ModifiedResource> {\n    return this.source.addResource(container, representation, conditions);\n  }\n\n  public async deleteResource(identifier: ResourceIdentifier,\n    conditions?: Conditions): Promise<ModifiedResource[]> {\n    return this.source.deleteResource(identifier, conditions);\n  }\n\n  public async modifyResource(identifier: ResourceIdentifier, patch: Patch,\n    conditions?: Conditions): Promise<ModifiedResource[]> {\n    return this.source.modifyResource(identifier, patch, conditions);\n  }\n\n  public async setRepresentation(identifier: ResourceIdentifier, representation: Representation,\n    conditions?: Conditions): Promise<ModifiedResource[]> {\n    return this.source.setRepresentation(identifier, representation, conditions);\n  }\n}\n"]}