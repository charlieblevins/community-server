{"version":3,"file":"SparqlDataAccessor.js","sourceRoot":"","sources":["../../../src/storage/accessors/SparqlDataAccessor.ts"],"names":[],"mappings":";;;;;;AACA,sEAA6C;AAC7C,iEAA8D;AAC9D,2BAAiC;AAWjC,uCAAqC;AAErC,6FAA0F;AAE1F,mDAAqD;AACrD,0DAAyD;AACzD,2EAAwE;AACxE,2DAAiE;AACjE,2EAAwE;AACxE,uFAAoF;AACpF,mGAAgG;AAChG,4DAAuD;AAGvD,kDAA4D;AAC5D,0DAA4D;AAG5D,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,gBAAW,CAAC;AAEhE;;;;;;;;;;;GAWG;AACH,MAAa,kBAAkB;IAO7B,YAAmB,QAAgB,EAAE,kBAAsC;QANxD,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,OAAO,GAAG,IAAI,6CAAqB,EAAE,CAAC;QAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,oBAAS,EAAE,CAAC;IACnC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,SAAS,CAAC,cAA8B;QACnD,IAAI,cAAc,CAAC,MAAM,IAAI,cAAc,CAAC,QAAQ,CAAC,WAAW,KAAK,6BAAc,EAAE;YACnF,MAAM,IAAI,6DAA6B,CAAC,8BAA8B,CAAC,CAAC;SACzE;IACH,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,OAAO,CAAC,UAA8B;QACjD,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACxC,OAAO,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IACpE,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,WAAW,CAAC,UAA8B;QACrD,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACxC,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,KAAK,GAAG,MAAM,yBAAc,CAAC,MAAM,CAAC,CAAC;QAE3C,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,IAAI,qCAAiB,EAAE,CAAC;SAC/B;QAED,MAAM,QAAQ,GAAG,IAAI,+CAAsB,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACxE,IAAI,CAAC,gCAAqB,CAAC,UAAU,CAAC,EAAE;YACtC,QAAQ,CAAC,WAAW,GAAG,6BAAc,CAAC;SACvC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEM,KAAK,CAAA,CAAE,WAAW,CAAC,UAA8B;QACtD,uFAAuF;QACvF,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACxC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1E,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,MAAM,EAAE;YAChC,MAAM,IAAI,+CAAsB,CAAE,KAAc,CAAC,MAAmB,CAAC,CAAC;SACvE;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,cAAc,CAAC,UAA8B,EAAE,QAAgC;QAC1F,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,aAAa,CAAC,UAA8B,EAAE,IAAuB,EAAE,QAAgC;QAElH,IAAI,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE;YACzC,MAAM,IAAI,qCAAiB,CAAC,+DAA+D,CAAC,CAAC;SAC9F;QACD,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAE1D,MAAM,OAAO,GAAG,MAAM,yBAAc,CAAC,IAAI,CAAW,CAAC;QACrD,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;QAC3B,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAW,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;YAChE,MAAM,IAAI,iDAAuB,CAAC,kDAAkD,CAAC,CAAC;SACvF;QAED,4CAA4C;QAC5C,QAAQ,CAAC,SAAS,CAAC,2BAAY,CAAC,CAAC;QAEjC,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IACnF,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,cAAc,CAAC,UAA8B;QACxD,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IAChE,CAAC;IAED;;;OAGG;IACK,eAAe,CAAC,UAA8B;QACpD,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAExC,sCAAsC;QACtC,IAAI,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE;YACvD,OAAO,EAAE,IAAI,EAAE,CAAC;SACjB;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAChF,MAAM,MAAM,GAAG,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAChD,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACK,eAAe,CAAC,IAAe;QACrC,OAAO,SAAS,CAAC,QAAQ,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACK,oBAAoB,CAAC,UAA8B;QACzD,OAAO,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACK,eAAe,CAAC,IAAe;QACrC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;QAClE,OAAO;YACL,SAAS,EAAE,WAAW;YACtB,QAAQ,EAAE,CAAE,OAAO,CAAE;YACrB,KAAK,EAAE,CAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAE,OAAO,CAAE,CAAC,CAAE;YACpD,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,EAAE;SACb,CAAC;IACJ,CAAC;IAEO,iBAAiB,CAAC,IAAe,EAAE,OAAe;QACxD,OAAO;YACL,IAAI,EAAE,OAAO;YACb,IAAI;YACJ,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;SACrC,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACK,YAAY,CAAC,IAAe,EAAE,QAAgC,EAAE,MAAkB,EAAE,OAAgB;QAE1G,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAE5C,6CAA6C;QAC7C,MAAM,MAAM,GAAiB,CAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAE,CAAC;QACpF,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAE,IAAI,CAAC,MAAM,EAAE,kBAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAE,CAAC,CAAC,CAAC;SACzF;QAED,yDAAyD;QACzD,MAAM,OAAO,GAAsB;YACjC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC;YACpC;gBACE,UAAU,EAAE,QAAQ;gBACpB,MAAM;aACP;SACF,CAAC;QAEF,4CAA4C;QAC5C,IAAI,OAAO,EAAE;YACX,yDAAyD;YACzD,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;YAClD,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;aACpD;SACF;QAED,OAAO;YACL,OAAO;YACP,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,EAAE;SACb,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,YAAY,CAAC,IAAe,EAAE,MAAkB;QACtD,MAAM,MAAM,GAAW;YACrB,OAAO,EAAE;gBACP,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC;gBAChC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;aACvD;YACD,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,EAAE;SACb,CAAC;QAEF,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;gBAClB,UAAU,EAAE,QAAQ;gBACpB,MAAM,EAAE,CAAE,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAE,IAAI,CAAC,MAAM,EAAE,kBAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAE,CAAC,CAAE;aACvF,CAAC,CAAC;SACJ;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACK,qBAAqB,CAAC,IAAe;QAC3C,OAAO;YACL,UAAU,EAAE,aAAa;YACzB,MAAM,EAAE,CAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAE,CAAC,CAAE;SAChG,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACK,iBAAiB,CAAC,IAAe,EAAE,OAAe;QACxD,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,mBAAmB,CAAC,WAA2B;QAC3D,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qCAAqC,IAAI,CAAC,QAAQ,KAAK,KAAK,EAAE,CAAC,CAAC;QACjF,IAAI;YACF,OAAO,2BAAW,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;SAC3E;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,IAAI,CAAC,QAAQ,WAAW,8BAAkB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAC1F,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,gBAAgB,CAAC,WAAmB;QAChD,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAkC,IAAI,CAAC,QAAQ,KAAK,KAAK,EAAE,CAAC,CAAC;QAC9E,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SAC7D;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,IAAI,CAAC,QAAQ,WAAW,8BAAkB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAC1F,MAAM,KAAK,CAAC;SACb;IACH,CAAC;CACF;AAnRD,gDAmRC","sourcesContent":["import type { Readable } from 'stream';\nimport arrayifyStream from 'arrayify-stream';\nimport { SparqlEndpointFetcher } from 'fetch-sparql-endpoint';\nimport { DataFactory } from 'n3';\nimport type { NamedNode, Quad } from 'rdf-js';\nimport type {\n  ConstructQuery,\n  GraphPattern,\n  GraphQuads,\n  InsertDeleteOperation,\n  SparqlGenerator,\n  Update,\n  UpdateOperation,\n} from 'sparqljs';\nimport { Generator } from 'sparqljs';\nimport type { Representation } from '../../http/representation/Representation';\nimport { RepresentationMetadata } from '../../http/representation/RepresentationMetadata';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport { INTERNAL_QUADS } from '../../util/ContentTypes';\nimport { ConflictHttpError } from '../../util/errors/ConflictHttpError';\nimport { createErrorMessage } from '../../util/errors/ErrorUtil';\nimport { NotFoundHttpError } from '../../util/errors/NotFoundHttpError';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { UnsupportedMediaTypeHttpError } from '../../util/errors/UnsupportedMediaTypeHttpError';\nimport { guardStream } from '../../util/GuardedStream';\nimport type { Guarded } from '../../util/GuardedStream';\nimport type { IdentifierStrategy } from '../../util/identifiers/IdentifierStrategy';\nimport { isContainerIdentifier } from '../../util/PathUtil';\nimport { CONTENT_TYPE, LDP } from '../../util/Vocabularies';\nimport type { DataAccessor } from './DataAccessor';\n\nconst { defaultGraph, namedNode, quad, variable } = DataFactory;\n\n/**\n * Stores all data and metadata of resources in a SPARQL backend.\n * Communication is done by sending SPARQL queries.\n * Queries are constructed in such a way to keep everything consistent,\n * such as updating containment triples and deleting old data when it is overwritten.\n *\n * Since metadata is hidden, no containment triples are stored for metadata files.\n *\n * All input container metadata is stored in its metadata identifier.\n * The containment triples are stored in the graph corresponding to the actual identifier\n * so those don't get overwritten.\n */\nexport class SparqlDataAccessor implements DataAccessor {\n  protected readonly logger = getLoggerFor(this);\n  private readonly endpoint: string;\n  private readonly identifierStrategy: IdentifierStrategy;\n  private readonly fetcher: SparqlEndpointFetcher;\n  private readonly generator: SparqlGenerator;\n\n  public constructor(endpoint: string, identifierStrategy: IdentifierStrategy) {\n    this.endpoint = endpoint;\n    this.identifierStrategy = identifierStrategy;\n    this.fetcher = new SparqlEndpointFetcher();\n    this.generator = new Generator();\n  }\n\n  /**\n   * Only Quad data streams are supported.\n   */\n  public async canHandle(representation: Representation): Promise<void> {\n    if (representation.binary || representation.metadata.contentType !== INTERNAL_QUADS) {\n      throw new UnsupportedMediaTypeHttpError('Only Quad data is supported.');\n    }\n  }\n\n  /**\n   * Returns all triples stored for the corresponding identifier.\n   * Note that this will not throw a 404 if no results were found.\n   */\n  public async getData(identifier: ResourceIdentifier): Promise<Guarded<Readable>> {\n    const name = namedNode(identifier.path);\n    return await this.sendSparqlConstruct(this.sparqlConstruct(name));\n  }\n\n  /**\n   * Returns the metadata for the corresponding identifier.\n   * Will throw 404 if no metadata was found.\n   */\n  public async getMetadata(identifier: ResourceIdentifier): Promise<RepresentationMetadata> {\n    const name = namedNode(identifier.path);\n    const query = this.sparqlConstruct(this.getMetadataNode(name));\n    const stream = await this.sendSparqlConstruct(query);\n    const quads = await arrayifyStream(stream);\n\n    if (quads.length === 0) {\n      throw new NotFoundHttpError();\n    }\n\n    const metadata = new RepresentationMetadata(identifier).addQuads(quads);\n    if (!isContainerIdentifier(identifier)) {\n      metadata.contentType = INTERNAL_QUADS;\n    }\n\n    return metadata;\n  }\n\n  public async* getChildren(identifier: ResourceIdentifier): AsyncIterableIterator<RepresentationMetadata> {\n    // Only triples that have a container identifier as subject are the containment triples\n    const name = namedNode(identifier.path);\n    const stream = await this.sendSparqlConstruct(this.sparqlConstruct(name));\n    for await (const entry of stream) {\n      yield new RepresentationMetadata((entry as Quad).object as NamedNode);\n    }\n  }\n\n  /**\n   * Writes the given metadata for the container.\n   */\n  public async writeContainer(identifier: ResourceIdentifier, metadata: RepresentationMetadata): Promise<void> {\n    const { name, parent } = this.getRelatedNames(identifier);\n    return this.sendSparqlUpdate(this.sparqlInsert(name, metadata, parent));\n  }\n\n  /**\n   * Reads the given data stream and stores it together with the metadata.\n   */\n  public async writeDocument(identifier: ResourceIdentifier, data: Guarded<Readable>, metadata: RepresentationMetadata):\n  Promise<void> {\n    if (this.isMetadataIdentifier(identifier)) {\n      throw new ConflictHttpError('Not allowed to create NamedNodes with the metadata extension.');\n    }\n    const { name, parent } = this.getRelatedNames(identifier);\n\n    const triples = await arrayifyStream(data) as Quad[];\n    const def = defaultGraph();\n    if (triples.some((triple): boolean => !def.equals(triple.graph))) {\n      throw new NotImplementedHttpError('Only triples in the default graph are supported.');\n    }\n\n    // Not relevant since all content is triples\n    metadata.removeAll(CONTENT_TYPE);\n\n    return this.sendSparqlUpdate(this.sparqlInsert(name, metadata, parent, triples));\n  }\n\n  /**\n   * Removes all graph data relevant to the given identifier.\n   */\n  public async deleteResource(identifier: ResourceIdentifier): Promise<void> {\n    const { name, parent } = this.getRelatedNames(identifier);\n    return this.sendSparqlUpdate(this.sparqlDelete(name, parent));\n  }\n\n  /**\n   * Helper function to get named nodes corresponding to the identifier and its parent container.\n   * In case of a root container only the name will be returned.\n   */\n  private getRelatedNames(identifier: ResourceIdentifier): { name: NamedNode; parent?: NamedNode } {\n    const name = namedNode(identifier.path);\n\n    // Root containers don't have a parent\n    if (this.identifierStrategy.isRootContainer(identifier)) {\n      return { name };\n    }\n\n    const parentIdentifier = this.identifierStrategy.getParentContainer(identifier);\n    const parent = namedNode(parentIdentifier.path);\n    return { name, parent };\n  }\n\n  /**\n   * Creates the name for the metadata of a resource.\n   * @param name - Name of the (non-metadata) resource.\n   */\n  private getMetadataNode(name: NamedNode): NamedNode {\n    return namedNode(`meta:${name.value}`);\n  }\n\n  /**\n   * Checks if the given identifier corresponds to the names used for metadata identifiers.\n   */\n  private isMetadataIdentifier(identifier: ResourceIdentifier): boolean {\n    return identifier.path.startsWith('meta:');\n  }\n\n  /**\n   * Creates a CONSTRUCT query that returns all quads contained within a single resource.\n   * @param name - Name of the resource to query.\n   */\n  private sparqlConstruct(name: NamedNode): ConstructQuery {\n    const pattern = quad(variable('s'), variable('p'), variable('o'));\n    return {\n      queryType: 'CONSTRUCT',\n      template: [ pattern ],\n      where: [ this.sparqlSelectGraph(name, [ pattern ]) ],\n      type: 'query',\n      prefixes: {},\n    };\n  }\n\n  private sparqlSelectGraph(name: NamedNode, triples: Quad[]): GraphPattern {\n    return {\n      type: 'graph',\n      name,\n      patterns: [{ type: 'bgp', triples }],\n    };\n  }\n\n  /**\n   * Creates an update query that overwrites the data and metadata of a resource.\n   * If there are no triples we assume it's a container (so don't overwrite the main graph with containment triples).\n   * @param name - Name of the resource to update.\n   * @param metadata - New metadata of the resource.\n   * @param parent - Name of the parent to update the containment triples.\n   * @param triples - New data of the resource.\n   */\n  private sparqlInsert(name: NamedNode, metadata: RepresentationMetadata, parent?: NamedNode, triples?: Quad[]):\n  Update {\n    const metaName = this.getMetadataNode(name);\n\n    // Insert new metadata and containment triple\n    const insert: GraphQuads[] = [ this.sparqlUpdateGraph(metaName, metadata.quads()) ];\n    if (parent) {\n      insert.push(this.sparqlUpdateGraph(parent, [ quad(parent, LDP.terms.contains, name) ]));\n    }\n\n    // Necessary updates: delete metadata and insert new data\n    const updates: UpdateOperation[] = [\n      this.sparqlUpdateDeleteAll(metaName),\n      {\n        updateType: 'insert',\n        insert,\n      },\n    ];\n\n    // Only overwrite data triples for documents\n    if (triples) {\n      // This needs to be first so it happens before the insert\n      updates.unshift(this.sparqlUpdateDeleteAll(name));\n      if (triples.length > 0) {\n        insert.push(this.sparqlUpdateGraph(name, triples));\n      }\n    }\n\n    return {\n      updates,\n      type: 'update',\n      prefixes: {},\n    };\n  }\n\n  /**\n   * Creates a query that deletes everything related to the given name.\n   * @param name - Name of resource to delete.\n   * @param parent - Parent of the resource to delete so the containment triple can be removed (unless root).\n   */\n  private sparqlDelete(name: NamedNode, parent?: NamedNode): Update {\n    const update: Update = {\n      updates: [\n        this.sparqlUpdateDeleteAll(name),\n        this.sparqlUpdateDeleteAll(this.getMetadataNode(name)),\n      ],\n      type: 'update',\n      prefixes: {},\n    };\n\n    if (parent) {\n      update.updates.push({\n        updateType: 'delete',\n        delete: [ this.sparqlUpdateGraph(parent, [ quad(parent, LDP.terms.contains, name) ]) ],\n      });\n    }\n\n    return update;\n  }\n\n  /**\n   * Helper function for creating SPARQL update queries.\n   * Creates an operation for deleting all triples in a graph.\n   * @param name - Name of the graph to delete.\n   */\n  private sparqlUpdateDeleteAll(name: NamedNode): InsertDeleteOperation {\n    return {\n      updateType: 'deletewhere',\n      delete: [ this.sparqlUpdateGraph(name, [ quad(variable(`s`), variable(`p`), variable(`o`)) ]) ],\n    };\n  }\n\n  /**\n   * Helper function for creating SPARQL update queries.\n   * Creates a Graph selector with the given triples.\n   * @param name - Name of the graph.\n   * @param triples - Triples/triple patterns to select.\n   */\n  private sparqlUpdateGraph(name: NamedNode, triples: Quad[]): GraphQuads {\n    return { type: 'graph', name, triples };\n  }\n\n  /**\n   * Sends a SPARQL CONSTRUCT query to the endpoint and returns a stream of quads.\n   * @param sparqlQuery - Query to execute.\n   */\n  private async sendSparqlConstruct(sparqlQuery: ConstructQuery): Promise<Guarded<Readable>> {\n    const query = this.generator.stringify(sparqlQuery);\n    this.logger.info(`Sending SPARQL CONSTRUCT query to ${this.endpoint}: ${query}`);\n    try {\n      return guardStream(await this.fetcher.fetchTriples(this.endpoint, query));\n    } catch (error: unknown) {\n      this.logger.error(`SPARQL endpoint ${this.endpoint} error: ${createErrorMessage(error)}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Sends a SPARQL update query to the stored endpoint.\n   * @param sparqlQuery - Query to send.\n   */\n  private async sendSparqlUpdate(sparqlQuery: Update): Promise<void> {\n    const query = this.generator.stringify(sparqlQuery);\n    this.logger.info(`Sending SPARQL UPDATE query to ${this.endpoint}: ${query}`);\n    try {\n      return await this.fetcher.fetchUpdate(this.endpoint, query);\n    } catch (error: unknown) {\n      this.logger.error(`SPARQL endpoint ${this.endpoint} error: ${createErrorMessage(error)}`);\n      throw error;\n    }\n  }\n}\n"]}