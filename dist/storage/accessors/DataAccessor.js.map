{"version":3,"file":"DataAccessor.js","sourceRoot":"","sources":["../../../src/storage/accessors/DataAccessor.ts"],"names":[],"mappings":"","sourcesContent":["import type { Readable } from 'stream';\nimport type { Representation } from '../../http/representation/Representation';\nimport type { RepresentationMetadata } from '../../http/representation/RepresentationMetadata';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport type { Guarded } from '../../util/GuardedStream';\n\n/**\n * A DataAccessor is the building block closest to the actual data storage.\n * It should not worry about most Solid logic, most of that will be handled before it is called.\n * There are a few things it still needs to do, and it is very important every implementation does this:\n *  * If the input identifier ends with a slash, it should be assumed the identifier is targeting a container.\n *  * Similarly, if there is no trailing slash it should assume a document.\n *  * It should always throw a NotFoundHttpError if it does not have data matching the input identifier.\n *  * DataAccessors should not generate containment triples. This will be done externally using `getChildren`.\n */\nexport interface DataAccessor {\n  /**\n   * Should throw a NotImplementedHttpError if the DataAccessor does not support storing the given Representation.\n   * @param representation - Incoming Representation.\n   *\n   * @throws BadRequestHttpError\n   * If it does not support the incoming data.\n   */\n  canHandle: (representation: Representation) => Promise<void>;\n\n  /**\n   * Returns a data stream stored for the given identifier.\n   * It can be assumed that the incoming identifier will always correspond to a document.\n   * @param identifier - Identifier for which the data is requested.\n   */\n  getData: (identifier: ResourceIdentifier) => Promise<Guarded<Readable>>;\n\n  /**\n   * Returns the metadata corresponding to the identifier.\n   * @param identifier - Identifier for which the metadata is requested.\n   */\n  getMetadata: (identifier: ResourceIdentifier) => Promise<RepresentationMetadata>;\n\n  /**\n   * Returns metadata for all resources in the requested container.\n   * This should not be all metadata of those resources (but it can be),\n   * but instead the main metadata you want to show in situations\n   * where all these resources are presented simultaneously.\n   * Generally this would be metadata that is present for all of these resources,\n   * such as resource type or last modified date.\n   *\n   * It can be safely assumed that the incoming identifier will always correspond to a container.\n   *\n   * @param identifier - Identifier of the parent container.\n   */\n  getChildren: (identifier: ResourceIdentifier) => AsyncIterableIterator<RepresentationMetadata>;\n\n  /**\n   * Writes data and metadata for a document.\n   * If any data and/or metadata exist for the given identifier, it should be overwritten.\n   * @param identifier - Identifier of the resource.\n   * @param data - Data to store.\n   * @param metadata - Metadata to store.\n   */\n  writeDocument: (identifier: ResourceIdentifier, data: Guarded<Readable>, metadata: RepresentationMetadata) =>\n  Promise<void>;\n\n  /**\n   * Writes metadata for a container.\n   * If the container does not exist yet it should be created,\n   * if it does its metadata should be overwritten, except for the containment triples.\n   * @param identifier - Identifier of the container.\n   * @param metadata - Metadata to store.\n   */\n  writeContainer: (identifier: ResourceIdentifier, metadata: RepresentationMetadata) => Promise<void>;\n\n  /**\n   * Deletes the resource and its corresponding metadata.\n   *\n   * Solid, ยง5.4: \"When a contained resource is deleted, the server MUST also remove the corresponding containment\n   * triple, which has the effect of removing the deleted resource from the containing container.\"\n   * https://solid.github.io/specification/protocol#deleting-resources\n   *\n   * @param identifier - Resource to delete.\n   */\n  deleteResource: (identifier: ResourceIdentifier) => Promise<void>;\n}\n"]}