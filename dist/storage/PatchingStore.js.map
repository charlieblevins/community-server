{"version":3,"file":"PatchingStore.js","sourceRoot":"","sources":["../../src/storage/PatchingStore.ts"],"names":[],"mappings":";;;AAEA,oFAAiF;AAEjF,yDAAsD;AAItD;;;;GAIG;AACH,MAAa,aAAuD,SAAQ,mCAAmB;IAG7F,YAAmB,MAAS,EAAE,YAA0B;QACtD,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,UAA8B,EAAE,KAAY,EACtE,UAAuB;QACvB,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;SACxE;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,iDAAuB,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;gBAC7C,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;aACjF;YACD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;CACF;AAnBD,sCAmBC","sourcesContent":["import type { Patch } from '../http/representation/Patch';\nimport type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport { NotImplementedHttpError } from '../util/errors/NotImplementedHttpError';\nimport type { Conditions } from './Conditions';\nimport { PassthroughStore } from './PassthroughStore';\nimport type { PatchHandler } from './patch/PatchHandler';\nimport type { ModifiedResource, ResourceStore } from './ResourceStore';\n\n/**\n * {@link ResourceStore} using decorator pattern for the `modifyResource` function.\n * If the original store supports the {@link Patch}, behaviour will be identical,\n * otherwise the {@link PatchHandler} will be called instead.\n */\nexport class PatchingStore<T extends ResourceStore = ResourceStore> extends PassthroughStore<T> {\n  private readonly patchHandler: PatchHandler;\n\n  public constructor(source: T, patchHandler: PatchHandler) {\n    super(source);\n    this.patchHandler = patchHandler;\n  }\n\n  public async modifyResource(identifier: ResourceIdentifier, patch: Patch,\n    conditions?: Conditions): Promise<ModifiedResource[]> {\n    try {\n      return await this.source.modifyResource(identifier, patch, conditions);\n    } catch (error: unknown) {\n      if (NotImplementedHttpError.isInstance(error)) {\n        return this.patchHandler.handleSafe({ source: this.source, identifier, patch });\n      }\n      throw error;\n    }\n  }\n}\n"]}