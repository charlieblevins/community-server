{"version":3,"file":"RdfToQuadConverter.js","sourceRoot":"","sources":["../../../src/storage/conversion/RdfToQuadConverter.ts"],"names":[],"mappings":";;;;;;AAAA,mCAAqC;AACrC,0DAAkC;AAClC,uFAAoF;AAEpF,0DAAyD;AACzD,+EAA4E;AAC5E,sDAAmD;AAEnD,iFAA8E;AAE9E;;GAEG;AACH,MAAa,kBAAmB,SAAQ,2DAA4B;IAClE;QACE,KAAK,CAAC,mBAAS,CAAC,0BAA0B,EAAE,EAAE,6BAAc,CAAC,CAAC;IAChE,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,cAAc,EAAE,UAAU,EAA+B;QAC7E,MAAM,QAAQ,GAAG,mBAAS,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE;YACpD,WAAW,EAAE,cAAc,CAAC,QAAQ,CAAC,WAAY;YACjD,OAAO,EAAE,UAAU,CAAC,IAAI;SACzB,CAAC,CAAC;QACH,MAAM,IAAI,GAAG,IAAI,oBAAW,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACnD,MAAM,IAAI,GAAG,uBAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,KAAK,EAAS,EAAE,CAAC,IAAI,yCAAmB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QAElG,OAAO,IAAI,yCAAmB,CAAC,IAAI,EAAE,cAAc,CAAC,QAAQ,EAAE,6BAAc,CAAC,CAAC;IAChF,CAAC;CACF;AAfD,gDAeC","sourcesContent":["import { PassThrough } from 'stream';\nimport rdfParser from 'rdf-parse';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport { INTERNAL_QUADS } from '../../util/ContentTypes';\nimport { BadRequestHttpError } from '../../util/errors/BadRequestHttpError';\nimport { pipeSafely } from '../../util/StreamUtil';\nimport type { RepresentationConverterArgs } from './RepresentationConverter';\nimport { TypedRepresentationConverter } from './TypedRepresentationConverter';\n\n/**\n * Converts most major RDF serializations to `internal/quads`.\n */\nexport class RdfToQuadConverter extends TypedRepresentationConverter {\n  public constructor() {\n    super(rdfParser.getContentTypesPrioritized(), INTERNAL_QUADS);\n  }\n\n  public async handle({ representation, identifier }: RepresentationConverterArgs): Promise<Representation> {\n    const rawQuads = rdfParser.parse(representation.data, {\n      contentType: representation.metadata.contentType!,\n      baseIRI: identifier.path,\n    });\n    const pass = new PassThrough({ objectMode: true });\n    const data = pipeSafely(rawQuads, pass, (error): Error => new BadRequestHttpError(error.message));\n\n    return new BasicRepresentation(data, representation.metadata, INTERNAL_QUADS);\n  }\n}\n"]}