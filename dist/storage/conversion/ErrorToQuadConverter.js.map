{"version":3,"file":"ErrorToQuadConverter.js","sourceRoot":"","sources":["../../../src/storage/conversion/ErrorToQuadConverter.ts"],"names":[],"mappings":";;;AAAA,uFAAoF;AAEpF,6FAA0F;AAC1F,0DAAyE;AACzE,sDAAsD;AACtD,0DAA0D;AAE1D,iFAA8E;AAE9E;;GAEG;AACH,MAAa,oBAAqB,SAAQ,2DAA4B;IACpE;QACE,KAAK,CAAC,6BAAc,EAAE,6BAAc,CAAC,CAAC;IACxC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,cAAc,EAA+B;QAC7E,MAAM,KAAK,GAAG,MAAM,0BAAa,CAAC,cAAc,CAAC,IAAI,CAAU,CAAC;QAEhE,gFAAgF;QAChF,MAAM,IAAI,GAAG,IAAI,+CAAsB,CAAC,UAAU,CAAC,CAAC;QACpD,IAAI,CAAC,GAAG,CAAC,iBAAE,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,GAAG,CAAC,iBAAE,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QAC9C,IAAI,KAAK,CAAC,KAAK,EAAE;YACf,IAAI,CAAC,GAAG,CAAC,0BAAW,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;SAChD;QAED,mCAAmC;QACnC,OAAO,IAAI,yCAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,cAAc,CAAC,QAAQ,EAAE,6BAAc,EAAE,KAAK,CAAC,CAAC;IAC/F,CAAC;CACF;AAnBD,oDAmBC","sourcesContent":["import { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport { RepresentationMetadata } from '../../http/representation/RepresentationMetadata';\nimport { INTERNAL_ERROR, INTERNAL_QUADS } from '../../util/ContentTypes';\nimport { getSingleItem } from '../../util/StreamUtil';\nimport { DC, SOLID_ERROR } from '../../util/Vocabularies';\nimport type { RepresentationConverterArgs } from './RepresentationConverter';\nimport { TypedRepresentationConverter } from './TypedRepresentationConverter';\n\n/**\n * Converts an error object into quads by creating a triple for each of name/message/stack.\n */\nexport class ErrorToQuadConverter extends TypedRepresentationConverter {\n  public constructor() {\n    super(INTERNAL_ERROR, INTERNAL_QUADS);\n  }\n\n  public async handle({ identifier, representation }: RepresentationConverterArgs): Promise<Representation> {\n    const error = await getSingleItem(representation.data) as Error;\n\n    // A metadata object makes it easier to add triples due to the utility functions\n    const data = new RepresentationMetadata(identifier);\n    data.add(DC.terms.title, error.name);\n    data.add(DC.terms.description, error.message);\n    if (error.stack) {\n      data.add(SOLID_ERROR.terms.stack, error.stack);\n    }\n\n    // Update the content-type to quads\n    return new BasicRepresentation(data.quads(), representation.metadata, INTERNAL_QUADS, false);\n  }\n}\n"]}