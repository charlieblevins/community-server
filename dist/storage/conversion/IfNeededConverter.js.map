{"version":3,"file":"IfNeededConverter.js","sourceRoot":"","sources":["../../../src/storage/conversion/IfNeededConverter.ts"],"names":[],"mappings":";;;AACA,mDAAqD;AACrD,+EAA4E;AAC5E,yFAAsF;AACtF,qDAA2D;AAC3D,uEAAoE;AAGpE,MAAM,eAAe,GAAG,IAAI,iDAAuB,CAAC,iDAAiD,CAAC,CAAC;AAEvG;;;GAGG;AACH,MAAa,iBAAkB,SAAQ,iDAAuB;IAI5D,YAAmB,YAAqC,eAAe;QACrE,KAAK,EAAE,CAAC;QAHS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAI7C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,IAAiC;QACtD,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;YAC9B,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACtC;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,IAAiC;QACnD,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACvF,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,IAAiC;QACvD,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtF,CAAC;IAES,eAAe,CAAC,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,EAA+B;QAChG,iFAAiF;QACjF,MAAM,EAAE,WAAW,EAAE,GAAG,cAAc,CAAC,QAAQ,CAAC;QAChD,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,IAAI,yCAAmB,CAAC,+CAA+C,CAAC,CAAC;SAChF;QACD,MAAM,mBAAmB,GAAG,CAAC,wCAAuB,CAAC,WAAW,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;QACpF,IAAI,mBAAmB,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAyB,UAAU;iBAClD,IAAI,SAAS,WAAW,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAC3D,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAE,KAAK,EAAE,MAAM,CAAE,EAAU,EAAE,CAAC,GAAG,KAAK,MAAM,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC7G;QACD,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAES,KAAK,CAAC,OAAO,CAAC,IAAiC,EAAE,MAAe;QACxE,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACjG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,IAAI,CAAC,UAAU;aAC7D,IAAI,SAAS,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,OAAO,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;QACjG,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA7CD,8CA6CC","sourcesContent":["import type { Representation } from '../../http/representation/Representation';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport { InternalServerError } from '../../util/errors/InternalServerError';\nimport { UnsupportedAsyncHandler } from '../../util/handlers/UnsupportedAsyncHandler';\nimport { matchesMediaPreferences } from './ConversionUtil';\nimport { RepresentationConverter } from './RepresentationConverter';\nimport type { RepresentationConverterArgs } from './RepresentationConverter';\n\nconst EMPTY_CONVERTER = new UnsupportedAsyncHandler('The content type does not match the preferences');\n\n/**\n * A {@link RepresentationConverter} that only converts representations\n * that are not compatible with the preferences.\n */\nexport class IfNeededConverter extends RepresentationConverter {\n  private readonly converter: RepresentationConverter;\n  protected readonly logger = getLoggerFor(this);\n\n  public constructor(converter: RepresentationConverter = EMPTY_CONVERTER) {\n    super();\n    this.converter = converter;\n  }\n\n  public async canHandle(args: RepresentationConverterArgs): Promise<void> {\n    if (this.needsConversion(args)) {\n      await this.converter.canHandle(args);\n    }\n  }\n\n  public async handle(args: RepresentationConverterArgs): Promise<Representation> {\n    return !this.needsConversion(args) ? args.representation : this.convert(args, false);\n  }\n\n  public async handleSafe(args: RepresentationConverterArgs): Promise<Representation> {\n    return !this.needsConversion(args) ? args.representation : this.convert(args, true);\n  }\n\n  protected needsConversion({ identifier, representation, preferences }: RepresentationConverterArgs): boolean {\n    // No conversion is needed if there are any matches for the provided content type\n    const { contentType } = representation.metadata;\n    if (!contentType) {\n      throw new InternalServerError('Content-Type is required for data conversion.');\n    }\n    const noMatchingMediaType = !matchesMediaPreferences(contentType, preferences.type);\n    if (noMatchingMediaType) {\n      this.logger.debug(`Conversion needed for ${identifier\n        .path} from ${contentType} to satisfy ${!preferences.type ?\n        '\"\"' :\n        Object.entries(preferences.type).map(([ value, weight ]): string => `${value};q=${weight}`).join(', ')}`);\n    }\n    return noMatchingMediaType;\n  }\n\n  protected async convert(args: RepresentationConverterArgs, safely: boolean): Promise<Representation> {\n    const converted = await (safely ? this.converter.handleSafe(args) : this.converter.handle(args));\n    this.logger.info(`Converted representation for ${args.identifier\n      .path} from ${args.representation.metadata.contentType} to ${converted.metadata.contentType}`);\n    return converted;\n  }\n}\n"]}