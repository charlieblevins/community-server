{"version":3,"file":"MarkdownToHtmlConverter.js","sourceRoot":"","sources":["../../../src/storage/conversion/MarkdownToHtmlConverter.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAC5B,uFAAoF;AAEpF,0DAAmE;AACnE,sDAAyD;AAGzD,iFAA8E;AAE9E;;;;;GAKG;AACH,MAAa,uBAAwB,SAAQ,2DAA4B;IAGvE,YAAmB,cAA8B;QAC/C,KAAK,CAAC,4BAAa,EAAE,wBAAS,CAAC,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,cAAc,EAA+B;QACjE,MAAM,QAAQ,GAAG,MAAM,6BAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC7D,MAAM,QAAQ,GAAG,gBAAM,CAAC,QAAQ,CAAC,CAAC;QAClC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;QAE5D,OAAO,IAAI,yCAAmB,CAAC,IAAI,EAAE,cAAc,CAAC,QAAQ,EAAE,wBAAS,CAAC,CAAC;IAC3E,CAAC;CACF;AAfD,0DAeC","sourcesContent":["import marked from 'marked';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport { TEXT_HTML, TEXT_MARKDOWN } from '../../util/ContentTypes';\nimport { readableToString } from '../../util/StreamUtil';\nimport type { TemplateEngine } from '../../util/templates/TemplateEngine';\nimport type { RepresentationConverterArgs } from './RepresentationConverter';\nimport { TypedRepresentationConverter } from './TypedRepresentationConverter';\n\n/**\n * Converts Markdown data to HTML.\n * The generated HTML will be injected into the given template using the parameter `htmlBody`.\n * A standard Markdown string will be converted to a <p> tag, so html and body tags should be part of the template.\n * In case the Markdown body starts with a header (#), that value will also be used as `title` parameter.\n */\nexport class MarkdownToHtmlConverter extends TypedRepresentationConverter {\n  private readonly templateEngine: TemplateEngine;\n\n  public constructor(templateEngine: TemplateEngine) {\n    super(TEXT_MARKDOWN, TEXT_HTML);\n    this.templateEngine = templateEngine;\n  }\n\n  public async handle({ representation }: RepresentationConverterArgs): Promise<Representation> {\n    const markdown = await readableToString(representation.data);\n    const htmlBody = marked(markdown);\n    const html = await this.templateEngine.render({ htmlBody });\n\n    return new BasicRepresentation(html, representation.metadata, TEXT_HTML);\n  }\n}\n"]}