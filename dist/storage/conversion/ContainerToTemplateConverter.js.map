{"version":3,"file":"ContainerToTemplateConverter.js","sourceRoot":"","sources":["../../../src/storage/conversion/ContainerToTemplateConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Readable } from 'stream';\nimport orderBy from 'lodash.orderby';\nimport type { Quad } from 'rdf-js';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { INTERNAL_QUADS } from '../../util/ContentTypes';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport type { IdentifierStrategy } from '../../util/identifiers/IdentifierStrategy';\nimport { isContainerIdentifier, isContainerPath } from '../../util/PathUtil';\nimport { endOfStream } from '../../util/StreamUtil';\nimport type { TemplateEngine } from '../../util/templates/TemplateEngine';\nimport { LDP } from '../../util/Vocabularies';\nimport type { RepresentationConverterArgs } from './RepresentationConverter';\nimport { TypedRepresentationConverter } from './TypedRepresentationConverter';\n\ninterface ResourceDetails {\n  name: string;\n  identifier: string;\n  container: boolean;\n}\n\n/**\n * A {@link RepresentationConverter} that creates a templated representation of a container.\n */\nexport class ContainerToTemplateConverter extends TypedRepresentationConverter {\n  private readonly identifierStrategy: IdentifierStrategy;\n  private readonly templateEngine: TemplateEngine;\n  private readonly contentType: string;\n\n  public constructor(templateEngine: TemplateEngine, contentType: string, identifierStrategy: IdentifierStrategy) {\n    super(INTERNAL_QUADS, contentType);\n    this.templateEngine = templateEngine;\n    this.contentType = contentType;\n    this.identifierStrategy = identifierStrategy;\n  }\n\n  public async canHandle(args: RepresentationConverterArgs): Promise<void> {\n    if (!isContainerIdentifier(args.identifier)) {\n      throw new NotImplementedHttpError('Can only convert containers.');\n    }\n    await super.canHandle(args);\n  }\n\n  public async handle({ identifier, representation }: RepresentationConverterArgs): Promise<Representation> {\n    const rendered = await this.templateEngine.render({\n      identifier: identifier.path,\n      name: this.getLocalName(identifier.path),\n      container: true,\n      children: await this.getChildResources(identifier, representation.data),\n      parents: this.getParentContainers(identifier),\n    });\n    return new BasicRepresentation(rendered, representation.metadata, this.contentType);\n  }\n\n  /**\n   * Collects the children of the container as simple objects.\n   */\n  private async getChildResources(container: ResourceIdentifier, quads: Readable): Promise<ResourceDetails[]> {\n    // Collect the needed bits of information from the containment triples\n    const resources = new Set<string>();\n    quads.on('data', ({ subject, predicate, object }: Quad): void => {\n      if (subject.value === container.path && predicate.equals(LDP.terms.contains)) {\n        resources.add(object.value);\n      }\n    });\n    await endOfStream(quads);\n\n    // Create a simplified object for every resource\n    const children = [ ...resources ].map((resource: string): ResourceDetails => ({\n      identifier: resource,\n      name: this.getLocalName(resource),\n      container: isContainerPath(resource),\n    }));\n\n    // Sort the resulting list\n    return orderBy(children, [ 'container', 'identifier' ], [ 'desc', 'asc' ]);\n  }\n\n  /**\n   * Collects the ancestors of the container as simple objects.\n   */\n  private getParentContainers(container: ResourceIdentifier): ResourceDetails[] {\n    const parents = [];\n    let current = container;\n    while (!this.identifierStrategy.isRootContainer(current)) {\n      current = this.identifierStrategy.getParentContainer(current);\n      parents.push({\n        identifier: current.path,\n        name: this.getLocalName(current.path),\n        container: true,\n      });\n    }\n    return parents.reverse();\n  }\n\n  /**\n   * Derives a short name for the given resource.\n   */\n  private getLocalName(iri: string): string {\n    const match = /:\\/+([^/]+).*?\\/([^/]*)\\/?$/u.exec(iri);\n    return match?.[2] ? decodeURIComponent(match[2]) : match?.[1] ?? iri;\n  }\n}\n"]}