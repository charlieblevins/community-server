{"version":3,"file":"QuadToRdfConverter.js","sourceRoot":"","sources":["../../../src/storage/conversion/QuadToRdfConverter.ts"],"names":[],"mappings":";;;;;;AACA,2BAAkC;AAClC,kEAA0C;AAC1C,uFAAoF;AAGpF,0DAAyD;AACzD,sDAAmD;AACnD,0DAAgE;AAChE,qDAAuD;AAEvD,iFAA8E;AAE9E;;GAEG;AACH,MAAa,kBAAmB,SAAQ,2DAA4B;IAGlE,YAAmB,UAA0D,EAAE;;QAC7E,KAAK,CACH,6BAAc,EACd,MAAA,OAAO,CAAC,iBAAiB,mCAAI,uBAAa,CAAC,0BAA0B,EAAE,CACxE,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,cAAc,EAAE,KAAK,EAAE,WAAW,EAA+B;QAEjG,sDAAsD;QACtD,MAAM,WAAW,GAAG,oCAAmB,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE,EAAE,WAAW,CAAC,IAAI,CAAE,CAAC;QACxF,IAAI,IAAc,CAAC;QAEnB,0FAA0F;QAC1F,IAAI,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACzC,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,oCAAqB,EAAE,IAAI,CAAC;iBACxF,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,EAAoB,EAAE,CAAC,CAAE,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAE,CAAC,CAAC,CAAC;YACpF,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC;YAC5E,IAAI,GAAG,uBAAU,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,iBAAY,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3D,oCAAoC;SACnC;aAAM;YACL,IAAI,GAAG,uBAAa,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,WAAW,EAAE,CAAa,CAAC;SACzE;QAED,OAAO,IAAI,yCAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IACpE,CAAC;CACF;AA7BD,gDA6BC","sourcesContent":["import type { Readable } from 'stream';\nimport { StreamWriter } from 'n3';\nimport rdfSerializer from 'rdf-serialize';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport type { ValuePreferences } from '../../http/representation/RepresentationPreferences';\nimport { INTERNAL_QUADS } from '../../util/ContentTypes';\nimport { pipeSafely } from '../../util/StreamUtil';\nimport { PREFERRED_PREFIX_TERM } from '../../util/Vocabularies';\nimport { getConversionTarget } from './ConversionUtil';\nimport type { RepresentationConverterArgs } from './RepresentationConverter';\nimport { TypedRepresentationConverter } from './TypedRepresentationConverter';\n\n/**\n * Converts `internal/quads` to most major RDF serializations.\n */\nexport class QuadToRdfConverter extends TypedRepresentationConverter {\n  private readonly outputPreferences?: ValuePreferences;\n\n  public constructor(options: { outputPreferences?: Record<string, number> } = {}) {\n    super(\n      INTERNAL_QUADS,\n      options.outputPreferences ?? rdfSerializer.getContentTypesPrioritized(),\n    );\n  }\n\n  public async handle({ identifier, representation: quads, preferences }: RepresentationConverterArgs):\n  Promise<Representation> {\n    // Can not be undefined if the `canHandle` call passed\n    const contentType = getConversionTarget(await this.getOutputTypes(), preferences.type)!;\n    let data: Readable;\n\n    // Use prefixes if possible (see https://github.com/rubensworks/rdf-serialize.js/issues/1)\n    if (/(?:turtle|trig)$/u.test(contentType)) {\n      const prefixes = Object.fromEntries(quads.metadata.quads(null, PREFERRED_PREFIX_TERM, null)\n        .map(({ subject, object }): [string, string] => [ object.value, subject.value ]));\n      const options = { format: contentType, baseIRI: identifier.path, prefixes };\n      data = pipeSafely(quads.data, new StreamWriter(options));\n    // Otherwise, write without prefixes\n    } else {\n      data = rdfSerializer.serialize(quads.data, { contentType }) as Readable;\n    }\n\n    return new BasicRepresentation(data, quads.metadata, contentType);\n  }\n}\n"]}