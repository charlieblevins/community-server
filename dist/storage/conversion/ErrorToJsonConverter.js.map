{"version":3,"file":"ErrorToJsonConverter.js","sourceRoot":"","sources":["../../../src/storage/conversion/ErrorToJsonConverter.ts"],"names":[],"mappings":";;;AAAA,uFAAoF;AAEpF,0DAA2E;AAC3E,2DAAwD;AACxD,sDAAsD;AAEtD,iFAA8E;AAE9E;;GAEG;AACH,MAAa,oBAAqB,SAAQ,2DAA4B;IACpE;QACE,KAAK,CAAC,6BAAc,EAAE,+BAAgB,CAAC,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,cAAc,EAA+B;QACjE,MAAM,KAAK,GAAG,MAAM,0BAAa,CAAC,cAAc,CAAC,IAAI,CAAU,CAAC;QAEhE,MAAM,MAAM,GAAwB;YAClC,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,OAAO,EAAE,KAAK,CAAC,OAAO;SACvB,CAAC;QAEF,IAAI,qBAAS,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAC/B,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YACrC,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;YACnC,IAAI,KAAK,CAAC,OAAO,EAAE;gBACjB,IAAI;oBACF,wCAAwC;oBACxC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBAC9B,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;iBAChC;gBAAC,MAAM;oBACN,2BAA2B;iBAC5B;aACF;SACF;aAAM;YACL,MAAM,CAAC,UAAU,GAAG,GAAG,CAAC;SACzB;QAED,IAAI,KAAK,CAAC,KAAK,EAAE;YACf,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;SAC5B;QAED,kCAAkC;QAClC,OAAO,IAAI,yCAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,cAAc,CAAC,QAAQ,EAAE,+BAAgB,CAAC,CAAC;IACpG,CAAC;CACF;AApCD,oDAoCC","sourcesContent":["import { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { Representation } from '../../http/representation/Representation';\nimport { APPLICATION_JSON, INTERNAL_ERROR } from '../../util/ContentTypes';\nimport { HttpError } from '../../util/errors/HttpError';\nimport { getSingleItem } from '../../util/StreamUtil';\nimport type { RepresentationConverterArgs } from './RepresentationConverter';\nimport { TypedRepresentationConverter } from './TypedRepresentationConverter';\n\n/**\n * Converts an Error object to JSON by copying its fields.\n */\nexport class ErrorToJsonConverter extends TypedRepresentationConverter {\n  public constructor() {\n    super(INTERNAL_ERROR, APPLICATION_JSON);\n  }\n\n  public async handle({ representation }: RepresentationConverterArgs): Promise<Representation> {\n    const error = await getSingleItem(representation.data) as Error;\n\n    const result: Record<string, any> = {\n      name: error.name,\n      message: error.message,\n    };\n\n    if (HttpError.isInstance(error)) {\n      result.statusCode = error.statusCode;\n      result.errorCode = error.errorCode;\n      if (error.details) {\n        try {\n          // The details might not be serializable\n          JSON.stringify(error.details);\n          result.details = error.details;\n        } catch {\n          // Do not store the details\n        }\n      }\n    } else {\n      result.statusCode = 500;\n    }\n\n    if (error.stack) {\n      result.stack = error.stack;\n    }\n\n    // Update the content-type to JSON\n    return new BasicRepresentation(JSON.stringify(result), representation.metadata, APPLICATION_JSON);\n  }\n}\n"]}