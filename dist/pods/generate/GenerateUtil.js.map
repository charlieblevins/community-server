{"version":3,"file":"GenerateUtil.js","sourceRoot":"","sources":["../../../src/pods/generate/GenerateUtil.ts"],"names":[],"mappings":";;;AAIA;;;;;;;;GAQG;AACI,KAAK,UAAU,qBAAqB,CAAC,UAA8B,EAAE,QAA6B,EACvG,SAA6B,EAAE,KAAoB;IACnD,MAAM,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC3D,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,cAAc,EAAE,IAAI,SAAS,EAAE;QACxE,MAAM,KAAK,CAAC,iBAAiB,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QAC1D,KAAK,IAAI,CAAC,CAAC;KACZ;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AATD,sDASC","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport type { ResourceStore } from '../../storage/ResourceStore';\nimport type { ResourcesGenerator } from './ResourcesGenerator';\n\n/**\n * Generates resources with the given generator and adds them to the given store.\n * @param identifier - Identifier of the pod.\n * @param settings - Settings from which the pod is being created.\n * @param generator - Generator to be used.\n * @param store - Store to be updated.\n *\n * @returns The amount of resources that were added.\n */\nexport async function addGeneratedResources(identifier: ResourceIdentifier, settings: NodeJS.Dict<string>,\n  generator: ResourcesGenerator, store: ResourceStore): Promise<number> {\n  const resources = generator.generate(identifier, settings);\n  let count = 0;\n  for await (const { identifier: resourceId, representation } of resources) {\n    await store.setRepresentation(resourceId, representation);\n    count += 1;\n  }\n  return count;\n}\n"]}