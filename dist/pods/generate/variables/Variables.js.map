{"version":3,"file":"Variables.js","sourceRoot":"","sources":["../../../../src/pods/generate/variables/Variables.ts"],"names":[],"mappings":";;;AAAA,6DAAuE;AAE1D,QAAA,QAAQ,GAAG,wCAAyB,CAAC,4BAA4B,EAC5E,eAAe,CAAC,CAAC;AAEnB,6CAA6C;AAC7C,gCAAgC;AACnB,QAAA,iBAAiB,GAAG,wCAAyB,CAAC,GAAG,gBAAQ,CAAC,SAAS,WAAW,EACzF,SAAS,EACT,cAAc,EACd,gBAAgB,EAChB,gBAAgB,CAAC,CAAC;AAEpB;;;GAGG;AACH,SAAgB,eAAe,CAAC,QAAgB;IAC9C,OAAO,QAAQ,CAAC,UAAU,CAAC,yBAAiB,CAAC,SAAS,CAAC,CAAC;AAC1D,CAAC;AAFD,0CAEC","sourcesContent":["import { createUriAndTermNamespace } from '../../../util/Vocabularies';\n\nexport const TEMPLATE = createUriAndTermNamespace('urn:solid-server:template:',\n  'ResourceStore');\n\n// Variables used for configuration templates\n// This is not an exclusive list\nexport const TEMPLATE_VARIABLE = createUriAndTermNamespace(`${TEMPLATE.namespace}variable:`,\n  'baseUrl',\n  'rootFilePath',\n  'sparqlEndpoint',\n  'templateConfig');\n\n/**\n * Checks if the given variable is one that is supported.\n * This can be used to weed out irrelevant parameters in an object.\n */\nexport function isValidVariable(variable: string): boolean {\n  return variable.startsWith(TEMPLATE_VARIABLE.namespace);\n}\n"]}