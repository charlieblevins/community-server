{"version":3,"file":"RootFilePathHandler.js","sourceRoot":"","sources":["../../../../src/pods/generate/variables/RootFilePathHandler.ts"],"names":[],"mappings":";;;AAAA,2BAA4C;AAG5C,8EAA2E;AAC3E,kEAAiE;AAEjE,uDAAoD;AACpD,2CAAgD;AAEhD;;;GAGG;AACH,MAAa,mBAAoB,SAAQ,iCAAe;IAGtD,YAAmB,UAAgC;QACjD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,QAAQ,EAA6D;QAErG,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC;QAClF,IAAI;YACF,uFAAuF;YACvF,qDAAqD;YACrD,MAAM,aAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC9B,MAAM,IAAI,qCAAiB,CAAC,iDAAiD,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;SACjG;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,CAAC,CAAC,2BAAa,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,EAAE;gBACtD,MAAM,KAAK,CAAC;aACb;YACD,QAAQ,CAAC,6BAAiB,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;SACjD;IACH,CAAC;CACF;AAvBD,kDAuBC","sourcesContent":["import { promises as fsPromises } from 'fs';\nimport type { ResourceIdentifier } from '../../../http/representation/ResourceIdentifier';\nimport type { FileIdentifierMapper } from '../../../storage/mapping/FileIdentifierMapper';\nimport { ConflictHttpError } from '../../../util/errors/ConflictHttpError';\nimport { isSystemError } from '../../../util/errors/SystemError';\nimport type { PodSettings } from '../../settings/PodSettings';\nimport { VariableHandler } from './VariableHandler';\nimport { TEMPLATE_VARIABLE } from './Variables';\n\n/**\n * Uses a FileIdentifierMapper to generate a root file path variable based on the identifier.\n * Will throw an error if the resulting file path already exists.\n */\nexport class RootFilePathHandler extends VariableHandler {\n  private readonly fileMapper: FileIdentifierMapper;\n\n  public constructor(fileMapper: FileIdentifierMapper) {\n    super();\n    this.fileMapper = fileMapper;\n  }\n\n  public async handle({ identifier, settings }: { identifier: ResourceIdentifier; settings: PodSettings }):\n  Promise<void> {\n    const path = (await this.fileMapper.mapUrlToFilePath(identifier, false)).filePath;\n    try {\n      // Even though we check if it already exists, there is still a potential race condition\n      // in between this check and the store being created.\n      await fsPromises.access(path);\n      throw new ConflictHttpError(`There already is a folder that corresponds to ${identifier.path}`);\n    } catch (error: unknown) {\n      if (!(isSystemError(error) && error.code === 'ENOENT')) {\n        throw error;\n      }\n      settings[TEMPLATE_VARIABLE.rootFilePath] = path;\n    }\n  }\n}\n"]}