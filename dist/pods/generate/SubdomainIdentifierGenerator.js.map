{"version":3,"file":"SubdomainIdentifierGenerator.js","sourceRoot":"","sources":["../../../src/pods/generate/SubdomainIdentifierGenerator.ts"],"names":[],"mappings":";;;AACA,kDAAyE;AAGzE;;;GAGG;AACH,MAAa,4BAA4B;IAGvC,YAAmB,OAAe;QAChC,IAAI,CAAC,SAAS,GAAG,wBAAa,CAAC,8BAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/D,CAAC;IAEM,QAAQ,CAAC,IAAY;QAC1B,mFAAmF;QACnF,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC5C,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,CAAC;IACjF,CAAC;CACF;AAZD,oEAYC","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { ensureTrailingSlash, extractScheme } from '../../util/PathUtil';\nimport type { IdentifierGenerator } from './IdentifierGenerator';\n\n/**\n * Generates identifiers by using the name as a subdomain on the base URL.\n * Non-alphanumeric characters will be replaced with `-`.\n */\nexport class SubdomainIdentifierGenerator implements IdentifierGenerator {\n  private readonly baseParts: { scheme: string; rest: string };\n\n  public constructor(baseUrl: string) {\n    this.baseParts = extractScheme(ensureTrailingSlash(baseUrl));\n  }\n\n  public generate(name: string): ResourceIdentifier {\n    // Using the punycode converter is a risk as it doesn't convert slashes for example\n    const cleanName = name.replace(/\\W/gu, '-');\n    return { path: `${this.baseParts.scheme}${cleanName}.${this.baseParts.rest}` };\n  }\n}\n"]}