{"version":3,"file":"TemplatedPodGenerator.js","sourceRoot":"","sources":["../../../src/pods/generate/TemplatedPodGenerator.ts"],"names":[],"mappings":";;;AACA,mDAAqD;AAGrD,+EAA4E;AAC5E,2EAAwE;AACxE,kDAAmD;AAKnD,qDAAqF;AAErF,MAAM,mBAAmB,GAAG,uBAAY,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC;AAElF;;;;;;;;;;;GAWG;AACH,MAAa,qBAAqB;IAOhC;;;;;OAKG;IACH,YAAmB,YAAiC,EAAE,eAAgC,EACpF,aAA+C,EAAE,kBAA2B;QAb3D,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAc7C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,aAAlB,kBAAkB,cAAlB,kBAAkB,GAAI,mBAAmB,CAAC;IACtE,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,UAA8B,EAAE,QAAqB;QACzE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACtB,MAAM,IAAI,yCAAmB,CAAC,kCAAkC,CAAC,CAAC;SACnE;QAED,IAAI,MAAM,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6BAA6B,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;YACjE,MAAM,IAAI,qCAAiB,CAAC,6BAA6B,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;SAC7E;QAED,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC;QAEhE,0CAA0C;QAC1C,MAAM,SAAS,GAAwB,EAAE,CAAC;QAC1C,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACvC,IAAI,2BAAe,CAAC,GAAG,CAAC,EAAE;gBACxB,SAAS,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;aAChC;SACF;QAED,gCAAgC;QAChC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC/D,MAAM,IAAI,yCAAmB,CAAC,yBAAyB,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC7E;QACD,8FAA8F;QAC9F,SAAS,CAAC,6BAAiB,CAAC,cAAc,CAAC,GAAG,uBAAY,CAAC,IAAI,CAAC,kBAAkB,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAEvG,MAAM,KAAK,GACT,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,6BAAiB,CAAC,cAAc,CAAE,EAAE,oBAAQ,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;QACpH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,UAAU,CAAC,IAAI,mBAAmB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAErG,kCAAkC;QAClC,MAAM,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAEzD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA1DD,sDA0DC","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport type { KeyValueStorage } from '../../storage/keyvalue/KeyValueStorage';\nimport type { ResourceStore } from '../../storage/ResourceStore';\nimport { BadRequestHttpError } from '../../util/errors/BadRequestHttpError';\nimport { ConflictHttpError } from '../../util/errors/ConflictHttpError';\nimport { joinFilePath } from '../../util/PathUtil';\nimport type { PodSettings } from '../settings/PodSettings';\nimport type { ComponentsJsFactory } from './ComponentsJsFactory';\nimport type { PodGenerator } from './PodGenerator';\nimport type { VariableHandler } from './variables/VariableHandler';\nimport { isValidVariable, TEMPLATE, TEMPLATE_VARIABLE } from './variables/Variables';\n\nconst DEFAULT_CONFIG_PATH = joinFilePath(__dirname, '../../../templates/config/');\n\n/**\n * Creates a new ResourceStore when creating a pod based on a Components.js configuration.\n *\n * Part of the dynamic pod creation.\n *  1. It calls a VariableHandler to add necessary variable values.\n *     E.g. setting the base url variable for components.js to the pod identifier.\n *  2. It filters/cleans the input agent values using {@link VariableHandler}s\n *  3. It calls a ComponentsJsFactory with the variables and template location to instantiate a new ResourceStore.\n *  4. It stores these values in the configuration storage, which is used as a permanent storage for pod configurations.\n *\n * @see {@link ConfigPodManager}, {@link ConfigPodInitializer}, {@link BaseUrlRouterRule}\n */\nexport class TemplatedPodGenerator implements PodGenerator {\n  protected readonly logger = getLoggerFor(this);\n  private readonly storeFactory: ComponentsJsFactory;\n  private readonly variableHandler: VariableHandler;\n  private readonly configStorage: KeyValueStorage<string, unknown>;\n  private readonly configTemplatePath: string;\n\n  /**\n   * @param storeFactory - Factory used for Components.js instantiation.\n   * @param variableHandler - Handler used for setting variable values.\n   * @param configStorage - Where to store the configuration values to instantiate the store for this pod.\n   * @param configTemplatePath - Where to find the configuration templates.\n   */\n  public constructor(storeFactory: ComponentsJsFactory, variableHandler: VariableHandler,\n    configStorage: KeyValueStorage<string, unknown>, configTemplatePath?: string) {\n    this.storeFactory = storeFactory;\n    this.variableHandler = variableHandler;\n    this.configStorage = configStorage;\n    this.configTemplatePath = configTemplatePath ?? DEFAULT_CONFIG_PATH;\n  }\n\n  public async generate(identifier: ResourceIdentifier, settings: PodSettings): Promise<ResourceStore> {\n    if (!settings.template) {\n      throw new BadRequestHttpError('Settings require template field.');\n    }\n\n    if (await this.configStorage.has(identifier.path)) {\n      this.logger.warn(`There already is a pod at ${identifier.path}`);\n      throw new ConflictHttpError(`There already is a pod at ${identifier.path}`);\n    }\n\n    await this.variableHandler.handleSafe({ identifier, settings });\n\n    // Filter out irrelevant data in the agent\n    const variables: NodeJS.Dict<string> = {};\n    for (const key of Object.keys(settings)) {\n      if (isValidVariable(key)) {\n        variables[key] = settings[key];\n      }\n    }\n\n    // Prevent unsafe template names\n    if (!/^[a-zA-Z0-9.-]+$/u.test(settings.template)) {\n      this.logger.warn(`Invalid template name ${settings.template}`);\n      throw new BadRequestHttpError(`Invalid template name ${settings.template}`);\n    }\n    // Storing the template in the variables so it also gets stored in the config for later re-use\n    variables[TEMPLATE_VARIABLE.templateConfig] = joinFilePath(this.configTemplatePath, settings.template);\n\n    const store: ResourceStore =\n      await this.storeFactory.generate(variables[TEMPLATE_VARIABLE.templateConfig]!, TEMPLATE.ResourceStore, variables);\n    this.logger.debug(`Generating store ${identifier.path} with variables ${JSON.stringify(variables)}`);\n\n    // Store the variables permanently\n    await this.configStorage.set(identifier.path, variables);\n\n    return store;\n  }\n}\n"]}