{"version":3,"file":"BaseComponentsJsFactory.js","sourceRoot":"","sources":["../../../src/pods/generate/BaseComponentsJsFactory.ts"],"names":[],"mappings":";;;AACA,+CAAiD;AACjD,kDAAmD;AAGnD;;;;;GAKG;AACH,MAAa,uBAAuB;IAGlC,YAAmB,kBAAkB,GAAG,WAAW,EAAE,QAAQ,GAAG,OAAO;QACrE,IAAI,CAAC,OAAO,GAAG;YACb,cAAc,EAAE,uBAAY,CAAC,SAAS,EAAE,kBAAkB,CAAC;YAC3D,QAAQ,EAAE,QAAoB;YAC9B,cAAc,EAAE,KAAK;SACtB,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,YAAY;QACxB,MAAM,OAAO,GAAG,MAAM,gCAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5D,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QAC/C,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;;;;;OAOG;IACI,KAAK,CAAC,QAAQ,CAAI,UAAkB,EAAE,YAAoB,EAAE,SAA8B;QAE/F,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAC1C,MAAM,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAClD,OAAO,MAAM,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;IAChE,CAAC;CACF;AA/BD,0DA+BC","sourcesContent":["import type { IComponentsManagerBuilderOptions, LogLevel } from 'componentsjs';\nimport { ComponentsManager } from 'componentsjs';\nimport { joinFilePath } from '../../util/PathUtil';\nimport type { ComponentsJsFactory } from './ComponentsJsFactory';\n\n/**\n * Can be used to instantiate objects using Components.js.\n * Default main module path is the root folder of the project.\n * For every generate call a new manager will be made,\n * but moduleState will be stored in between calls.\n */\nexport class BaseComponentsJsFactory implements ComponentsJsFactory {\n  private readonly options: IComponentsManagerBuilderOptions<any>;\n\n  public constructor(relativeModulePath = '../../../', logLevel = 'error') {\n    this.options = {\n      mainModulePath: joinFilePath(__dirname, relativeModulePath),\n      logLevel: logLevel as LogLevel,\n      dumpErrorState: false,\n    };\n  }\n\n  private async buildManager(): Promise<ComponentsManager<any>> {\n    const manager = await ComponentsManager.build(this.options);\n    this.options.moduleState = manager.moduleState;\n    return manager;\n  }\n\n  /**\n   * Calls Components.js to instantiate a new object.\n   * @param configPath - Location of the config to instantiate.\n   * @param componentIri - Iri of the object in the config that will be the result.\n   * @param variables - Variables to send to Components.js\n   *\n   * @returns The resulting object, corresponding to the given component IRI.\n   */\n  public async generate<T>(configPath: string, componentIri: string, variables: Record<string, any>):\n  Promise<T> {\n    const manager = await this.buildManager();\n    await manager.configRegistry.register(configPath);\n    return await manager.instantiate(componentIri, { variables });\n  }\n}\n"]}