{"version":3,"file":"GeneratedPodManager.js","sourceRoot":"","sources":["../../src/pods/GeneratedPodManager.ts"],"names":[],"mappings":";;;AACA,gDAAkD;AAElD,wEAAqE;AACrE,0DAAgE;AAKhE;;;GAGG;AACH,MAAa,mBAAmB;IAM9B,YAAmB,KAAoB,EAAE,kBAAsC;QAL5D,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAM7C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,SAAS,CAAC,UAA8B,EAAE,QAAqB,EAAE,SAAkB;QAC9F,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QACpD,IAAI,CAAC,SAAS,IAAI,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;YAC7D,MAAM,IAAI,qCAAiB,CAAC,kCAAkC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;SAClF;QAED,MAAM,KAAK,GAAG,MAAM,oCAAqB,CAAC,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACrG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,iBAAiB,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IACrE,CAAC;CACF;AAxBD,kDAwBC","sourcesContent":["import type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { ResourceStore } from '../storage/ResourceStore';\nimport { ConflictHttpError } from '../util/errors/ConflictHttpError';\nimport { addGeneratedResources } from './generate/GenerateUtil';\nimport type { ResourcesGenerator } from './generate/ResourcesGenerator';\nimport type { PodManager } from './PodManager';\nimport type { PodSettings } from './settings/PodSettings';\n\n/**\n * Pod manager that uses an {@link IdentifierGenerator} and {@link ResourcesGenerator}\n * to create the default resources and identifier for a new pod.\n */\nexport class GeneratedPodManager implements PodManager {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly store: ResourceStore;\n  private readonly resourcesGenerator: ResourcesGenerator;\n\n  public constructor(store: ResourceStore, resourcesGenerator: ResourcesGenerator) {\n    this.store = store;\n    this.resourcesGenerator = resourcesGenerator;\n  }\n\n  /**\n   * Creates a new pod, pre-populating it with the resources created by the data generator.\n   * Will throw an error if the given identifier already has a resource.\n   */\n  public async createPod(identifier: ResourceIdentifier, settings: PodSettings, overwrite: boolean): Promise<void> {\n    this.logger.info(`Creating pod ${identifier.path}`);\n    if (!overwrite && await this.store.resourceExists(identifier)) {\n      throw new ConflictHttpError(`There already is a resource at ${identifier.path}`);\n    }\n\n    const count = await addGeneratedResources(identifier, settings, this.resourcesGenerator, this.store);\n    this.logger.info(`Added ${count} resources to ${identifier.path}`);\n  }\n}\n"]}