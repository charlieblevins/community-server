{"version":3,"file":"ConfigPodManager.js","sourceRoot":"","sources":["../../src/pods/ConfigPodManager.ts"],"names":[],"mappings":";;;AACA,gDAAkD;AAGlD,0DAAgE;AAMhE;;;;;;;;;;GAUG;AACH,MAAa,gBAAgB;IAM3B;;;;OAIG;IACH,YAAmB,YAA0B,EAAE,kBAAsC,EACnF,cAAsD;QAXrC,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAY7C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,UAA8B,EAAE,QAAqB;QAC1E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAEpD,uEAAuE;QACvE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAErE,MAAM,KAAK,GAAG,MAAM,oCAAqB,CAAC,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QAChG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,iBAAiB,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAEnE,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACxD,CAAC;CACF;AA7BD,4CA6BC","sourcesContent":["import type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { KeyValueStorage } from '../storage/keyvalue/KeyValueStorage';\nimport type { ResourceStore } from '../storage/ResourceStore';\nimport { addGeneratedResources } from './generate/GenerateUtil';\nimport type { PodGenerator } from './generate/PodGenerator';\nimport type { ResourcesGenerator } from './generate/ResourcesGenerator';\nimport type { PodManager } from './PodManager';\nimport type { PodSettings } from './settings/PodSettings';\n\n/**\n * Pod manager that creates a store for the pod with a {@link PodGenerator}\n * and fills it with resources from a {@link ResourcesGenerator}.\n *\n * Part of the dynamic pod creation.\n *  1. Calls a PodGenerator to instantiate a new resource store for the pod.\n *  2. Generates the pod resources based on the templates as usual.\n *  3. Adds the created pod to the routing storage, which is used for linking pod identifiers to their resource stores.\n *\n * @see {@link TemplatedPodGenerator}, {@link ConfigPodInitializer}, {@link BaseUrlRouterRule}\n */\nexport class ConfigPodManager implements PodManager {\n  protected readonly logger = getLoggerFor(this);\n  private readonly podGenerator: PodGenerator;\n  private readonly routingStorage: KeyValueStorage<string, ResourceStore>;\n  private readonly resourcesGenerator: ResourcesGenerator;\n\n  /**\n   * @param podGenerator - Generator for the pod stores.\n   * @param resourcesGenerator - Generator for the pod resources.\n   * @param routingStorage - Where to store the generated pods so they can be routed to.\n   */\n  public constructor(podGenerator: PodGenerator, resourcesGenerator: ResourcesGenerator,\n    routingStorage: KeyValueStorage<string, ResourceStore>) {\n    this.podGenerator = podGenerator;\n    this.routingStorage = routingStorage;\n    this.resourcesGenerator = resourcesGenerator;\n  }\n\n  public async createPod(identifier: ResourceIdentifier, settings: PodSettings): Promise<void> {\n    this.logger.info(`Creating pod ${identifier.path}`);\n\n    // Will error in case there already is a store for the given identifier\n    const store = await this.podGenerator.generate(identifier, settings);\n\n    const count = await addGeneratedResources(identifier, settings, this.resourcesGenerator, store);\n    this.logger.info(`Added ${count} resources to ${identifier.path}`);\n\n    await this.routingStorage.set(identifier.path, store);\n  }\n}\n"]}