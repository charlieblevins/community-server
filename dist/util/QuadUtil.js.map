{"version":3,"file":"QuadUtil.js","sourceRoot":"","sources":["../../src/util/QuadUtil.ts"],"names":[],"mappings":";;;;;;AACA,sEAA6C;AAE7C,2BAAgD;AAGhD,6CAA6D;AAE7D,SAAgB,cAAc,CAAC,KAAa,EAAE,WAAoB;IAChE,OAAO,uBAAU,CAAC,8BAAiB,CAAC,KAAK,CAAC,EAAE,IAAI,iBAAY,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;AACzF,CAAC;AAFD,wCAEC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,UAAU,CAAC,QAA2B,EAAE,UAAyB,EAAE;IACvF,OAAO,yBAAc,CAAC,uBAAU,CAAC,QAAQ,EAAE,IAAI,iBAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC;AAFD,gCAEC","sourcesContent":["import type { Readable } from 'stream';\nimport arrayifyStream from 'arrayify-stream';\nimport type { ParserOptions } from 'n3';\nimport { StreamParser, StreamWriter } from 'n3';\nimport type { Quad } from 'rdf-js';\nimport type { Guarded } from './GuardedStream';\nimport { guardedStreamFrom, pipeSafely } from './StreamUtil';\n\nexport function serializeQuads(quads: Quad[], contentType?: string): Guarded<Readable> {\n  return pipeSafely(guardedStreamFrom(quads), new StreamWriter({ format: contentType }));\n}\n\n/**\n * Helper function to convert a Readable into an array of quads.\n * @param readable - The readable object.\n * @param options - Options for the parser.\n *\n * @returns A promise containing the array of quads.\n */\nexport async function parseQuads(readable: Guarded<Readable>, options: ParserOptions = {}): Promise<Quad[]> {\n  return arrayifyStream(pipeSafely(readable, new StreamParser(options)));\n}\n"]}