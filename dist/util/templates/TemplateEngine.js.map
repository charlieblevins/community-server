{"version":3,"file":"TemplateEngine.js","sourceRoot":"","sources":["../../../src/util/templates/TemplateEngine.ts"],"names":[],"mappings":";;;AAAA,2BAA4C;AAC5C,0CAA6D;AAmC7D,6DAA6D;AAE7D;;;GAGG;AACH,SAAgB,mBAAmB,CAAC,QAAmB;IACrD,6CAA6C;IAC7C,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAChC,OAAO,mBAAmB,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAC;KACxD;IACD,mEAAmE;IACnE,IAAI,CAAC,QAAQ,IAAI,gBAAgB,IAAI,QAAQ,EAAE;QAC7C,OAAO;KACR;IACD,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,QAAQ,CAAC;IAChD,MAAM,gBAAgB,GAAG,YAAY,CAAC,CAAC,CAAC,uBAAY,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;IAChG,OAAO,2BAAgB,CAAC,gBAAgB,CAAC,CAAC;AAC5C,CAAC;AAZD,kDAYC;AAED;;GAEG;AACI,KAAK,UAAU,YAAY,CAAC,WAAqB,EAAE,cAAc,EAAE,EAAE,EAAE;IAC5E,kDAAkD;IAClD,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,gBAAgB,IAAI,QAAQ,EAAE;QAChE,OAAO,QAAQ,CAAC,cAAc,CAAC;KAChC;IACD,0CAA0C;IAC1C,OAAO,aAAU,CAAC,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,CAAE,EAAE,MAAM,CAAC,CAAC;AACrE,CAAC;AAPD,oCAOC","sourcesContent":["import { promises as fsPromises } from 'fs';\nimport { joinFilePath, resolveAssetPath } from '../PathUtil';\nimport Dict = NodeJS.Dict;\n\nexport type Template = TemplateFileName | TemplateString | TemplatePath;\n\nexport type TemplateFileName = string;\n\nexport interface TemplateString {\n  // String contents of the template\n  templateString: string;\n}\n\nexport interface TemplatePath {\n  // Name of the template file\n  templateFile: string;\n  // Path of the template file\n  templatePath?: string;\n}\n\n/* eslint-disable @typescript-eslint/method-signature-style */\n/**\n * A template engine renders content into a template.\n */\nexport interface TemplateEngine<T extends Dict<any> = Dict<any>> {\n  /**\n   * Renders the given contents into the template.\n   *\n   * @param contents - The contents to render.\n   * @param template - The template to use for rendering;\n   *                   if omitted, a default template is used.\n   * @returns The rendered contents.\n   */\n  render(contents: T): Promise<string>;\n  render<TCustom = T>(contents: TCustom, template: Template): Promise<string>;\n}\n/* eslint-enable @typescript-eslint/method-signature-style */\n\n/**\n * Returns the absolute path to the template.\n * Returns undefined if the input does not contain a file path.\n */\nexport function getTemplateFilePath(template?: Template): string | undefined {\n  // The template has been passed as a filename\n  if (typeof template === 'string') {\n    return getTemplateFilePath({ templateFile: template });\n  }\n  // The template has already been given as a string so no known path\n  if (!template || 'templateString' in template) {\n    return;\n  }\n  const { templateFile, templatePath } = template;\n  const fullTemplatePath = templatePath ? joinFilePath(templatePath, templateFile) : templateFile;\n  return resolveAssetPath(fullTemplatePath);\n}\n\n/**\n * Reads the template and returns it as a string.\n */\nexport async function readTemplate(template: Template = { templateString: '' }): Promise<string> {\n  // The template has already been given as a string\n  if (typeof template === 'object' && 'templateString' in template) {\n    return template.templateString;\n  }\n  // The template needs to be read from disk\n  return fsPromises.readFile(getTemplateFilePath(template)!, 'utf8');\n}\n"]}