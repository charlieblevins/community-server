{"version":3,"file":"ChainedTemplateEngine.js","sourceRoot":"","sources":["../../../src/util/templates/ChainedTemplateEngine.ts"],"names":[],"mappings":";;;AAGA;;;;;;;GAOG;AACH,MAAa,qBAAqB;IAKhC;;;OAGG;IACH,YAAmB,OAAyB,EAAE,YAAY,GAAG,MAAM;QACjE,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;SAC5D;QACD,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAIM,KAAK,CAAC,MAAM,CAAc,QAAiB,EAAE,QAAmB;QACrE,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAS,CAAC,CAAC;QAC9D,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE;YACxC,IAAI,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,QAAQ,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;SACxE;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AA3BD,sDA2BC","sourcesContent":["import type { Template, TemplateEngine } from './TemplateEngine';\nimport Dict = NodeJS.Dict;\n\n/**\n * Calls the given array of {@link TemplateEngine}s in the order they appear,\n * feeding the output of one into the input of the next.\n *\n * The first engine will be called with the provided contents and template parameters.\n * All subsequent engines will be called with no template parameter.\n * Contents will still be passed along and another entry will be added for the body of the previous output.\n */\nexport class ChainedTemplateEngine<T extends Dict<any> = Dict<any>> implements TemplateEngine<T> {\n  private readonly firstEngine: TemplateEngine<T>;\n  private readonly chainedEngines: TemplateEngine[];\n  private readonly renderedName: string;\n\n  /**\n   * @param engines - Engines will be executed in the same order as the array.\n   * @param renderedName - The name of the key used to pass the body of one engine to the next.\n   */\n  public constructor(engines: TemplateEngine[], renderedName = 'body') {\n    if (engines.length === 0) {\n      throw new Error('At least 1 engine needs to be provided.');\n    }\n    this.firstEngine = engines[0];\n    this.chainedEngines = engines.slice(1);\n    this.renderedName = renderedName;\n  }\n\n  public async render(contents: T): Promise<string>;\n  public async render<TCustom = T>(contents: TCustom, template: Template): Promise<string>;\n  public async render<TCustom = T>(contents: TCustom, template?: Template): Promise<string> {\n    let body = await this.firstEngine.render(contents, template!);\n    for (const engine of this.chainedEngines) {\n      body = await engine.render({ ...contents, [this.renderedName]: body });\n    }\n    return body;\n  }\n}\n"]}