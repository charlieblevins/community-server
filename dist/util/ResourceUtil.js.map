{"version":3,"file":"ResourceUtil.js","sourceRoot":"","sources":["../../src/util/ResourceUtil.ts"],"names":[],"mappings":";;;;;;AAAA,sEAA6C;AAC7C,2BAAiC;AACjC,oFAAiF;AAEjF,0FAAuF;AACvF,6CAAiD;AACjD,yCAAuC;AACvC,iDAAkF;AAClF,IAAO,SAAS,GAAG,gBAAW,CAAC,SAAS,CAAC;AAEzC;;;;;;GAMG;AACH,SAAgB,mBAAmB,CAAC,QAAgC,EAAE,WAAoB;IACxF,IAAI,WAAW,EAAE;QACf,QAAQ,CAAC,GAAG,CAAC,kBAAG,CAAC,KAAK,CAAC,IAAI,EAAE,kBAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAClD,QAAQ,CAAC,GAAG,CAAC,kBAAG,CAAC,KAAK,CAAC,IAAI,EAAE,kBAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;KACxD;IACD,QAAQ,CAAC,GAAG,CAAC,kBAAG,CAAC,KAAK,CAAC,IAAI,EAAE,kBAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACnD,CAAC;AAND,kDAMC;AAED;;;;GAIG;AACH,SAAgB,kBAAkB,CAAC,QAAgC,EAAE,IAAI,GAAG,IAAI,IAAI,EAAE;IACpF,+EAA+E;IAC/E,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAChC,QAAQ,CAAC,GAAG,CAAC,iBAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,oBAAS,CAAC,YAAY,CAAC,WAAW,EAAE,EAAE,kBAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC7F,CAAC;AALD,gDAKC;AAED;;;;;GAKG;AACH,SAAgB,mBAAmB,CAAC,QAAgC,EAAE,YAAoB,EAAE,WAAmB;IAE7G,MAAM,YAAY,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;IAC7C,QAAQ,CAAC,GAAG,CAAC,yBAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACtD,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,gCAAiB,EAAE,WAAW,CAAC,CAAC;AACjE,CAAC;AALD,kDAKC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,mBAAmB,CAAC,cAA8B;IACtE,MAAM,IAAI,GAAG,MAAM,yBAAc,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACvD,MAAM,MAAM,GAAG,IAAI,yCAAmB,CACpC,IAAI,EACJ,IAAI,+CAAsB,CAAC,cAAc,CAAC,QAAQ,CAAC,EACnD,cAAc,CAAC,MAAM,CACtB,CAAC;IACF,cAAc,CAAC,IAAI,GAAG,8BAAiB,CAAC,IAAI,CAAC,CAAC;IAC9C,OAAO,MAAM,CAAC;AAChB,CAAC;AATD,kDASC","sourcesContent":["import arrayifyStream from 'arrayify-stream';\nimport { DataFactory } from 'n3';\nimport { BasicRepresentation } from '../http/representation/BasicRepresentation';\nimport type { Representation } from '../http/representation/Representation';\nimport { RepresentationMetadata } from '../http/representation/RepresentationMetadata';\nimport { guardedStreamFrom } from './StreamUtil';\nimport { toLiteral } from './TermUtil';\nimport { CONTENT_TYPE_TERM, DC, LDP, RDF, SOLID_META, XSD } from './Vocabularies';\nimport namedNode = DataFactory.namedNode;\n\n/**\n * Helper function to generate type quads for a Container or Resource.\n * @param metadata - Metadata to add to.\n * @param isContainer - If the identifier corresponds to a container.\n *\n * @returns The generated quads.\n */\nexport function addResourceMetadata(metadata: RepresentationMetadata, isContainer: boolean): void {\n  if (isContainer) {\n    metadata.add(RDF.terms.type, LDP.terms.Container);\n    metadata.add(RDF.terms.type, LDP.terms.BasicContainer);\n  }\n  metadata.add(RDF.terms.type, LDP.terms.Resource);\n}\n\n/**\n * Updates the dc:modified time to the given time.\n * @param metadata - Metadata to update.\n * @param date - Last modified date. Defaults to current time.\n */\nexport function updateModifiedDate(metadata: RepresentationMetadata, date = new Date()): void {\n  // Milliseconds get lost in some serializations, potentially causing mismatches\n  const lastModified = new Date(date);\n  lastModified.setMilliseconds(0);\n  metadata.set(DC.terms.modified, toLiteral(lastModified.toISOString(), XSD.terms.dateTime));\n}\n\n/**\n * Links a template file with a given content-type to the metadata using the SOLID_META.template predicate.\n * @param metadata - Metadata to update.\n * @param templateFile - Path to the template.\n * @param contentType - Content-type of the template after it is rendered.\n */\nexport function addTemplateMetadata(metadata: RepresentationMetadata, templateFile: string, contentType: string):\nvoid {\n  const templateNode = namedNode(templateFile);\n  metadata.add(SOLID_META.terms.template, templateNode);\n  metadata.addQuad(templateNode, CONTENT_TYPE_TERM, contentType);\n}\n\n/**\n * Helper function to clone a representation, the original representation can still be used.\n * This function loads the entire stream in memory.\n * @param representation - The representation to clone.\n *\n * @returns The cloned representation.\n */\nexport async function cloneRepresentation(representation: Representation): Promise<BasicRepresentation> {\n  const data = await arrayifyStream(representation.data);\n  const result = new BasicRepresentation(\n    data,\n    new RepresentationMetadata(representation.metadata),\n    representation.binary,\n  );\n  representation.data = guardedStreamFrom(data);\n  return result;\n}\n"]}