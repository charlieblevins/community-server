{"version":3,"file":"SubdomainIdentifierStrategy.js","sourceRoot":"","sources":["../../../src/util/identifiers/SubdomainIdentifierStrategy.ts"],"names":[],"mappings":";;;AACA,mDAAqD;AACrD,0CAAyE;AACzE,qEAAkE;AAElE;;GAEG;AACH,MAAa,2BAA4B,SAAQ,+CAAsB;IAKrE,YAAmB,OAAe;QAChC,KAAK,EAAE,CAAC;QAHS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAI7C,IAAI,CAAC,OAAO,GAAG,8BAAmB,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,KAAK,GAAG,gCAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IAEM,kBAAkB,CAAC,UAA8B;QACtD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC3B,cAAc,UAAU,CAAC,IAAI,eAAe,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YAC5D,cAAc,UAAU,CAAC,IAAI,mBAAmB,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAClE,OAAO,SAAS,CAAC;IACnB,CAAC;IAEM,eAAe,CAAC,UAA8B;QACnD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC/C,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;IAC5E,CAAC;CACF;AAvBD,kEAuBC","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport { ensureTrailingSlash, createSubdomainRegexp } from '../PathUtil';\nimport { BaseIdentifierStrategy } from './BaseIdentifierStrategy';\n\n/**\n * An IdentifierStrategy that interprets all subdomains of the given base URL as roots.\n */\nexport class SubdomainIdentifierStrategy extends BaseIdentifierStrategy {\n  private readonly baseUrl: string;\n  private readonly regex: RegExp;\n  protected readonly logger = getLoggerFor(this);\n\n  public constructor(baseUrl: string) {\n    super();\n    this.baseUrl = ensureTrailingSlash(baseUrl);\n    this.regex = createSubdomainRegexp(this.baseUrl);\n  }\n\n  public supportsIdentifier(identifier: ResourceIdentifier): boolean {\n    const supported = this.regex.test(identifier.path);\n    this.logger.debug(supported ?\n      `Identifier ${identifier.path} is part of ${this.baseUrl}` :\n      `Identifier ${identifier.path} is not part of ${this.baseUrl}`);\n    return supported;\n  }\n\n  public isRootContainer(identifier: ResourceIdentifier): boolean {\n    const match = this.regex.exec(identifier.path);\n    return Array.isArray(match) && match[0].length === identifier.path.length;\n  }\n}\n"]}