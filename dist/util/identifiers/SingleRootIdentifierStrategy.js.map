{"version":3,"file":"SingleRootIdentifierStrategy.js","sourceRoot":"","sources":["../../../src/util/identifiers/SingleRootIdentifierStrategy.ts"],"names":[],"mappings":";;;AACA,mDAAqD;AACrD,0CAAkD;AAClD,qEAAkE;AAElE;;GAEG;AACH,MAAa,4BAA6B,SAAQ,+CAAsB;IAItE,YAAmB,OAAe;QAChC,KAAK,EAAE,CAAC;QAHS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAI7C,IAAI,CAAC,OAAO,GAAG,8BAAmB,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;IAEM,kBAAkB,CAAC,UAA8B;QACtD,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC3B,cAAc,UAAU,CAAC,IAAI,eAAe,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YAC5D,cAAc,UAAU,CAAC,IAAI,mBAAmB,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAClE,OAAO,SAAS,CAAC;IACnB,CAAC;IAEM,eAAe,CAAC,UAA8B;QACnD,OAAO,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC;IAC1C,CAAC;CACF;AApBD,oEAoBC","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport { ensureTrailingSlash } from '../PathUtil';\nimport { BaseIdentifierStrategy } from './BaseIdentifierStrategy';\n\n/**\n * An IdentifierStrategy that assumes there is only 1 root and all other identifiers are made by appending to that root.\n */\nexport class SingleRootIdentifierStrategy extends BaseIdentifierStrategy {\n  private readonly baseUrl: string;\n  protected readonly logger = getLoggerFor(this);\n\n  public constructor(baseUrl: string) {\n    super();\n    this.baseUrl = ensureTrailingSlash(baseUrl);\n  }\n\n  public supportsIdentifier(identifier: ResourceIdentifier): boolean {\n    const supported = identifier.path.startsWith(this.baseUrl);\n    this.logger.debug(supported ?\n      `Identifier ${identifier.path} is part of ${this.baseUrl}` :\n      `Identifier ${identifier.path} is not part of ${this.baseUrl}`);\n    return supported;\n  }\n\n  public isRootContainer(identifier: ResourceIdentifier): boolean {\n    return identifier.path === this.baseUrl;\n  }\n}\n"]}