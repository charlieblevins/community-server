{"version":3,"file":"PathUtil.js","sourceRoot":"","sources":["../../src/util/PathUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { posix, win32 } from 'path';\nimport urljoin from 'url-join';\nimport type { TargetExtractor } from '../http/input/identifier/TargetExtractor';\nimport type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport type { HttpRequest } from '../server/HttpRequest';\nimport { BadRequestHttpError } from './errors/BadRequestHttpError';\n\n/**\n * Changes a potential Windows path into a POSIX path.\n *\n * @param path - Path to check (POSIX or Windows).\n *\n * @returns The potentially changed path (POSIX).\n */\nfunction windowsToPosixPath(path: string): string {\n  return path.replace(/\\\\+/gu, '/');\n}\n\n/**\n * Resolves relative segments in the path.\n *\n * @param path - Path to check (POSIX or Windows).\n *\n * @returns The potentially changed path (POSIX).\n */\nexport function normalizeFilePath(path: string): string {\n  return posix.normalize(windowsToPosixPath(path));\n}\n\n/**\n * Adds the paths to the base path.\n *\n * @param basePath - The base path (POSIX or Windows).\n * @param paths - Subpaths to attach (POSIX).\n *\n * @returns The potentially changed path (POSIX).\n */\nexport function joinFilePath(basePath: string, ...paths: string[]): string {\n  return posix.join(windowsToPosixPath(basePath), ...paths);\n}\n\n/**\n * Resolves a path to its absolute form.\n * Absolute inputs will not be changed (except changing Windows to POSIX).\n * Relative inputs will be interpreted relative to process.cwd().\n *\n * @param path - Path to check (POSIX or Windows).\n *\n * @returns The potentially changed path (POSIX).\n */\nexport function absoluteFilePath(path: string): string {\n  if (posix.isAbsolute(path)) {\n    return path;\n  }\n  if (win32.isAbsolute(path)) {\n    return windowsToPosixPath(path);\n  }\n\n  return joinFilePath(process.cwd(), path);\n}\n\n/**\n * Makes sure the input path has exactly 1 slash at the end.\n * Multiple slashes will get merged into one.\n * If there is no slash it will be added.\n *\n * @param path - Path to check.\n *\n * @returns The potentially changed path.\n */\nexport function ensureTrailingSlash(path: string): string {\n  return path.replace(/\\/*$/u, '/');\n}\n\n/**\n * Makes sure the input path has no slashes at the end.\n *\n * @param path - Path to check.\n *\n * @returns The potentially changed path.\n */\nexport function trimTrailingSlashes(path: string): string {\n  return path.replace(/\\/+$/u, '');\n}\n\n/**\n * Extracts the extension (without dot) from a path.\n * Custom function since `path.extname` does not work on all cases (e.g. \".acl\")\n * @param path - Input path to parse.\n */\nexport function getExtension(path: string): string {\n  const extension = /\\.([^./]+)$/u.exec(path);\n  return extension ? extension[1] : '';\n}\n\n/**\n * Performs a transformation on the path components of a URI.\n */\nfunction transformPathComponents(path: string, transform: (part: string) => string): string {\n  const [ , base, queryString ] = /^([^?]*)(.*)$/u.exec(path)!;\n  const transformed = base.split('/').map((element): string => transform(element)).join('/');\n  return !queryString ? transformed : `${transformed}${queryString}`;\n}\n\n/**\n * Converts a URI path to the canonical version by splitting on slashes,\n * decoding any percent-based encodings, and then encoding any special characters.\n */\nexport function toCanonicalUriPath(path: string): string {\n  return transformPathComponents(path, (part): string =>\n    encodeURIComponent(decodeURIComponent(part)));\n}\n\n/**\n * Decodes all components of a URI path.\n */\nexport function decodeUriPathComponents(path: string): string {\n  return transformPathComponents(path, decodeURIComponent);\n}\n\n/**\n * Encodes all (non-slash) special characters in a URI path.\n */\nexport function encodeUriPathComponents(path: string): string {\n  return transformPathComponents(path, encodeURIComponent);\n}\n\n/**\n * Checks if the path corresponds to a container path (ending in a /).\n * @param path - Path to check.\n */\nexport function isContainerPath(path: string): boolean {\n  // Solid, ยง3.1: \"Paths ending with a slash denote a container resource.\"\n  // https://solid.github.io/specification/protocol#uri-slash-semantics\n  return path.endsWith('/');\n}\n\n/**\n * Checks if the identifier corresponds to a container identifier.\n * @param identifier - Identifier to check.\n */\nexport function isContainerIdentifier(identifier: ResourceIdentifier): boolean {\n  return isContainerPath(identifier.path);\n}\n\n/**\n * Splits a URL (or similar) string into a part containing its scheme and one containing the rest.\n * E.g., `http://test.com/` results in `{ scheme: 'http://', rest: 'test.com/' }`.\n * @param url - String to parse.\n */\nexport function extractScheme(url: string): { scheme: string; rest: string } {\n  const match = /^([^:]+:\\/\\/)(.*)$/u.exec(url)!;\n  return { scheme: match[1], rest: match[2] };\n}\n\n/**\n * Creates a relative URL by removing the base URL.\n * Will throw an error in case the resulting target is not withing the base URL scope.\n * @param baseUrl - Base URL.\n * @param request - Incoming request of which the target needs to be extracted.\n * @param targetExtractor - Will extract the target from the request.\n */\nexport async function getRelativeUrl(baseUrl: string, request: HttpRequest, targetExtractor: TargetExtractor):\nPromise<string> {\n  baseUrl = ensureTrailingSlash(baseUrl);\n  const target = await targetExtractor.handleSafe({ request });\n  if (!target.path.startsWith(baseUrl)) {\n    throw new BadRequestHttpError(`The identifier ${target.path} is outside the configured identifier space.`,\n      { errorCode: 'E0001', details: { path: target.path }});\n  }\n  return target.path.slice(baseUrl.length - 1);\n}\n\n/**\n * Creates a regular expression that matches URLs containing the given baseUrl, or a subdomain of the given baseUrl.\n * In case there is a subdomain, the first match of the regular expression will be that subdomain.\n *\n * Examples with baseUrl `http://test.com/foo/`:\n *  - Will match `http://test.com/foo/`\n *  - Will match `http://test.com/foo/bar/baz`\n *  - Will match `http://alice.bob.test.com/foo/bar/baz`, first match result will be `alice.bob`\n *  - Will not match `http://test.com/`\n *  - Will not match `http://alicetest.com/foo/`\n * @param baseUrl - Base URL for the regular expression.\n */\nexport function createSubdomainRegexp(baseUrl: string): RegExp {\n  const { scheme, rest } = extractScheme(baseUrl);\n  return new RegExp(`^${scheme}(?:([^/]+)\\\\.)?${rest}`, 'u');\n}\n\n/**\n * Returns the folder corresponding to the root of the Community Solid Server module\n */\nexport function getModuleRoot(): string {\n  return joinFilePath(__dirname, '../../');\n}\n\n/**\n * A placeholder for the path to the `@solid/community-server` module root.\n * The resolveAssetPath function will replace this string with the actual path.\n */\nexport const modulePathPlaceholder = '@css:';\n\n/**\n * Converts file path inputs into absolute paths.\n * Works similar to `absoluteFilePath` but paths that start with the `modulePathPlaceholder`\n * will be relative to the module directory instead of the cwd.\n */\nexport function resolveAssetPath(path: string = modulePathPlaceholder): string {\n  if (path.startsWith(modulePathPlaceholder)) {\n    return joinFilePath(getModuleRoot(), path.slice(modulePathPlaceholder.length));\n  }\n  return absoluteFilePath(path);\n}\n\n/**\n * Concatenates all the given strings into a normalized URL.\n * Will place slashes between input strings if necessary.\n */\nexport const joinUrl = urljoin;\n"]}