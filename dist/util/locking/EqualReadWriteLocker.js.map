{"version":3,"file":"EqualReadWriteLocker.js","sourceRoot":"","sources":["../../../src/util/locking/EqualReadWriteLocker.ts"],"names":[],"mappings":";;;AAIA;;GAEG;AACH,MAAa,oBAAoB;IAG/B,YAAmB,MAAsB;QACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAI,UAA8B,EAAE,WAAmC;QAC9F,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAChD,CAAC;IAEM,KAAK,CAAC,aAAa,CAAI,UAA8B,EAAE,WAAmC;QAC/F,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,QAAQ,CAAI,UAA8B,EAAE,WAAiC;QACzF,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACtC,IAAI;YACF,OAAO,MAAM,WAAW,EAAE,CAAC;SAC5B;gBAAS;YACR,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;SACvC;IACH,CAAC;CACF;AA7BD,oDA6BC","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport type { ReadWriteLocker } from './ReadWriteLocker';\nimport type { ResourceLocker } from './ResourceLocker';\n\n/**\n * A {@link ReadWriteLocker} that gives no priority to read or write operations: both use the same lock.\n */\nexport class EqualReadWriteLocker implements ReadWriteLocker {\n  private readonly locker: ResourceLocker;\n\n  public constructor(locker: ResourceLocker) {\n    this.locker = locker;\n  }\n\n  public async withReadLock<T>(identifier: ResourceIdentifier, whileLocked: () => (Promise<T> | T)): Promise<T> {\n    return this.withLock(identifier, whileLocked);\n  }\n\n  public async withWriteLock<T>(identifier: ResourceIdentifier, whileLocked: () => (Promise<T> | T)): Promise<T> {\n    return this.withLock(identifier, whileLocked);\n  }\n\n  /**\n   * Acquires a new lock for the requested identifier.\n   * Will resolve when the input function resolves.\n   * @param identifier - Identifier of resource that needs to be locked.\n   * @param whileLocked - Function to resolve while the resource is locked.\n   */\n  private async withLock<T>(identifier: ResourceIdentifier, whileLocked: () => T | Promise<T>): Promise<T> {\n    await this.locker.acquire(identifier);\n    try {\n      return await whileLocked();\n    } finally {\n      await this.locker.release(identifier);\n    }\n  }\n}\n"]}