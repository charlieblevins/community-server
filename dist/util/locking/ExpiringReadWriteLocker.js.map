{"version":3,"file":"ExpiringReadWriteLocker.js","sourceRoot":"","sources":["../../../src/util/locking/ExpiringReadWriteLocker.ts"],"names":[],"mappings":"","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport type { ReadWriteLocker } from './ReadWriteLocker';\n\n/**\n * A {@link ReadWriteLocker} where the locks expire after a given time.\n */\nexport interface ExpiringReadWriteLocker extends ReadWriteLocker {\n  /**\n   * As {@link ReadWriteLocker.withReadLock} but the locked function gets called with a `maintainLock` callback function\n   * to reset the lock expiration every time it is called.\n   * The resulting promise will reject once the lock expires.\n   *\n   * @param identifier - Identifier of the resource that needs to be locked.\n   * @param whileLocked - A function to execute while the resource is locked.\n   * Receives a callback as input parameter to maintain the lock.\n   */\n  withReadLock: <T>(identifier: ResourceIdentifier, whileLocked: (maintainLock: () => void) => T | Promise<T>)\n  => Promise<T>;\n\n  /**\n   * As {@link ReadWriteLocker.withWriteLock} but the locked function gets called with a `maintainLock`\n   * callback function to reset the lock expiration every time it is called.\n   * The resulting promise will reject once the lock expires.\n   *\n   * @param identifier - Identifier of the resource that needs to be locked.\n   * @param whileLocked - A function to execute while the resource is locked.\n   * Receives a callback as input parameter to maintain the lock.\n   */\n  withWriteLock: <T>(identifier: ResourceIdentifier, whileLocked: (maintainLock: () => void) => T | Promise<T>)\n  => Promise<T>;\n}\n"]}