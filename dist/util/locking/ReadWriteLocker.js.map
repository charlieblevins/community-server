{"version":3,"file":"ReadWriteLocker.js","sourceRoot":"","sources":["../../../src/util/locking/ReadWriteLocker.ts"],"names":[],"mappings":"","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\n\n/**\n * Allows the locking of resources which is needed for non-atomic {@link ResourceStore}s.\n */\nexport interface ReadWriteLocker {\n  /**\n   * Run the given function while the resource is locked.\n   * The lock will be released when the (async) input function resolves.\n   * This function should be used for operations that only require reading the resource.\n   *\n   * @param identifier - Identifier of the resource that needs to be locked.\n   * @param whileLocked - A function to execute while the resource is locked.\n   *\n   * @returns A promise resolving when the lock is released.\n   */\n  withReadLock: <T>(identifier: ResourceIdentifier, whileLocked: () => T | Promise<T>) => Promise<T>;\n\n  /**\n   * Run the given function while the resource is locked.\n   * The lock will be released when the (async) input function resolves.\n   * This function should be used for operations that could modify the resource.\n   *\n   * @param identifier - Identifier of the resource that needs to be locked.\n   * @param whileLocked - A function to execute while the resource is locked.\n   *\n   * @returns A promise resolving when the lock is released.\n   */\n  withWriteLock: <T>(identifier: ResourceIdentifier, whileLocked: () => T | Promise<T>) => Promise<T>;\n}\n"]}