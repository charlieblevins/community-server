{"version":3,"file":"SingleThreadedResourceLocker.js","sourceRoot":"","sources":["../../../src/util/locking/SingleThreadedResourceLocker.ts"],"names":[],"mappings":";;;;;;AAAA,4DAAmC;AAEnC,mDAAqD;AACrD,uEAAoE;AAGpE;;;;;GAKG;AACH,MAAa,4BAA4B;IAMvC;QALmB,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAM7C,IAAI,CAAC,MAAM,GAAG,IAAI,oBAAS,EAAE,CAAC;QAC9B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,UAA8B;QACjD,MAAM,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAsB,IAAI,EAAE,CAAC,CAAC;QAChD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAQ,EAAE;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,EAAQ,EAAE;gBACvC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;gBAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qBAAqB,IAAI,KAAK,IAAI,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;gBACrF,OAAO,EAAE,CAAC;YACZ,CAAC,EAAE,GAAS,EAAE;gBACZ,gEAAgE;gBAChE,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qBAAqB,IAAI,KAAK,IAAI,CAAC,YAAY,EAAE,0BAA0B,CAAC,CAAC;YACjG,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,UAA8B;QACjD,MAAM,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC;QAC5B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;YAC/B,MAAM,IAAI,yCAAmB,CAAC,iDAAiD,IAAI,EAAE,CAAC,CAAC;SACxF;QACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;IAC/B,CAAC;IAED;;OAEG;IACK,YAAY;QAClB,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC;IAClD,CAAC;CACF;AAzCD,oEAyCC","sourcesContent":["import AsyncLock from 'async-lock';\nimport type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport { InternalServerError } from '../errors/InternalServerError';\nimport type { ResourceLocker } from './ResourceLocker';\n\n/**\n * A resource locker making use of the `async-lock` library.\n * Note that all locks are kept in memory until they are unlocked which could potentially result\n * in a memory leak if locks are never unlocked, so make sure this is covered with expiring locks for example,\n * and/or proper `finally` handles.\n */\nexport class SingleThreadedResourceLocker implements ResourceLocker {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly locker: AsyncLock;\n  private readonly unlockCallbacks: Record<string, () => void>;\n\n  public constructor() {\n    this.locker = new AsyncLock();\n    this.unlockCallbacks = {};\n  }\n\n  public async acquire(identifier: ResourceIdentifier): Promise<void> {\n    const { path } = identifier;\n    this.logger.debug(`Acquiring lock for ${path}`);\n    return new Promise((resolve): void => {\n      this.locker.acquire(path, (done): void => {\n        this.unlockCallbacks[path] = done;\n        this.logger.debug(`Acquired lock for ${path}. ${this.getLockCount()} locks active.`);\n        resolve();\n      }, (): void => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete this.unlockCallbacks[path];\n        this.logger.debug(`Released lock for ${path}. ${this.getLockCount()} active locks remaining.`);\n      });\n    });\n  }\n\n  public async release(identifier: ResourceIdentifier): Promise<void> {\n    const { path } = identifier;\n    if (!this.unlockCallbacks[path]) {\n      throw new InternalServerError(`Trying to unlock resource that is not locked: ${path}`);\n    }\n    this.unlockCallbacks[path]();\n  }\n\n  /**\n   * Counts the number of active locks.\n   */\n  private getLockCount(): number {\n    return Object.keys(this.unlockCallbacks).length;\n  }\n}\n"]}