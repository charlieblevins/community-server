{"version":3,"file":"ResourceLocker.js","sourceRoot":"","sources":["../../../src/util/locking/ResourceLocker.ts"],"names":[],"mappings":"","sourcesContent":["import type { ResourceIdentifier } from '../../http/representation/ResourceIdentifier';\n\n/**\n * An interface for classes that only have 1 way to lock interfaces.\n * In general this should only be used by components implementing the {@link ReadWriteLocker} interface.\n * Other components that require locking of resources should use that interface.\n */\nexport interface ResourceLocker {\n  /**\n   * Acquires a lock on the requested identifier.\n   * The promise will resolve when the lock has been acquired.\n   * @param identifier - Resource to acquire a lock on.\n   */\n  acquire: (identifier: ResourceIdentifier) => Promise<void>;\n\n  /**\n   * Releases a lock on the requested identifier.\n   * The promise will resolve when the lock has been released.\n   * In case there is no lock on the resource an error should be thrown.\n   * @param identifier - Resource to release the lock on.\n   */\n  release: (identifier: ResourceIdentifier) => Promise<void>;\n}\n"]}