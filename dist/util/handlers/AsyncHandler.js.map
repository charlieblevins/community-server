{"version":3,"file":"AsyncHandler.js","sourceRoot":"","sources":["../../../src/util/handlers/AsyncHandler.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,MAAsB,YAAY;IAChC;;;;;;OAMG;IACH,6DAA6D;IACtD,KAAK,CAAC,SAAS,CAAC,KAAU;QAC/B,+BAA+B;IACjC,CAAC;IAWD;;;;;;;OAOG;IACI,KAAK,CAAC,UAAU,CAAC,KAAU;QAChC,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;CACF;AAlCD,oCAkCC","sourcesContent":["/**\n * Simple interface for classes that can potentially handle a specific kind of data asynchronously.\n */\nexport abstract class AsyncHandler<TIn = void, TOut = void> {\n  /**\n   * Checks if the input can be handled by this class.\n   * If it cannot handle the input, rejects with an error explaining why.\n   * @param input - Input that could potentially be handled.\n   *\n   * @returns A promise resolving if the input can be handled, rejecting with an Error if not.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public async canHandle(input: TIn): Promise<void> {\n    // Support any input by default\n  }\n\n  /**\n   * Handles the given input. This may only be called if {@link canHandle} did not reject.\n   * When unconditionally calling both in sequence, consider {@link handleSafe} instead.\n   * @param input - Input that needs to be handled.\n   *\n   * @returns A promise resolving when handling is finished.\n   */\n  public abstract handle(input: TIn): Promise<TOut>;\n\n  /**\n   * Helper function that first runs {@link canHandle} followed by {@link handle}.\n   * Throws the error of {@link canHandle} if the data cannot be handled,\n   * or returns the result of {@link handle} otherwise.\n   * @param input - Input data that will be handled if it can be handled.\n   *\n   * @returns A promise resolving if the input can be handled, rejecting with an Error if not.\n   */\n  public async handleSafe(input: TIn): Promise<TOut> {\n    await this.canHandle(input);\n    return this.handle(input);\n  }\n}\n"]}