{"version":3,"file":"BooleanHandler.js","sourceRoot":"","sources":["../../../src/util/handlers/BooleanHandler.ts"],"names":[],"mappings":";;;AAAA,mDAAqD;AACrD,uEAAoE;AACpE,gDAA6C;AAC7C,iDAA8C;AAC9C,+CAA+C;AAE/C;;;GAGG;AACH,MAAa,cAAoB,SAAQ,2BAA0B;IAKjE;;;OAGG;IACH,YAAmB,QAAsC;QACvD,KAAK,EAAE,CAAC;QATS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAU7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAAU;QAC/B,oEAAoE;QACpE,MAAM,4BAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,KAAU;QAChC,MAAM,QAAQ,GAAG,MAAM,4BAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC5D,OAAO,yBAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAC,OAAO,EAAoB,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9F,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAU;QAC5B,IAAI,QAAsC,CAAC;QAC3C,IAAI;YACF,QAAQ,GAAG,MAAM,4BAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SACvD;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wFAAwF,CAAC,CAAC;YAC3G,MAAM,IAAI,yCAAmB,CAAC,qBAAqB,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;SACxE;QACD,OAAO,yBAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAC,OAAO,EAAoB,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9F,CAAC;CACF;AAlCD,wCAkCC","sourcesContent":["import { getLoggerFor } from '../../logging/LogUtil';\nimport { InternalServerError } from '../errors/InternalServerError';\nimport { promiseSome } from '../PromiseUtil';\nimport { AsyncHandler } from './AsyncHandler';\nimport { filterHandlers } from './HandlerUtil';\n\n/**\n * A composite handler that returns true if any of its handlers can handle the input and return true.\n * Handler errors are interpreted as false results.\n */\nexport class BooleanHandler<TIn> extends AsyncHandler<TIn, boolean> {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly handlers: AsyncHandler<TIn, boolean>[];\n\n  /**\n   * Creates a new BooleanHandler that stores the given handlers.\n   * @param handlers - Handlers over which it will run.\n   */\n  public constructor(handlers: AsyncHandler<TIn, boolean>[]) {\n    super();\n    this.handlers = handlers;\n  }\n\n  public async canHandle(input: TIn): Promise<void> {\n    // We use this to generate an error if no handler supports the input\n    await filterHandlers(this.handlers, input);\n  }\n\n  public async handleSafe(input: TIn): Promise<boolean> {\n    const handlers = await filterHandlers(this.handlers, input);\n    return promiseSome(handlers.map(async(handler): Promise<boolean> => handler.handle(input)));\n  }\n\n  public async handle(input: TIn): Promise<boolean> {\n    let handlers: AsyncHandler<TIn, boolean>[];\n    try {\n      handlers = await filterHandlers(this.handlers, input);\n    } catch (error: unknown) {\n      this.logger.warn('All handlers failed. This might be the consequence of calling handle before canHandle.');\n      throw new InternalServerError('All handlers failed', { cause: error });\n    }\n    return promiseSome(handlers.map(async(handler): Promise<boolean> => handler.handle(input)));\n  }\n}\n"]}