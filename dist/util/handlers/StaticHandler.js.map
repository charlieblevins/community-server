{"version":3,"file":"StaticHandler.js","sourceRoot":"","sources":["../../../src/util/handlers/StaticHandler.ts"],"names":[],"mappings":";;;AAAA,iDAA8C;AAE9C;;;;;GAKG;AACH,6EAA6E;AAC7E,MAAa,aAAoC,SAAQ,2BAAoB;IAG3E,YAAmB,KAAS;QAC1B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,MAAM;QACjB,4EAA4E;QAC5E,OAAO,IAAI,CAAC,KAAM,CAAC;IACrB,CAAC;CACF;AAZD,sCAYC","sourcesContent":["import { AsyncHandler } from './AsyncHandler';\n\n/**\n * A handler that always resolves and always returns the stored value.\n * Will return undefined if no value is stored.\n *\n * The generic type extends `any` due to Components.js requirements.\n */\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-constraint\nexport class StaticHandler<T extends any = void> extends AsyncHandler<any, T> {\n  private readonly value?: T;\n\n  public constructor(value?: T) {\n    super();\n    this.value = value;\n  }\n\n  public async handle(): Promise<T> {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return this.value!;\n  }\n}\n"]}