{"version":3,"file":"ConditionalHandler.js","sourceRoot":"","sources":["../../../src/util/handlers/ConditionalHandler.ts"],"names":[],"mappings":";;;AACA,+EAA4E;AAC5E,iDAA8C;AAE9C;;;;;;GAMG;AACH,MAAa,kBAA8B,SAAQ,2BAAuB;IAQxE,YAAmB,MAA+B,EAAE,OAAyC,EAAE,UAAkB,EAC/G,YAAqB;QACrB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QAEjC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAAU;QAC/B,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,KAAU;QAChC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAU;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc;QAC1B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC;SAC/E;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,IAAI,iDAAuB,CAAC,mCAAmC,CAAC,CAAC;SACxE;IACH,CAAC;CACF;AA7CD,gDA6CC","sourcesContent":["import type { KeyValueStorage } from '../../storage/keyvalue/KeyValueStorage';\nimport { NotImplementedHttpError } from '../errors/NotImplementedHttpError';\nimport { AsyncHandler } from './AsyncHandler';\n\n/**\n * This handler will pass all requests to the wrapped handler,\n * until a specific value has been set in the given storage.\n * After that all input will be rejected.\n * Once the value has been matched this behaviour will be cached,\n * so changing the value again afterwards will not enable this handler again.\n */\nexport class ConditionalHandler<TIn, TOut> extends AsyncHandler<TIn, TOut> {\n  private readonly source: AsyncHandler<TIn, TOut>;\n  private readonly storage: KeyValueStorage<string, unknown>;\n  private readonly storageKey: string;\n  private readonly storageValue: unknown;\n\n  private finished: boolean;\n\n  public constructor(source: AsyncHandler<TIn, TOut>, storage: KeyValueStorage<string, unknown>, storageKey: string,\n    storageValue: unknown) {\n    super();\n    this.source = source;\n    this.storage = storage;\n    this.storageKey = storageKey;\n    this.storageValue = storageValue;\n\n    this.finished = false;\n  }\n\n  public async canHandle(input: TIn): Promise<void> {\n    await this.checkCondition();\n    await this.source.canHandle(input);\n  }\n\n  public async handleSafe(input: TIn): Promise<TOut> {\n    await this.checkCondition();\n    return this.source.handleSafe(input);\n  }\n\n  public async handle(input: TIn): Promise<TOut> {\n    return this.source.handle(input);\n  }\n\n  /**\n   * Checks if the condition has already been fulfilled.\n   */\n  private async checkCondition(): Promise<void> {\n    if (!this.finished) {\n      this.finished = await this.storage.get(this.storageKey) === this.storageValue;\n    }\n\n    if (this.finished) {\n      throw new NotImplementedHttpError('The condition has been fulfilled.');\n    }\n  }\n}\n"]}