{"version":3,"file":"WaterfallHandler.js","sourceRoot":"","sources":["../../../src/util/handlers/WaterfallHandler.ts"],"names":[],"mappings":";;;AAAA,mDAAqD;AACrD,uEAAoE;AAEpE,+CAA4C;AAE5C;;;;;GAKG;AACH,MAAa,gBAAgB;IAK3B;;;OAGG;IACH,YAAmB,QAAmC;QARnC,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAS7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,SAAS,CAAC,KAAU;QAC/B,MAAM,yBAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,MAAM,CAAC,KAAU;QAC5B,IAAI,OAAgC,CAAC;QAErC,IAAI;YACF,OAAO,GAAG,MAAM,yBAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SACnD;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wFAAwF,CAAC,CAAC;YAC3G,MAAM,IAAI,yCAAmB,CAAC,qBAAqB,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;SACxE;QAED,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;;;OAOG;IACI,KAAK,CAAC,UAAU,CAAC,KAAU;QAChC,MAAM,OAAO,GAAG,MAAM,yBAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAExD,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;CACF;AAxDD,4CAwDC","sourcesContent":["import { getLoggerFor } from '../../logging/LogUtil';\nimport { InternalServerError } from '../errors/InternalServerError';\nimport type { AsyncHandler } from './AsyncHandler';\nimport { findHandler } from './HandlerUtil';\n\n/**\n * A composite handler that tries multiple handlers one by one\n * until it finds a handler that supports the input.\n * The handlers will be checked in the order they appear in the input array,\n * allowing for more fine-grained handlers to check before catch-all handlers.\n */\nexport class WaterfallHandler<TIn, TOut> implements AsyncHandler<TIn, TOut> {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly handlers: AsyncHandler<TIn, TOut>[];\n\n  /**\n   * Creates a new WaterfallHandler that stores the given handlers.\n   * @param handlers - Handlers over which it will run.\n   */\n  public constructor(handlers: AsyncHandler<TIn, TOut>[]) {\n    this.handlers = handlers;\n  }\n\n  /**\n   * Checks if any of the stored handlers can handle the given input.\n   * @param input - The data that would need to be handled.\n   *\n   * @returns A promise resolving if at least 1 handler supports to input, or rejecting if none do.\n   */\n  public async canHandle(input: TIn): Promise<void> {\n    await findHandler(this.handlers, input);\n  }\n\n  /**\n   * Finds a handler that supports the given input and then lets it handle the given data.\n   * @param input - The data that needs to be handled.\n   *\n   * @returns A promise corresponding to the handle call of a handler that supports the input.\n   * It rejects if no handlers support the given data.\n   */\n  public async handle(input: TIn): Promise<TOut> {\n    let handler: AsyncHandler<TIn, TOut>;\n\n    try {\n      handler = await findHandler(this.handlers, input);\n    } catch (error: unknown) {\n      this.logger.warn('All handlers failed. This might be the consequence of calling handle before canHandle.');\n      throw new InternalServerError('All handlers failed', { cause: error });\n    }\n\n    return handler.handle(input);\n  }\n\n  /**\n   * Identical to {@link AsyncHandler.handleSafe} but optimized for composite\n   * by only needing 1 canHandle call on members.\n   * @param input - The input data.\n   *\n   * @returns A promise corresponding to the handle call of a handler that supports the input.\n   * It rejects if no handlers support the given data.\n   */\n  public async handleSafe(input: TIn): Promise<TOut> {\n    const handler = await findHandler(this.handlers, input);\n\n    return handler.handle(input);\n  }\n}\n"]}