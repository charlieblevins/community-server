{"version":3,"file":"ParallelHandler.js","sourceRoot":"","sources":["../../../src/util/handlers/ParallelHandler.ts"],"names":[],"mappings":";;;AAAA,iDAA8C;AAE9C;;GAEG;AACH,MAAa,eAAyC,SAAQ,2BAAyB;IAGrF,YAAmB,QAAmC;QACpD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,CAAE,GAAG,QAAQ,CAAE,CAAC;IAClC,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAAU;QAC/B,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAiB,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7F,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAU;QAC5B,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAiB,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3F,CAAC;CACF;AAfD,0CAeC","sourcesContent":["import { AsyncHandler } from './AsyncHandler';\n\n/**\n * A composite handler that executes handlers in parallel.\n */\nexport class ParallelHandler<TIn = void, TOut = void> extends AsyncHandler<TIn, TOut[]> {\n  private readonly handlers: AsyncHandler<TIn, TOut>[];\n\n  public constructor(handlers: AsyncHandler<TIn, TOut>[]) {\n    super();\n    this.handlers = [ ...handlers ];\n  }\n\n  public async canHandle(input: TIn): Promise<void> {\n    await Promise.all(this.handlers.map((handler): Promise<void> => handler.canHandle(input)));\n  }\n\n  public async handle(input: TIn): Promise<TOut[]> {\n    return Promise.all(this.handlers.map((handler): Promise<TOut> => handler.handle(input)));\n  }\n}\n"]}