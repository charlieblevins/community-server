{"version":3,"file":"UnsupportedAsyncHandler.js","sourceRoot":"","sources":["../../../src/util/handlers/UnsupportedAsyncHandler.ts"],"names":[],"mappings":";;;AAAA,+EAA4E;AAC5E,iDAA8C;AAE9C;;GAEG;AACH,MAAa,uBAAwB,SAAQ,2BAAwB;IAGnE,YAAmB,YAAqB;QACtC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,SAAS;QACpB,MAAM,IAAI,iDAAuB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACvD,CAAC;IAEM,KAAK,CAAC,MAAM;QACjB,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;CACF;AAfD,0DAeC","sourcesContent":["import { NotImplementedHttpError } from '../errors/NotImplementedHttpError';\nimport { AsyncHandler } from './AsyncHandler';\n\n/**\n * Handler that does not support any input and will always throw an error.\n */\nexport class UnsupportedAsyncHandler extends AsyncHandler<any, never> {\n  private readonly errorMessage?: string;\n\n  public constructor(errorMessage?: string) {\n    super();\n    this.errorMessage = errorMessage;\n  }\n\n  public async canHandle(): Promise<never> {\n    throw new NotImplementedHttpError(this.errorMessage);\n  }\n\n  public async handle(): Promise<never> {\n    return this.canHandle();\n  }\n}\n"]}