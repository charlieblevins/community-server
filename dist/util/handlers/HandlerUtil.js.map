{"version":3,"file":"HandlerUtil.js","sourceRoot":"","sources":["../../../src/util/handlers/HandlerUtil.ts"],"names":[],"mappings":";;;AAAA,mDAAkE;AAClE,2DAA+D;AAG/D;;;;;;;;GAQG;AACI,KAAK,UAAU,WAAW,CAAY,QAAmC,EAAE,KAAU;IAE1F,MAAM,MAAM,GAAY,EAAE,CAAC;IAE3B,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;QAC9B,IAAI;YACF,MAAM,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAE/B,OAAO,OAAO,CAAC;SAChB;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,mBAAO,CAAC,KAAK,CAAC,EAAE;gBAClB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACpB;iBAAM;gBACL,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,8BAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aACnD;SACF;KACF;IAED,MAAM,oCAAoB,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC;AAnBD,kCAmBC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,cAAc,CAAY,QAAmC,EAAE,KAAU;IAE7F,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAC,OAAO,EAAoC,EAAE;QACvG,MAAM,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC,CAAC,CAAC;IACJ,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,EAAW,EAAE,CAAC,MAAM,KAAK,WAAW,CAAC;SAC5E,GAAG,CAAC,CAAC,MAAM,EAA2B,EAAE,CACtC,MAA0D,CAAC,KAAK,CAAC,CAAC;IAEvE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACtB,OAAO,OAAO,CAAC;KAChB;IAED,+CAA+C;IAC/C,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAS,EAAE,CAAE,MAAgC,CAAC,MAAM,CAAC,CAAC;IAExF,MAAM,oCAAoB,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC;AAlBD,wCAkBC","sourcesContent":["import { createErrorMessage, isError } from '../errors/ErrorUtil';\nimport { createAggregateError } from '../errors/HttpErrorUtil';\nimport type { AsyncHandler } from './AsyncHandler';\n\n/**\n * Finds a handler that can handle the given input data.\n * Otherwise an error gets thrown.\n *\n * @param handlers - List of handlers to search in.\n * @param input - The input data.\n *\n * @returns A promise resolving to a handler that supports the data or otherwise rejecting.\n */\nexport async function findHandler<TIn, TOut>(handlers: AsyncHandler<TIn, TOut>[], input: TIn):\nPromise<AsyncHandler<TIn, TOut>> {\n  const errors: Error[] = [];\n\n  for (const handler of handlers) {\n    try {\n      await handler.canHandle(input);\n\n      return handler;\n    } catch (error: unknown) {\n      if (isError(error)) {\n        errors.push(error);\n      } else {\n        errors.push(new Error(createErrorMessage(error)));\n      }\n    }\n  }\n\n  throw createAggregateError(errors);\n}\n\n/**\n * Filters a list of handlers to only keep those that can handle the input.\n * Will error if no matching handlers are found.\n *\n * @param handlers - Handlers to filter.\n * @param input - Input that needs to be supported.\n */\nexport async function filterHandlers<TIn, TOut>(handlers: AsyncHandler<TIn, TOut>[], input: TIn):\nPromise<AsyncHandler<TIn, TOut>[]> {\n  const results = await Promise.allSettled(handlers.map(async(handler): Promise<AsyncHandler<TIn, TOut>> => {\n    await handler.canHandle(input);\n    return handler;\n  }));\n  const matches = results.filter(({ status }): boolean => status === 'fulfilled')\n    .map((result): AsyncHandler<TIn, TOut> =>\n      (result as PromiseFulfilledResult<AsyncHandler<TIn, TOut>>).value);\n\n  if (matches.length > 0) {\n    return matches;\n  }\n\n  // Generate error in case no matches were found\n  const errors = results.map((result): Error => (result as PromiseRejectedResult).reason);\n\n  throw createAggregateError(errors);\n}\n"]}