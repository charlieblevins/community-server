{"version":3,"file":"BadRequestHttpError.js","sourceRoot":"","sources":["../../../src/util/errors/BadRequestHttpError.ts"],"names":[],"mappings":";;;AACA,2CAAwC;AAExC;;;GAGG;AACH,MAAa,mBAAoB,SAAQ,qBAAS;IAChD;;;;OAIG;IACH,YAAmB,OAAgB,EAAE,OAA0B;QAC7D,KAAK,CAAC,GAAG,EACP,qBAAqB,EACrB,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,+DAA+D,EAC1E,OAAO,CAAC,CAAC;IACb,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,KAAU;QACjC,OAAO,qBAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,UAAU,KAAK,GAAG,CAAC;IACjE,CAAC;CACF;AAhBD,kDAgBC","sourcesContent":["import type { HttpErrorOptions } from './HttpError';\nimport { HttpError } from './HttpError';\n\n/**\n * An error thrown when incoming data is not supported.\n * Probably because an {@link AsyncHandler} returns false on the canHandle call.\n */\nexport class BadRequestHttpError extends HttpError {\n  /**\n   * Default message is 'The given input is not supported by the server configuration.'.\n   * @param message - Optional, more specific, message.\n   * @param options - Optional error options.\n   */\n  public constructor(message?: string, options?: HttpErrorOptions) {\n    super(400,\n      'BadRequestHttpError',\n      message ?? 'The given input is not supported by the server configuration.',\n      options);\n  }\n\n  public static isInstance(error: any): error is BadRequestHttpError {\n    return HttpError.isInstance(error) && error.statusCode === 400;\n  }\n}\n"]}