{"version":3,"file":"PreconditionFailedHttpError.js","sourceRoot":"","sources":["../../../src/util/errors/PreconditionFailedHttpError.ts"],"names":[],"mappings":";;;AACA,2CAAwC;AAExC;;GAEG;AACH,MAAa,2BAA4B,SAAQ,qBAAS;IACxD,YAAmB,OAAgB,EAAE,OAA0B;QAC7D,KAAK,CAAC,GAAG,EAAE,6BAA6B,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,KAAU;QACjC,OAAO,qBAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,UAAU,KAAK,GAAG,CAAC;IACjE,CAAC;CACF;AARD,kEAQC","sourcesContent":["import type { HttpErrorOptions } from './HttpError';\nimport { HttpError } from './HttpError';\n\n/**\n * An error thrown when access was denied due to the conditions on the request.\n */\nexport class PreconditionFailedHttpError extends HttpError {\n  public constructor(message?: string, options?: HttpErrorOptions) {\n    super(412, 'PreconditionFailedHttpError', message, options);\n  }\n\n  public static isInstance(error: any): error is PreconditionFailedHttpError {\n    return HttpError.isInstance(error) && error.statusCode === 412;\n  }\n}\n"]}