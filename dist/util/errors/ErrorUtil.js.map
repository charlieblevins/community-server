{"version":3,"file":"ErrorUtil.js","sourceRoot":"","sources":["../../../src/util/errors/ErrorUtil.ts"],"names":[],"mappings":";;;AAAA,+BAA6B;AAE7B;;GAEG;AACH,SAAgB,OAAO,CAAC,KAAU;IAChC,OAAO,YAAK,CAAC,aAAa,CAAC,KAAK,CAAC;QAC/B,CAAC,KAAK;YACN,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ;YAC9B,OAAO,KAAK,CAAC,OAAO,KAAK,QAAQ;YACjC,CAAC,OAAO,KAAK,CAAC,KAAK,KAAK,WAAW,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;AAC7E,CAAC;AAND,0BAMC;AAED;;;GAGG;AACH,SAAgB,WAAW,CAAC,KAAc;IACxC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACnB,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AAJD,kCAIC;AAED,SAAgB,kBAAkB,CAAC,KAAc;IAC/C,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,kBAAkB,KAAK,EAAE,CAAC;AACpE,CAAC;AAFD,gDAEC","sourcesContent":["import { types } from 'util';\n\n/**\n * Checks if the input is an {@link Error}.\n */\nexport function isError(error: any): error is Error {\n  return types.isNativeError(error) ||\n    (error &&\n    typeof error.name === 'string' &&\n    typeof error.message === 'string' &&\n    (typeof error.stack === 'undefined' || typeof error.stack === 'string'));\n}\n\n/**\n * Asserts that the input is a native error.\n * If not the input will be re-thrown.\n */\nexport function assertError(error: unknown): asserts error is Error {\n  if (!isError(error)) {\n    throw error;\n  }\n}\n\nexport function createErrorMessage(error: unknown): string {\n  return isError(error) ? error.message : `Unknown error: ${error}`;\n}\n"]}