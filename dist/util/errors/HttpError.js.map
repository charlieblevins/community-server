{"version":3,"file":"HttpError.js","sourceRoot":"","sources":["../../../src/util/errors/HttpError.ts"],"names":[],"mappings":";;;AAAA,2CAAsC;AAQtC;;;GAGG;AACH,MAAa,SAAU,SAAQ,KAAK;IAOlC;;;;;;OAMG;IACH,YAAmB,UAAkB,EAAE,IAAY,EAAE,OAAgB,EAAE,UAA4B,EAAE;;QACnG,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,MAAA,OAAO,CAAC,SAAS,mCAAI,IAAI,UAAU,EAAE,CAAC;QACvD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IACjC,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,KAAU;QACjC,OAAO,mBAAO,CAAC,KAAK,CAAC,IAAI,OAAQ,KAAa,CAAC,UAAU,KAAK,QAAQ,CAAC;IACzE,CAAC;CACF;AA1BD,8BA0BC","sourcesContent":["import { isError } from './ErrorUtil';\n\nexport interface HttpErrorOptions {\n  cause?: unknown;\n  errorCode?: string;\n  details?: NodeJS.Dict<unknown>;\n}\n\n/**\n * A class for all errors that could be thrown by Solid.\n * All errors inheriting from this should fix the status code thereby hiding the HTTP internals from other components.\n */\nexport class HttpError extends Error implements HttpErrorOptions {\n  protected static readonly statusCode: number;\n  public readonly statusCode: number;\n  public readonly cause?: unknown;\n  public readonly errorCode: string;\n  public readonly details?: NodeJS.Dict<unknown>;\n\n  /**\n   * Creates a new HTTP error. Subclasses should call this with their fixed status code.\n   * @param statusCode - HTTP status code needed for the HTTP response.\n   * @param name - Error name. Useful for logging and stack tracing.\n   * @param message - Error message.\n   * @param options - Optional options.\n   */\n  public constructor(statusCode: number, name: string, message?: string, options: HttpErrorOptions = {}) {\n    super(message);\n    this.statusCode = statusCode;\n    this.name = name;\n    this.cause = options.cause;\n    this.errorCode = options.errorCode ?? `H${statusCode}`;\n    this.details = options.details;\n  }\n\n  public static isInstance(error: any): error is HttpError {\n    return isError(error) && typeof (error as any).statusCode === 'number';\n  }\n}\n"]}