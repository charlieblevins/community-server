{"version":3,"file":"UnsecureConstantCredentialsExtractor.js","sourceRoot":"","sources":["../../src/authentication/UnsecureConstantCredentialsExtractor.ts"],"names":[],"mappings":";;;AAAA,gDAAkD;AAClD,+CAAgD;AAEhD,iEAA8D;AAE9D;;;GAGG;AACH,MAAa,oCAAqC,SAAQ,2CAAoB;IAM5E,YAAmB,KAA0B;QAC3C,KAAK,EAAE,CAAC;QALO,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAM3C,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC,6BAAe,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IACvG,CAAC;IAEM,KAAK,CAAC,MAAM;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iCAAiC,IAAI,CAAC,WAAW,CAAC,KAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QACnF,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;CACF;AAfD,oFAeC","sourcesContent":["import { getLoggerFor } from '../logging/LogUtil';\nimport { CredentialGroup } from './Credentials';\nimport type { Credential, CredentialSet } from './Credentials';\nimport { CredentialsExtractor } from './CredentialsExtractor';\n\n/**\n * Credentials extractor that authenticates a constant agent\n * (useful for development or debugging purposes).\n */\nexport class UnsecureConstantCredentialsExtractor extends CredentialsExtractor {\n  private readonly credentials: CredentialSet;\n  private readonly logger = getLoggerFor(this);\n\n  public constructor(agent: string);\n  public constructor(agent: Credential);\n  public constructor(agent: string | Credential) {\n    super();\n    this.credentials = { [CredentialGroup.agent]: typeof agent === 'string' ? { webId: agent } : agent };\n  }\n\n  public async handle(): Promise<CredentialSet> {\n    this.logger.info(`Agent unsecurely claims to be ${this.credentials.agent!.webId}`);\n    return this.credentials;\n  }\n}\n"]}