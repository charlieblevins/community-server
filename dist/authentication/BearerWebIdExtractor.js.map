{"version":3,"file":"BearerWebIdExtractor.js","sourceRoot":"","sources":["../../src/authentication/BearerWebIdExtractor.ts"],"names":[],"mappings":";;;AACA,wEAAwE;AACxE,gDAAkD;AAElD,4EAAyE;AACzE,oFAAiF;AACjF,+CAAgD;AAEhD,iEAA8D;AAE9D,MAAa,oBAAqB,SAAQ,2CAAoB;IAI5D;QACE,KAAK,EAAE,CAAC;QAJS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAK7C,IAAI,CAAC,MAAM,GAAG,gDAAwB,EAAE,CAAC;IAC3C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,OAAO,EAAe;QAC7C,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;QAClC,IAAI,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YAC1D,MAAM,IAAI,iDAAuB,CAAC,2CAA2C,CAAC,CAAC;SAChF;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,OAAoB;QACtC,MAAM,EAAE,OAAO,EAAE,EAAE,aAAa,EAAE,EAAC,GAAG,OAAO,CAAC;QAE9C,IAAI;YACF,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAc,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2CAA2C,KAAK,EAAE,CAAC,CAAC;YACrE,OAAO,EAAE,CAAC,6BAAe,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,EAAC,CAAC;SAC9C;QAAC,OAAO,KAAc,EAAE;YACvB,MAAM,OAAO,GAAG,kDAAmD,KAAe,CAAC,OAAO,EAAE,CAAC;YAC7F,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC1B,MAAM,IAAI,yCAAmB,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;SAC1D;IACH,CAAC;CACF;AA7BD,oDA6BC","sourcesContent":["import type { SolidTokenVerifierFunction } from '@solid/access-token-verifier';\nimport { createSolidTokenVerifier } from '@solid/access-token-verifier';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { HttpRequest } from '../server/HttpRequest';\nimport { BadRequestHttpError } from '../util/errors/BadRequestHttpError';\nimport { NotImplementedHttpError } from '../util/errors/NotImplementedHttpError';\nimport { CredentialGroup } from './Credentials';\nimport type { CredentialSet } from './Credentials';\nimport { CredentialsExtractor } from './CredentialsExtractor';\n\nexport class BearerWebIdExtractor extends CredentialsExtractor {\n  protected readonly logger = getLoggerFor(this);\n  private readonly verify: SolidTokenVerifierFunction;\n\n  public constructor() {\n    super();\n    this.verify = createSolidTokenVerifier();\n  }\n\n  public async canHandle({ headers }: HttpRequest): Promise<void> {\n    const { authorization } = headers;\n    if (!authorization || !authorization.startsWith('Bearer ')) {\n      throw new NotImplementedHttpError('No Bearer Authorization header specified.');\n    }\n  }\n\n  public async handle(request: HttpRequest): Promise<CredentialSet> {\n    const { headers: { authorization }} = request;\n\n    try {\n      const { webid: webId } = await this.verify(authorization!);\n      this.logger.info(`Verified WebID via Bearer access token: ${webId}`);\n      return { [CredentialGroup.agent]: { webId }};\n    } catch (error: unknown) {\n      const message = `Error verifying WebID via Bearer access token: ${(error as Error).message}`;\n      this.logger.warn(message);\n      throw new BadRequestHttpError(message, { cause: error });\n    }\n  }\n}\n"]}