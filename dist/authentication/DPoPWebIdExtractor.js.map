{"version":3,"file":"DPoPWebIdExtractor.js","sourceRoot":"","sources":["../../src/authentication/DPoPWebIdExtractor.ts"],"names":[],"mappings":";;;AACA,wEAAwE;AAExE,gDAAkD;AAElD,4EAAyE;AACzE,oFAAiF;AACjF,+CAAgD;AAEhD,iEAA8D;AAE9D;;GAEG;AACH,MAAa,kBAAmB,SAAQ,2CAAoB;IAK1D;;OAEG;IACH,YAAmB,oBAAqC;QACtD,KAAK,EAAE,CAAC;QAPO,WAAM,GAAG,gDAAwB,EAAE,CAAC;QAClC,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;IACnD,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,OAAO,EAAe;QAC7C,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;QAClC,IAAI,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;YACxD,MAAM,IAAI,iDAAuB,CAAC,+CAA+C,CAAC,CAAC;SACpF;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,OAAoB;QACtC,MAAM,EAAE,OAAO,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;QAC7D,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,yCAAmB,CAAC,2BAA2B,CAAC,CAAC;SAC5D;QAED,2DAA2D;QAC3D,yDAAyD;QACzD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAE5E,qDAAqD;QACrD,+CAA+C;QAC/C,IAAI;YACF,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,MAAM,CACxC,aAAc,EACd;gBACE,MAAM,EAAE,IAAc;gBACtB,MAAM,EAAE,MAAuB;gBAC/B,GAAG,EAAE,WAAW,CAAC,IAAI;aACtB,CACF,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,+CAA+C,KAAK,EAAE,CAAC,CAAC;YACzE,OAAO,EAAE,CAAC,6BAAe,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,EAAC,CAAC;SAC9C;QAAC,OAAO,KAAc,EAAE;YACvB,MAAM,OAAO,GAAG,sDAAuD,KAAe,CAAC,OAAO,EAAE,CAAC;YACjG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC1B,MAAM,IAAI,yCAAmB,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;SAC1D;IACH,CAAC;CACF;AAjDD,gDAiDC","sourcesContent":["import type { RequestMethod } from '@solid/access-token-verifier';\nimport { createSolidTokenVerifier } from '@solid/access-token-verifier';\nimport type { TargetExtractor } from '../http/input/identifier/TargetExtractor';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { HttpRequest } from '../server/HttpRequest';\nimport { BadRequestHttpError } from '../util/errors/BadRequestHttpError';\nimport { NotImplementedHttpError } from '../util/errors/NotImplementedHttpError';\nimport { CredentialGroup } from './Credentials';\nimport type { CredentialSet } from './Credentials';\nimport { CredentialsExtractor } from './CredentialsExtractor';\n\n/**\n * Credentials extractor that extracts a WebID from a DPoP-bound access token.\n */\nexport class DPoPWebIdExtractor extends CredentialsExtractor {\n  private readonly originalUrlExtractor: TargetExtractor;\n  private readonly verify = createSolidTokenVerifier();\n  protected readonly logger = getLoggerFor(this);\n\n  /**\n   * @param originalUrlExtractor - Reconstructs the original URL as requested by the client\n   */\n  public constructor(originalUrlExtractor: TargetExtractor) {\n    super();\n    this.originalUrlExtractor = originalUrlExtractor;\n  }\n\n  public async canHandle({ headers }: HttpRequest): Promise<void> {\n    const { authorization } = headers;\n    if (!authorization || !authorization.startsWith('DPoP ')) {\n      throw new NotImplementedHttpError('No DPoP-bound Authorization header specified.');\n    }\n  }\n\n  public async handle(request: HttpRequest): Promise<CredentialSet> {\n    const { headers: { authorization, dpop }, method } = request;\n    if (!dpop) {\n      throw new BadRequestHttpError('No DPoP header specified.');\n    }\n\n    // Reconstruct the original URL as requested by the client,\n    // since this is the one it used to authorize the request\n    const originalUrl = await this.originalUrlExtractor.handleSafe({ request });\n\n    // Validate the Authorization and DPoP header headers\n    // and extract the WebID provided by the client\n    try {\n      const { webid: webId } = await this.verify(\n        authorization!,\n        {\n          header: dpop as string,\n          method: method as RequestMethod,\n          url: originalUrl.path,\n        },\n      );\n      this.logger.info(`Verified WebID via DPoP-bound access token: ${webId}`);\n      return { [CredentialGroup.agent]: { webId }};\n    } catch (error: unknown) {\n      const message = `Error verifying WebID via DPoP-bound access token: ${(error as Error).message}`;\n      this.logger.warn(message);\n      throw new BadRequestHttpError(message, { cause: error });\n    }\n  }\n}\n"]}