{"version":3,"file":"UnionCredentialsExtractor.js","sourceRoot":"","sources":["../../src/authentication/UnionCredentialsExtractor.ts"],"names":[],"mappings":";;;AAAA,gEAA6D;AAK7D;;;;GAIG;AACH,MAAa,yBAA0B,SAAQ,2BAAkC;IAC/E,YAAmB,UAAkC;QACnD,KAAK,CAAC,UAAU,CAAC,CAAC;IACpB,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,OAAwB;QAC3C,+CAA+C;QAC/C,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,UAAU,EAAiB,EAAE;YAC1D,KAAK,MAAM,CAAE,GAAG,EAAE,KAAK,CAAE,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAsC,EAAE;gBAC5F,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;iBACrB;aACF;YACD,OAAO,MAAM,CAAC;QAChB,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;CACF;AAhBD,8DAgBC","sourcesContent":["import { UnionHandler } from '../util/handlers/UnionHandler';\nimport type { CredentialGroup, Credential, CredentialSet } from './Credentials';\n\nimport type { CredentialsExtractor } from './CredentialsExtractor';\n\n/**\n * Combines the results of several CredentialsExtractors into one.\n * If multiple of these extractors return a value for the same key,\n * the last result will be used.\n */\nexport class UnionCredentialsExtractor extends UnionHandler<CredentialsExtractor> {\n  public constructor(extractors: CredentialsExtractor[]) {\n    super(extractors);\n  }\n\n  public async combine(results: CredentialSet[]): Promise<CredentialSet> {\n    // Combine all the results into a single object\n    return results.reduce((result, credential): CredentialSet => {\n      for (const [ key, value ] of Object.entries(credential) as [ CredentialGroup, Credential ][]) {\n        if (value) {\n          result[key] = value;\n        }\n      }\n      return result;\n    }, {});\n  }\n}\n"]}