{"version":3,"file":"OwnerPermissionReader.js","sourceRoot":"","sources":["../../src/authorization/OwnerPermissionReader.ts"],"names":[],"mappings":";;;AAAA,+DAAgE;AAGhE,gDAAkD;AAClD,wDAA8D;AAC9D,oFAAiF;AAEjF,yDAAsD;AAItD;;GAEG;AACH,MAAa,qBAAsB,SAAQ,mCAAgB;IAMzD,YAAmB,YAA0B,EAAE,WAAwC;QACrF,KAAK,EAAE,CAAC;QANS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAA4B;QAC9C,IAAI;YACF,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;SAClC;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,8BAAkB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACpF,OAAO,EAAE,CAAC;SACX;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAEvF,OAAO,EAAE,CAAC,6BAAe,CAAC,KAAK,CAAC,EAAE;gBAChC,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,IAAI;gBACZ,OAAO,EAAE,IAAI;aACG,EAAE,CAAC;IACvB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc,CAAC,EAAE,WAAW,EAAE,UAAU,EAAyB;;QAC7E,iGAAiG;QACjG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,UAAU,CAAC,EAAE;YACvD,MAAM,IAAI,iDAAuB,CAAC,wDAAwD,CAAC,CAAC;SAC7F;QACD,IAAI,CAAC,CAAA,MAAA,WAAW,CAAC,KAAK,0CAAE,KAAK,CAAA,EAAE;YAC7B,MAAM,IAAI,iDAAuB,CAAC,2CAA2C,CAAC,CAAC;SAChF;QACD,IAAI,QAAyB,CAAC;QAC9B,IAAI;YACF,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACzE;QAAC,MAAM;YACN,MAAM,IAAI,iDAAuB,CAAC,sCAAsC,CAAC,CAAC;SAC3E;QACD,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;YACxB,MAAM,IAAI,iDAAuB,CAAC,qCAAqC,CAAC,CAAC;SAC1E;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACpD,MAAM,IAAI,iDAAuB,CAAC,2CAA2C,CAAC,CAAC;SAChF;IACH,CAAC;CACF;AAvDD,sDAuDC","sourcesContent":["import { CredentialGroup } from '../authentication/Credentials';\nimport type { AuxiliaryIdentifierStrategy } from '../http/auxiliary/AuxiliaryIdentifierStrategy';\nimport type { AccountSettings, AccountStore } from '../identity/interaction/email-password/storage/AccountStore';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport { createErrorMessage } from '../util/errors/ErrorUtil';\nimport { NotImplementedHttpError } from '../util/errors/NotImplementedHttpError';\nimport type { PermissionReaderInput } from './PermissionReader';\nimport { PermissionReader } from './PermissionReader';\nimport type { AclPermission } from './permissions/AclPermission';\nimport type { PermissionSet } from './permissions/Permissions';\n\n/**\n * Allows control access if the request is being made by the owner of the pod containing the resource.\n */\nexport class OwnerPermissionReader extends PermissionReader {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly accountStore: AccountStore;\n  private readonly aclStrategy: AuxiliaryIdentifierStrategy;\n\n  public constructor(accountStore: AccountStore, aclStrategy: AuxiliaryIdentifierStrategy) {\n    super();\n    this.accountStore = accountStore;\n    this.aclStrategy = aclStrategy;\n  }\n\n  public async handle(input: PermissionReaderInput): Promise<PermissionSet> {\n    try {\n      await this.ensurePodOwner(input);\n    } catch (error: unknown) {\n      this.logger.debug(`No pod owner Control permissions: ${createErrorMessage(error)}`);\n      return {};\n    }\n    this.logger.debug(`Granting Control permissions to owner on ${input.identifier.path}`);\n\n    return { [CredentialGroup.agent]: {\n      read: true,\n      write: true,\n      append: true,\n      create: true,\n      delete: true,\n      control: true,\n    } as AclPermission };\n  }\n\n  /**\n   * Verify that all conditions are fulfilled to give the owner access.\n   */\n  private async ensurePodOwner({ credentials, identifier }: PermissionReaderInput): Promise<void> {\n    // We only check ownership when an ACL resource is targeted to reduce the number of storage calls\n    if (!this.aclStrategy.isAuxiliaryIdentifier(identifier)) {\n      throw new NotImplementedHttpError('Exception is only granted when accessing ACL resources');\n    }\n    if (!credentials.agent?.webId) {\n      throw new NotImplementedHttpError('Only authenticated agents could be owners');\n    }\n    let settings: AccountSettings;\n    try {\n      settings = await this.accountStore.getSettings(credentials.agent.webId);\n    } catch {\n      throw new NotImplementedHttpError('No account registered for this WebID');\n    }\n    if (!settings.podBaseUrl) {\n      throw new NotImplementedHttpError('This agent has no pod on the server');\n    }\n    if (!identifier.path.startsWith(settings.podBaseUrl)) {\n      throw new NotImplementedHttpError('Not targeting the pod owned by this agent');\n    }\n  }\n}\n"]}