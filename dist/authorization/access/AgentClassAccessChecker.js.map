{"version":3,"file":"AgentClassAccessChecker.js","sourceRoot":"","sources":["../../../src/authorization/access/AgentClassAccessChecker.ts"],"names":[],"mappings":";;;AAAA,0DAAoD;AAEpD,mDAAgD;AAEhD;;GAEG;AACH,MAAa,uBAAwB,SAAQ,6BAAa;IACjD,KAAK,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAqB;QAC9D,8CAA8C;QAC9C,IAAI,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,kBAAG,CAAC,KAAK,CAAC,UAAU,EAAE,mBAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;YAC5E,OAAO,IAAI,CAAC;SACb;QACD,8EAA8E;QAC9E,IAAI,OAAO,UAAU,CAAC,KAAK,KAAK,QAAQ,EAAE;YACxC,OAAO,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,kBAAG,CAAC,KAAK,CAAC,UAAU,EAAE,kBAAG,CAAC,KAAK,CAAC,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;SAC7F;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAZD,0DAYC","sourcesContent":["import { ACL, FOAF } from '../../util/Vocabularies';\nimport type { AccessCheckerArgs } from './AccessChecker';\nimport { AccessChecker } from './AccessChecker';\n\n/**\n * Checks access based on the agent class.\n */\nexport class AgentClassAccessChecker extends AccessChecker {\n  public async handle({ acl, rule, credential }: AccessCheckerArgs): Promise<boolean> {\n    // Check if unauthenticated agents have access\n    if (acl.countQuads(rule, ACL.terms.agentClass, FOAF.terms.Agent, null) !== 0) {\n      return true;\n    }\n    // Check if the agent is authenticated and if authenticated agents have access\n    if (typeof credential.webId === 'string') {\n      return acl.countQuads(rule, ACL.terms.agentClass, ACL.terms.AuthenticatedAgent, null) !== 0;\n    }\n    return false;\n  }\n}\n"]}