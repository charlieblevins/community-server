{"version":3,"file":"AllStaticReader.js","sourceRoot":"","sources":["../../src/authorization/AllStaticReader.ts"],"names":[],"mappings":";;;AAEA,yDAAsD;AAGtD;;;GAGG;AACH,MAAa,eAAgB,SAAQ,mCAAgB;IAGnD,YAAmB,KAAc;QAC/B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC;YAC/B,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,KAAK;SACd,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,WAAW,EAAyB;QACxD,MAAM,MAAM,GAAkB,EAAE,CAAC;QACjC,KAAK,MAAM,CAAE,GAAG,EAAE,KAAK,CAAE,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAoC,EAAE;YAC3F,IAAI,KAAK,EAAE;gBACT,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;aAChC;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAvBD,0CAuBC","sourcesContent":["import type { CredentialGroup } from '../authentication/Credentials';\nimport type { PermissionReaderInput } from './PermissionReader';\nimport { PermissionReader } from './PermissionReader';\nimport type { Permission, PermissionSet } from './permissions/Permissions';\n\n/**\n * PermissionReader which sets all permissions to true or false\n * independently of the identifier and requested permissions.\n */\nexport class AllStaticReader extends PermissionReader {\n  private readonly permissions: Permission;\n\n  public constructor(allow: boolean) {\n    super();\n    this.permissions = Object.freeze({\n      read: allow,\n      write: allow,\n      append: allow,\n      create: allow,\n      delete: allow,\n    });\n  }\n\n  public async handle({ credentials }: PermissionReaderInput): Promise<PermissionSet> {\n    const result: PermissionSet = {};\n    for (const [ key, value ] of Object.entries(credentials) as [CredentialGroup, Permission][]) {\n      if (value) {\n        result[key] = this.permissions;\n      }\n    }\n    return result;\n  }\n}\n"]}