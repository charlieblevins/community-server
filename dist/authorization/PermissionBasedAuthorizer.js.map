{"version":3,"file":"PermissionBasedAuthorizer.js","sourceRoot":"","sources":["../../src/authorization/PermissionBasedAuthorizer.ts"],"names":[],"mappings":";;;AACA,gDAAkD;AAClD,0EAAuE;AACvE,gFAA6E;AAE7E,6CAA0C;AAG1C;;;;;GAKG;AACH,MAAa,yBAA0B,SAAQ,uBAAU;IAAzD;;QACqB,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;IAwDjD,CAAC;IAtDQ,KAAK,CAAC,MAAM,CAAC,KAAsB;;QACxC,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG,KAAK,CAAC;QAEhE,MAAM,UAAU,GAAG,CAAE,GAAG,KAAK,CAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,MAAA,WAAW,CAAC,KAAK,0CAAE,KAAK,QAAQ,UAAU,oBAAoB,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAElH,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;SAC9D;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,UAAU,oBAAoB,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3G,CAAC;IAED;;;;;;;OAOG;IACK,qBAAqB,CAAC,WAA0B,EAAE,aAA4B,EAAE,IAAgB;QACtG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE;YAChD,IAAI,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,EAAE;gBACrC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,WAAW,CAAC,KAAM,CAAC,KAAK,WAAW,IAAI,cAAc,CAAC,CAAC;gBACjF,MAAM,IAAI,uCAAkB,EAAE,CAAC;aAChC;iBAAM;gBACL,8GAA8G;gBAC9G,4GAA4G;gBAC5G,6DAA6D;gBAC7D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,IAAI,cAAc,CAAC,CAAC;gBACrE,MAAM,IAAI,6CAAqB,EAAE,CAAC;aACnC;SACF;IACH,CAAC;IAED;;OAEG;IACK,iBAAiB,CAAC,aAA4B,EAAE,IAAgB;QACtE,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE;YACtD,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE;gBACrB,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;OAGG;IACK,eAAe,CAAC,WAA0B;;QAChD,OAAO,OAAO,CAAA,MAAA,WAAW,CAAC,KAAK,0CAAE,KAAK,CAAA,KAAK,QAAQ,CAAC;IACtD,CAAC;CACF;AAzDD,8DAyDC","sourcesContent":["import type { CredentialSet } from '../authentication/Credentials';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport { ForbiddenHttpError } from '../util/errors/ForbiddenHttpError';\nimport { UnauthorizedHttpError } from '../util/errors/UnauthorizedHttpError';\nimport type { AuthorizerInput } from './Authorizer';\nimport { Authorizer } from './Authorizer';\nimport type { AccessMode, PermissionSet } from './permissions/Permissions';\n\n/**\n * Authorizer that bases its decision on the output it gets from its PermissionReader.\n * For each permission it checks if the reader allows that for at least one credential type,\n * if yes authorization is granted.\n * `undefined` values for reader results are interpreted as `false`.\n */\nexport class PermissionBasedAuthorizer extends Authorizer {\n  protected readonly logger = getLoggerFor(this);\n\n  public async handle(input: AuthorizerInput): Promise<void> {\n    const { credentials, modes, identifier, permissionSet } = input;\n\n    const modeString = [ ...modes ].join(',');\n    this.logger.debug(`Checking if ${credentials.agent?.webId} has ${modeString} permissions for ${identifier.path}`);\n\n    for (const mode of modes) {\n      this.requireModePermission(credentials, permissionSet, mode);\n    }\n    this.logger.debug(`${JSON.stringify(credentials)} has ${modeString} permissions for ${identifier.path}`);\n  }\n\n  /**\n   * Ensures that at least one of the credentials provides permissions for the given mode.\n   * Throws a {@link ForbiddenHttpError} or {@link UnauthorizedHttpError} depending on the credentials\n   * if access is not allowed.\n   * @param credentials - Credentials that require access.\n   * @param permissionSet - PermissionSet describing the available permissions of the credentials.\n   * @param mode - Which mode is requested.\n   */\n  private requireModePermission(credentials: CredentialSet, permissionSet: PermissionSet, mode: AccessMode): void {\n    if (!this.hasModePermission(permissionSet, mode)) {\n      if (this.isAuthenticated(credentials)) {\n        this.logger.warn(`Agent ${credentials.agent!.webId} has no ${mode} permissions`);\n        throw new ForbiddenHttpError();\n      } else {\n        // Solid, ยง2.1: \"When a client does not provide valid credentials when requesting a resource that requires it,\n        // the data pod MUST send a response with a 401 status code (unless 404 is preferred for security reasons).\"\n        // https://solid.github.io/specification/protocol#http-server\n        this.logger.warn(`Unauthenticated agent has no ${mode} permissions`);\n        throw new UnauthorizedHttpError();\n      }\n    }\n  }\n\n  /**\n   * Checks if one of the Permissions in the PermissionSet grants permission to use the given mode.\n   */\n  private hasModePermission(permissionSet: PermissionSet, mode: AccessMode): boolean {\n    for (const permissions of Object.values(permissionSet)) {\n      if (permissions[mode]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether the agent is authenticated (logged in) or not (public/anonymous).\n   * @param credentials - Credentials to check.\n   */\n  private isAuthenticated(credentials: CredentialSet): boolean {\n    return typeof credentials.agent?.webId === 'string';\n  }\n}\n"]}