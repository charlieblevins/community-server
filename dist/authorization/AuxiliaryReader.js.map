{"version":3,"file":"AuxiliaryReader.js","sourceRoot":"","sources":["../../src/authorization/AuxiliaryReader.ts"],"names":[],"mappings":";;;AACA,gDAAkD;AAClD,oFAAiF;AAEjF,yDAAsD;AAGtD;;;;GAIG;AACH,MAAa,eAAgB,SAAQ,mCAAgB;IAMnD,YAAmB,cAAgC,EAAE,iBAAoC;QACvF,KAAK,EAAE,CAAC;QANS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAO7C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,aAAoC;QACzD,MAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IACrD,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,aAAoC;QACtD,MAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,CAAC;QAClE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6BAA6B,aAAa,CAAC,UAAU,CAAC,IAAI,OAAO,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QACnH,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IAClD,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,aAAoC;QAC1D,MAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,CAAC;QAClE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6BAA6B,aAAa,CAAC,UAAU,CAAC,IAAI,OAAO,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QACnH,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IACtD,CAAC;IAEO,wBAAwB,CAAC,aAAoC;QACnE,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE;YAC3E,MAAM,IAAI,iDAAuB,CAAC,wDAAwD,CAAC,CAAC;SAC7F;QAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE;YACzE,MAAM,IAAI,iDAAuB,CAAC,8CAA8C,CAAC,CAAC;SACnF;QAED,OAAO;YACL,GAAG,aAAa;YAChB,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,aAAa,CAAC,UAAU,CAAC;SAClF,CAAC;IACJ,CAAC;CACF;AA3CD,0CA2CC","sourcesContent":["import type { AuxiliaryStrategy } from '../http/auxiliary/AuxiliaryStrategy';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport { NotImplementedHttpError } from '../util/errors/NotImplementedHttpError';\nimport type { PermissionReaderInput } from './PermissionReader';\nimport { PermissionReader } from './PermissionReader';\nimport type { PermissionSet } from './permissions/Permissions';\n\n/**\n * A PermissionReader for auxiliary resources such as acl or shape resources.\n * By default, the access permissions of an auxiliary resource depend on those of its subject resource.\n * This authorizer calls the source authorizer with the identifier of the subject resource.\n */\nexport class AuxiliaryReader extends PermissionReader {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly resourceReader: PermissionReader;\n  private readonly auxiliaryStrategy: AuxiliaryStrategy;\n\n  public constructor(resourceReader: PermissionReader, auxiliaryStrategy: AuxiliaryStrategy) {\n    super();\n    this.resourceReader = resourceReader;\n    this.auxiliaryStrategy = auxiliaryStrategy;\n  }\n\n  public async canHandle(auxiliaryAuth: PermissionReaderInput): Promise<void> {\n    const resourceAuth = this.getRequiredAuthorization(auxiliaryAuth);\n    return this.resourceReader.canHandle(resourceAuth);\n  }\n\n  public async handle(auxiliaryAuth: PermissionReaderInput): Promise<PermissionSet> {\n    const resourceAuth = this.getRequiredAuthorization(auxiliaryAuth);\n    this.logger.debug(`Checking auth request for ${auxiliaryAuth.identifier.path} on ${resourceAuth.identifier.path}`);\n    return this.resourceReader.handle(resourceAuth);\n  }\n\n  public async handleSafe(auxiliaryAuth: PermissionReaderInput): Promise<PermissionSet> {\n    const resourceAuth = this.getRequiredAuthorization(auxiliaryAuth);\n    this.logger.debug(`Checking auth request for ${auxiliaryAuth.identifier.path} to ${resourceAuth.identifier.path}`);\n    return this.resourceReader.handleSafe(resourceAuth);\n  }\n\n  private getRequiredAuthorization(auxiliaryAuth: PermissionReaderInput): PermissionReaderInput {\n    if (!this.auxiliaryStrategy.isAuxiliaryIdentifier(auxiliaryAuth.identifier)) {\n      throw new NotImplementedHttpError('AuxiliaryAuthorizer only supports auxiliary resources.');\n    }\n\n    if (this.auxiliaryStrategy.usesOwnAuthorization(auxiliaryAuth.identifier)) {\n      throw new NotImplementedHttpError('Auxiliary resource uses its own permissions.');\n    }\n\n    return {\n      ...auxiliaryAuth,\n      identifier: this.auxiliaryStrategy.getSubjectIdentifier(auxiliaryAuth.identifier),\n    };\n  }\n}\n"]}