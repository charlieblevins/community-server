{"version":3,"file":"SparqlPatchModesExtractor.js","sourceRoot":"","sources":["../../../src/authorization/permissions/SparqlPatchModesExtractor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Algebra } from 'sparqlalgebrajs';\nimport type { Operation } from '../../http/Operation';\nimport type { Representation } from '../../http/representation/Representation';\nimport type { SparqlUpdatePatch } from '../../http/representation/SparqlUpdatePatch';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { ModesExtractor } from './ModesExtractor';\nimport { AccessMode } from './Permissions';\n\nexport class SparqlPatchModesExtractor extends ModesExtractor {\n  public async canHandle({ method, body }: Operation): Promise<void> {\n    if (method !== 'PATCH') {\n      throw new NotImplementedHttpError(`Cannot determine permissions of ${method}, only PATCH.`);\n    }\n    if (!this.isSparql(body)) {\n      throw new NotImplementedHttpError('Cannot determine permissions of non-SPARQL patches.');\n    }\n    if (!this.isSupported(body.algebra)) {\n      throw new NotImplementedHttpError('Can only determine permissions of a PATCH with DELETE/INSERT operations.');\n    }\n  }\n\n  public async handle({ body }: Operation): Promise<Set<AccessMode>> {\n    // Verified in `canHandle` call\n    const update = (body as SparqlUpdatePatch).algebra as Algebra.DeleteInsert;\n    const result = new Set<AccessMode>();\n\n    // Since `append` is a specific type of write, it is true if `write` is true.\n    if (this.needsWrite(update)) {\n      result.add(AccessMode.write);\n      result.add(AccessMode.append);\n      result.add(AccessMode.create);\n      result.add(AccessMode.delete);\n    } else if (this.needsAppend(update)) {\n      result.add(AccessMode.append);\n    }\n    return result;\n  }\n\n  private isSparql(data: Representation): data is SparqlUpdatePatch {\n    return Boolean((data as SparqlUpdatePatch).algebra);\n  }\n\n  private isSupported(op: Algebra.Update): boolean {\n    if (this.isDeleteInsert(op) || this.isNop(op)) {\n      return true;\n    }\n    if (op.type === Algebra.types.COMPOSITE_UPDATE) {\n      return op.updates.every((update): boolean => this.isSupported(update));\n    }\n    return false;\n  }\n\n  private isDeleteInsert(op: Algebra.Update): op is Algebra.DeleteInsert {\n    return op.type === Algebra.types.DELETE_INSERT;\n  }\n\n  private isNop(op: Algebra.Update): op is Algebra.Nop {\n    return op.type === Algebra.types.NOP;\n  }\n\n  private needsAppend(update: Algebra.Update): boolean {\n    if (this.isNop(update)) {\n      return false;\n    }\n    if (this.isDeleteInsert(update)) {\n      return Boolean(update.insert && update.insert.length > 0);\n    }\n\n    return (update as Algebra.CompositeUpdate).updates.some((op): boolean => this.needsAppend(op));\n  }\n\n  private needsWrite(update: Algebra.Update): boolean {\n    if (this.isNop(update)) {\n      return false;\n    }\n    if (this.isDeleteInsert(update)) {\n      return Boolean(update.delete && update.delete.length > 0);\n    }\n\n    return (update as Algebra.CompositeUpdate).updates.some((op): boolean => this.needsWrite(op));\n  }\n}\n"]}