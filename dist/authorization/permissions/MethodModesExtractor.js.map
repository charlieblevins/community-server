{"version":3,"file":"MethodModesExtractor.js","sourceRoot":"","sources":["../../../src/authorization/permissions/MethodModesExtractor.ts"],"names":[],"mappings":";;;AACA,uFAAoF;AACpF,qDAAkD;AAClD,+CAA2C;AAE3C,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,CAAE,KAAK,EAAE,MAAM,CAAE,CAAC,CAAC;AAChD,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,CAAE,KAAK,EAAE,QAAQ,CAAE,CAAC,CAAC;AACnD,MAAM,cAAc,GAAG,IAAI,GAAG,CAAC,CAAE,MAAM,CAAE,CAAC,CAAC;AAC3C,MAAM,iBAAiB,GAAG,IAAI,GAAG,CAAC,CAAE,GAAG,YAAY,EAAE,GAAG,aAAa,EAAE,GAAG,cAAc,CAAE,CAAC,CAAC;AAE5F;;;GAGG;AACH,MAAa,oBAAqB,SAAQ,+BAAc;IAC/C,KAAK,CAAC,SAAS,CAAC,EAAE,MAAM,EAAa;QAC1C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAClC,MAAM,IAAI,iDAAuB,CAAC,mCAAmC,MAAM,EAAE,CAAC,CAAC;SAChF;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,MAAM,EAAa;QACvC,MAAM,MAAM,GAAG,IAAI,GAAG,EAAc,CAAC;QACrC,IAAI,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC5B,MAAM,CAAC,GAAG,CAAC,wBAAU,CAAC,IAAI,CAAC,CAAC;SAC7B;QACD,IAAI,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC7B,MAAM,CAAC,GAAG,CAAC,wBAAU,CAAC,KAAK,CAAC,CAAC;YAC7B,MAAM,CAAC,GAAG,CAAC,wBAAU,CAAC,MAAM,CAAC,CAAC;YAC9B,MAAM,CAAC,GAAG,CAAC,wBAAU,CAAC,MAAM,CAAC,CAAC;YAC9B,MAAM,CAAC,GAAG,CAAC,wBAAU,CAAC,MAAM,CAAC,CAAC;SAC/B;aAAM,IAAI,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACrC,MAAM,CAAC,GAAG,CAAC,wBAAU,CAAC,MAAM,CAAC,CAAC;SAC/B;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAtBD,oDAsBC","sourcesContent":["import type { Operation } from '../../http/Operation';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { ModesExtractor } from './ModesExtractor';\nimport { AccessMode } from './Permissions';\n\nconst READ_METHODS = new Set([ 'GET', 'HEAD' ]);\nconst WRITE_METHODS = new Set([ 'PUT', 'DELETE' ]);\nconst APPEND_METHODS = new Set([ 'POST' ]);\nconst SUPPORTED_METHODS = new Set([ ...READ_METHODS, ...WRITE_METHODS, ...APPEND_METHODS ]);\n\n/**\n * Generates permissions for the base set of methods that always require the same permissions.\n * Specifically: GET, HEAD, POST, PUT and DELETE.\n */\nexport class MethodModesExtractor extends ModesExtractor {\n  public async canHandle({ method }: Operation): Promise<void> {\n    if (!SUPPORTED_METHODS.has(method)) {\n      throw new NotImplementedHttpError(`Cannot determine permissions of ${method}`);\n    }\n  }\n\n  public async handle({ method }: Operation): Promise<Set<AccessMode>> {\n    const result = new Set<AccessMode>();\n    if (READ_METHODS.has(method)) {\n      result.add(AccessMode.read);\n    }\n    if (WRITE_METHODS.has(method)) {\n      result.add(AccessMode.write);\n      result.add(AccessMode.append);\n      result.add(AccessMode.create);\n      result.add(AccessMode.delete);\n    } else if (APPEND_METHODS.has(method)) {\n      result.add(AccessMode.append);\n    }\n    return result;\n  }\n}\n"]}