{"version":3,"file":"LazyLogger.js","sourceRoot":"","sources":["../../src/logging/LazyLogger.ts"],"names":[],"mappings":";;;AACA,qCAAkC;AAGlC;;;;;GAKG;AACH,MAAa,UAAW,SAAQ,eAAM;IAMpC,YAAmB,iBAAoC,EAAE,KAAa;QACpE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,GAAG,CAAC,KAAe,EAAE,OAAe,EAAE,IAAS;QACpD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC7E;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;CACF;AAlBD,gCAkBC","sourcesContent":["import type { LazyLoggerFactory } from './LazyLoggerFactory';\nimport { Logger } from './Logger';\nimport type { LogLevel } from './LogLevel';\n\n/**\n * Creates a logger lazily using a reference to {@link LazyLoggerFactory}.\n *\n * An error will be thrown if {@link LazyLogger.log} is invoked\n * before a {@link LoggerFactory} is set in {@link LazyLoggerFactory}.\n */\nexport class LazyLogger extends Logger {\n  private readonly lazyLoggerFactory: LazyLoggerFactory;\n  private readonly label: string;\n\n  private logger: Logger | undefined;\n\n  public constructor(lazyLoggerFactory: LazyLoggerFactory, label: string) {\n    super();\n    this.lazyLoggerFactory = lazyLoggerFactory;\n    this.label = label;\n  }\n\n  public log(level: LogLevel, message: string, meta: any): Logger {\n    if (!this.logger) {\n      this.logger = this.lazyLoggerFactory.loggerFactory.createLogger(this.label);\n    }\n    return this.logger.log(level, message, meta);\n  }\n}\n"]}