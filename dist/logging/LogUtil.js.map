{"version":3,"file":"LogUtil.js","sourceRoot":"","sources":["../../src/logging/LogUtil.ts"],"names":[],"mappings":";;;AAAA,2DAAwD;AAIxD;;;;;;;;;;;;;;;;;GAiBG;AACH,SAAgB,YAAY,CAAC,QAA2B;IACtD,OAAO,qCAAiB,CAAC,WAAW,EAAE;SACnC,YAAY,CAAC,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACvF,CAAC;AAHD,oCAGC;AAED;;;;GAIG;AACH,SAAgB,sBAAsB,CAAC,aAA4B;IACjE,qCAAiB,CAAC,WAAW,EAAE,CAAC,aAAa,GAAG,aAAa,CAAC;AAChE,CAAC;AAFD,wDAEC;AAED;;;;;GAKG;AACH,SAAgB,wBAAwB;IACtC,qCAAiB,CAAC,WAAW,EAAE,CAAC,kBAAkB,EAAE,CAAC;AACvD,CAAC;AAFD,4DAEC","sourcesContent":["import { LazyLoggerFactory } from './LazyLoggerFactory';\nimport type { Logger } from './Logger';\nimport type { LoggerFactory } from './LoggerFactory';\n\n/**\n * Gets a logger instance for the given class instance.\n *\n * The returned type of logger depends on the configured {@link LoggerFactory} in {@link Setup}.\n *\n * The following shows a typical pattern on how to create loggers:\n * ```\n * class MyClass {\n *   protected readonly logger = getLoggerFor(this);\n * }\n * ```\n * If no class is applicable, a logger can also be created as follows:\n * ```\n * const logger = getLoggerFor('MyFunction');\n * ```\n *\n * @param loggable - A class instance or a class string name.\n */\nexport function getLoggerFor(loggable: string | Instance): Logger {\n  return LazyLoggerFactory.getInstance()\n    .createLogger(typeof loggable === 'string' ? loggable : loggable.constructor.name);\n}\n\n/**\n * Sets the global logger factory.\n * This will cause all loggers created by {@link getLoggerFor} to be delegated to a logger from the given factory.\n * @param loggerFactory - A logger factory.\n */\nexport function setGlobalLoggerFactory(loggerFactory: LoggerFactory): void {\n  LazyLoggerFactory.getInstance().loggerFactory = loggerFactory;\n}\n\n/**\n * Resets the global logger factory to undefined.\n *\n * This typically only needs to be called during testing.\n * Call this at your own risk.\n */\nexport function resetGlobalLoggerFactory(): void {\n  LazyLoggerFactory.getInstance().resetLoggerFactory();\n}\n\n/**\n * Helper interface to identify class instances.\n */\ninterface Instance {\n  constructor: { name: string };\n}\n"]}