{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../src/logging/Logger.ts"],"names":[],"mappings":";;;AAEA;;;;GAIG;AACH,MAAsB,MAAM;IAU1B;;;;OAIG;IACI,KAAK,CAAC,OAAe,EAAE,IAAU;QACtC,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACI,IAAI,CAAC,OAAe,EAAE,IAAU;QACrC,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACI,IAAI,CAAC,OAAe,EAAE,IAAU;QACrC,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACI,OAAO,CAAC,OAAe,EAAE,IAAU;QACxC,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,OAAe,EAAE,IAAU;QACtC,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,OAAe,EAAE,IAAU;QACtC,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;CACF;AA/DD,wBA+DC","sourcesContent":["import type { LogLevel } from './LogLevel';\n\n/**\n * Logs messages on a certain level.\n *\n * @see getLoggerFor on how to instantiate loggers.\n */\nexport abstract class Logger {\n  /**\n   * Log the given message at the given level.\n   * If the internal level is higher than the given level, the message may be voided.\n   * @param level - The level to log at.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  public abstract log(level: LogLevel, message: string, meta?: any): Logger;\n\n  /**\n   * Log a message at the 'error' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  public error(message: string, meta?: any): Logger {\n    return this.log('error', message, meta);\n  }\n\n  /**\n   * Log a message at the 'warn' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  public warn(message: string, meta?: any): Logger {\n    return this.log('warn', message, meta);\n  }\n\n  /**\n   * Log a message at the 'info' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  public info(message: string, meta?: any): Logger {\n    return this.log('info', message, meta);\n  }\n\n  /**\n   * Log a message at the 'verbose' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  public verbose(message: string, meta?: any): Logger {\n    return this.log('verbose', message, meta);\n  }\n\n  /**\n   * Log a message at the 'debug' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  public debug(message: string, meta?: any): Logger {\n    return this.log('debug', message, meta);\n  }\n\n  /**\n   * Log a message at the 'silly' level.\n   * @param message - The message to log.\n   * @param meta - Optional metadata to include in the log message.\n   */\n  public silly(message: string, meta?: any): Logger {\n    return this.log('silly', message, meta);\n  }\n}\n"]}