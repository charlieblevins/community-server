{"version":3,"file":"AppRunner.js","sourceRoot":"","sources":["../../src/init/AppRunner.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable unicorn/no-process-exit */\n\nimport type { ReadStream, WriteStream } from 'tty';\nimport type { IComponentsManagerBuilderOptions, LogLevel } from 'componentsjs';\nimport { ComponentsManager } from 'componentsjs';\nimport yargs from 'yargs';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport { ensureTrailingSlash, resolveAssetPath, modulePathPlaceholder } from '../util/PathUtil';\nimport type { App } from './App';\n\nconst defaultConfig = `${modulePathPlaceholder}config/default.json`;\n\nexport interface CliParams {\n  loggingLevel: string;\n  port: number;\n  baseUrl?: string;\n  rootFilePath?: string;\n  sparqlEndpoint?: string;\n  showStackTrace?: boolean;\n  podConfigJson?: string;\n}\n\nexport class AppRunner {\n  private readonly logger = getLoggerFor(this);\n\n  /**\n   * Starts the server with a given config.\n   * This method can be used to start the server from within another JavaScript application.\n   * @param loaderProperties - Components.js loader properties.\n   * @param configFile - Path to the server config file.\n   * @param variableParams - Variables to pass into the config file.\n   */\n  public async run(\n    loaderProperties: IComponentsManagerBuilderOptions<App>,\n    configFile: string,\n    variableParams: CliParams,\n  ): Promise<void> {\n    const app = await this.createApp(loaderProperties, configFile, variableParams);\n    await app.start();\n  }\n\n  /**\n   * Starts the server as a command-line application.\n   * Made non-async to lower the risk of unhandled promise rejections.\n   * @param args - Command line arguments.\n   * @param stderr - Standard error stream.\n   */\n  public runCli({\n    argv = process.argv,\n    stderr = process.stderr,\n  }: {\n    argv?: string[];\n    stdin?: ReadStream;\n    stdout?: WriteStream;\n    stderr?: WriteStream;\n  } = {}): void {\n    // Parse the command-line arguments\n    // eslint-disable-next-line no-sync\n    const params = yargs(argv.slice(2))\n      .strict()\n      .usage('node ./bin/server.js [args]')\n      .check((args): boolean => {\n        if (args._.length > 0) {\n          throw new Error(`Unsupported positional arguments: \"${args._.join('\", \"')}\"`);\n        }\n        for (const key of Object.keys(args)) {\n          // We have no options that allow for arrays\n          const val = args[key];\n          if (key !== '_' && Array.isArray(val)) {\n            throw new Error(`Multiple values were provided for: \"${key}\": \"${val.join('\", \"')}\"`);\n          }\n        }\n        return true;\n      })\n      .options({\n        baseUrl: { type: 'string', alias: 'b', requiresArg: true },\n        config: { type: 'string', alias: 'c', default: defaultConfig, requiresArg: true },\n        loggingLevel: { type: 'string', alias: 'l', default: 'info', requiresArg: true },\n        mainModulePath: { type: 'string', alias: 'm', requiresArg: true },\n        port: { type: 'number', alias: 'p', default: 3000, requiresArg: true },\n        rootFilePath: { type: 'string', alias: 'f', default: './', requiresArg: true },\n        showStackTrace: { type: 'boolean', alias: 't', default: false },\n        sparqlEndpoint: { type: 'string', alias: 's', requiresArg: true },\n        podConfigJson: { type: 'string', default: './pod-config.json', requiresArg: true },\n      })\n      .parseSync();\n\n    // Gather settings for instantiating the server\n    const loaderProperties: IComponentsManagerBuilderOptions<App> = {\n      mainModulePath: resolveAssetPath(params.mainModulePath),\n      dumpErrorState: true,\n      logLevel: params.loggingLevel as LogLevel,\n    };\n    const configFile = resolveAssetPath(params.config);\n\n    // Create and execute the app\n    this.createApp(loaderProperties, configFile, params)\n      .then(\n        async(app): Promise<void> => app.start(),\n        (error: Error): void => {\n          // Instantiation of components has failed, so there is no logger to use\n          stderr.write(`Error: could not instantiate server from ${configFile}\\n`);\n          stderr.write(`${error.stack}\\n`);\n          process.exit(1);\n        },\n      ).catch((error): void => {\n        this.logger.error(`Could not start server: ${error}`, { error });\n        process.exit(1);\n      });\n  }\n\n  /**\n   * Creates the main app object to start the server from a given config.\n   * @param loaderProperties - Components.js loader properties.\n   * @param configFile - Path to a Components.js config file.\n   * @param variables - Variables to pass into the config file.\n   */\n  public async createApp(\n    loaderProperties: IComponentsManagerBuilderOptions<App>,\n    configFile: string,\n    variables: CliParams | Record<string, any>,\n  ): Promise<App> {\n    // Translate command-line parameters if needed\n    if (typeof variables.loggingLevel === 'string') {\n      variables = this.createVariables(variables as CliParams);\n    }\n\n    // Set up Components.js\n    const componentsManager = await ComponentsManager.build(loaderProperties);\n    await componentsManager.configRegistry.register(configFile);\n\n    // Create the app\n    const app = 'urn:solid-server:default:App';\n    return await componentsManager.instantiate(app, { variables });\n  }\n\n  /**\n   * Translates command-line parameters into Components.js variables.\n   */\n  protected createVariables(params: CliParams): Record<string, any> {\n    return {\n      'urn:solid-server:default:variable:baseUrl':\n        params.baseUrl ? ensureTrailingSlash(params.baseUrl) : `http://localhost:${params.port}/`,\n      'urn:solid-server:default:variable:loggingLevel': params.loggingLevel,\n      'urn:solid-server:default:variable:port': params.port,\n      'urn:solid-server:default:variable:rootFilePath': resolveAssetPath(params.rootFilePath),\n      'urn:solid-server:default:variable:sparqlEndpoint': params.sparqlEndpoint,\n      'urn:solid-server:default:variable:showStackTrace': params.showStackTrace,\n      'urn:solid-server:default:variable:podConfigJson': resolveAssetPath(params.podConfigJson),\n    };\n  }\n}\n"]}