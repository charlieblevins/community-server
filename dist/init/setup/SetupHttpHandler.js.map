{"version":3,"file":"SetupHttpHandler.js","sourceRoot":"","sources":["../../../src/init/setup/SetupHttpHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Operation } from '../../http/Operation';\nimport type { ErrorHandler } from '../../http/output/error/ErrorHandler';\nimport { ResponseDescription } from '../../http/output/response/ResponseDescription';\nimport { BasicRepresentation } from '../../http/representation/BasicRepresentation';\nimport type { RegistrationParams,\n  RegistrationManager } from '../../identity/interaction/email-password/util/RegistrationManager';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport type { OperationHttpHandlerInput } from '../../server/OperationHttpHandler';\nimport { OperationHttpHandler } from '../../server/OperationHttpHandler';\nimport type { RepresentationConverter } from '../../storage/conversion/RepresentationConverter';\nimport type { KeyValueStorage } from '../../storage/keyvalue/KeyValueStorage';\nimport { APPLICATION_JSON, TEXT_HTML } from '../../util/ContentTypes';\nimport { createErrorMessage } from '../../util/errors/ErrorUtil';\nimport { HttpError } from '../../util/errors/HttpError';\nimport { InternalServerError } from '../../util/errors/InternalServerError';\nimport { MethodNotAllowedHttpError } from '../../util/errors/MethodNotAllowedHttpError';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { addTemplateMetadata } from '../../util/ResourceUtil';\nimport { readJsonStream } from '../../util/StreamUtil';\nimport type { Initializer } from '../Initializer';\n\n/**\n * Input parameters expected in calls to the handler.\n * Will be sent to the RegistrationManager for validation and registration.\n * The reason this is a flat object and does not have a specific field for all the registration parameters\n * is so we can also support form data.\n */\nexport interface SetupInput extends Record<string, any>{\n  /**\n   * Indicates if the initializer should be executed. Ignored if `registration` is true.\n   */\n  initialize?: boolean;\n  /**\n   * Indicates if the registration procedure should be done for IDP registration and/or pod provisioning.\n   */\n  registration?: boolean;\n}\n\nexport interface SetupHttpHandlerArgs {\n  /**\n   * Used for registering a pod during setup.\n   */\n  registrationManager?: RegistrationManager;\n  /**\n   * Initializer to call in case no registration procedure needs to happen.\n   * This Initializer should make sure the necessary resources are there so the server can work correctly.\n   */\n  initializer?: Initializer;\n  /**\n   * Used for content negotiation.\n   */\n  converter: RepresentationConverter;\n  /**\n   * Key that is used to store the boolean in the storage indicating setup is finished.\n   */\n  storageKey: string;\n  /**\n   * Used to store setup status.\n   */\n  storage: KeyValueStorage<string, boolean>;\n  /**\n   * Template to use for GET requests.\n   */\n  viewTemplate: string;\n  /**\n   * Template to show when setup was completed successfully.\n   */\n  responseTemplate: string;\n  /**\n   * Used for converting output errors.\n   */\n  errorHandler: ErrorHandler;\n}\n\n/**\n * Handles the initial setup of a server.\n * Will capture all requests until setup is finished,\n * this to prevent accidentally running unsafe servers.\n *\n * GET requests will return the view template which should contain the setup information for the user.\n * POST requests will run an initializer and/or perform a registration step, both optional.\n * After successfully completing a POST request this handler will disable itself and become unreachable.\n * All other methods will be rejected.\n */\nexport class SetupHttpHandler extends OperationHttpHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly registrationManager?: RegistrationManager;\n  private readonly initializer?: Initializer;\n  private readonly converter: RepresentationConverter;\n  private readonly storageKey: string;\n  private readonly storage: KeyValueStorage<string, boolean>;\n  private readonly viewTemplate: string;\n  private readonly responseTemplate: string;\n  private readonly errorHandler: ErrorHandler;\n\n  private finished: boolean;\n\n  public constructor(args: SetupHttpHandlerArgs) {\n    super();\n    this.finished = false;\n\n    this.registrationManager = args.registrationManager;\n    this.initializer = args.initializer;\n    this.converter = args.converter;\n    this.storageKey = args.storageKey;\n    this.storage = args.storage;\n    this.viewTemplate = args.viewTemplate;\n    this.responseTemplate = args.responseTemplate;\n    this.errorHandler = args.errorHandler;\n  }\n\n  public async handle({ operation }: OperationHttpHandlerInput): Promise<ResponseDescription> {\n    let json: Record<string, any>;\n    let template: string;\n    let success = false;\n    let statusCode = 200;\n    try {\n      ({ json, template } = await this.getJsonResult(operation));\n      success = true;\n    } catch (err: unknown) {\n      // We want to show the errors on the original page in case of HTML interactions, so we can't just throw them here\n      const error = HttpError.isInstance(err) ? err : new InternalServerError(createErrorMessage(err));\n      ({ statusCode } = error);\n      this.logger.warn(error.message);\n      const response = await this.errorHandler.handleSafe({ error, preferences: { type: { [APPLICATION_JSON]: 1 }}});\n      json = await readJsonStream(response.data!);\n      template = this.viewTemplate;\n    }\n\n    // Convert the response JSON to the required format\n    const representation = new BasicRepresentation(JSON.stringify(json), operation.target, APPLICATION_JSON);\n    addTemplateMetadata(representation.metadata, template, TEXT_HTML);\n    const result = await this.converter.handleSafe(\n      { representation, identifier: operation.target, preferences: operation.preferences },\n    );\n\n    // Make sure this setup handler is never used again after a successful POST request\n    if (success && operation.method === 'POST') {\n      this.finished = true;\n      await this.storage.set(this.storageKey, true);\n    }\n\n    return new ResponseDescription(statusCode, result.metadata, result.data);\n  }\n\n  /**\n   * Creates a JSON object representing the result of executing the given operation,\n   * together with the template it should be applied to.\n   */\n  private async getJsonResult(operation: Operation): Promise<{ json: Record<string, any>; template: string }> {\n    if (operation.method === 'GET') {\n      // Return the initial setup page\n      return { json: {}, template: this.viewTemplate };\n    }\n    if (operation.method !== 'POST') {\n      throw new MethodNotAllowedHttpError();\n    }\n\n    // Registration manager expects JSON data\n    let json: SetupInput = {};\n    if (!operation.body.isEmpty) {\n      const args = {\n        representation: operation.body,\n        preferences: { type: { [APPLICATION_JSON]: 1 }},\n        identifier: operation.target,\n      };\n      const converted = await this.converter.handleSafe(args);\n      json = await readJsonStream(converted.data);\n      this.logger.debug(`Input JSON: ${JSON.stringify(json)}`);\n    }\n\n    // We want to initialize after the input has been validated, but before (potentially) writing a pod\n    // since that might overwrite the initializer result\n    if (json.initialize && !json.registration) {\n      if (!this.initializer) {\n        throw new NotImplementedHttpError('This server is not configured with a setup initializer.');\n      }\n      await this.initializer.handleSafe();\n    }\n\n    let output: Record<string, any> = {};\n    // We only call the RegistrationManager when getting registration input.\n    // This way it is also possible to set up a server without requiring registration parameters.\n    let validated: RegistrationParams | undefined;\n    if (json.registration) {\n      if (!this.registrationManager) {\n        throw new NotImplementedHttpError('This server is not configured to support registration during setup.');\n      }\n      // Validate the input JSON\n      validated = this.registrationManager.validateInput(json, true);\n      this.logger.debug(`Validated input: ${JSON.stringify(validated)}`);\n\n      // Register and/or create a pod as requested. Potentially does nothing if all booleans are false.\n      output = await this.registrationManager.register(validated, true);\n    }\n\n    // Add extra setup metadata\n    output.initialize = Boolean(json.initialize);\n    output.registration = Boolean(json.registration);\n    this.logger.debug(`Output: ${JSON.stringify(output)}`);\n\n    return { json: output, template: this.responseTemplate };\n  }\n}\n"]}