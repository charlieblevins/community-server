{"version":3,"file":"ContainerInitializer.js","sourceRoot":"","sources":["../../src/init/ContainerInitializer.ts"],"names":[],"mappings":";;;AACA,gDAAkD;AAIlD,wDAA8D;AAC9D,+CAAgE;AAChE,+CAA4C;AA6B5C;;;GAGG;AACH,MAAa,oBAAqB,SAAQ,yBAAW;IASnD,YAAmB,IAA8B;QAC/C,KAAK,EAAE,CAAC;QATS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAU7C,IAAI,CAAC,WAAW,GAAG,EAAE,IAAI,EAAE,8BAAmB,CAAC,kBAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;QACnF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,MAAM;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;QACpE,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QAChE,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,cAAc,EAAE,IAAI,SAAS,EAAE;YACxE,IAAI;gBACF,MAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;gBAC/D,KAAK,IAAI,CAAC,CAAC;aACZ;YAAC,OAAO,KAAc,EAAE;gBACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6BAA6B,UAAU,CAAC,IAAI,KAAK,8BAAkB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aAChG;SACF;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,IAAI,CAAC,WAAW,CAAC,IAAI,SAAS,KAAK,aAAa,CAAC,CAAC;QAE5F,sCAAsC;QACtC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;CACF;AAnCD,oDAmCC","sourcesContent":["import type { ResourceIdentifier } from '../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { ResourcesGenerator } from '../pods/generate/ResourcesGenerator';\nimport type { KeyValueStorage } from '../storage/keyvalue/KeyValueStorage';\nimport type { ResourceStore } from '../storage/ResourceStore';\nimport { createErrorMessage } from '../util/errors/ErrorUtil';\nimport { ensureTrailingSlash, joinUrl } from '../util/PathUtil';\nimport { Initializer } from './Initializer';\n\nexport interface ContainerInitializerArgs {\n  /**\n   * Base URL of the server.\n   */\n  baseUrl: string;\n  /**\n   * Relative path of the container.\n   */\n  path: string;\n  /**\n   * ResourceStore where the container should be stored.\n   */\n  store: ResourceStore;\n  /**\n   * Generator that should be used to generate container contents.\n   */\n  generator: ResourcesGenerator;\n  /**\n   * Key that is used to store the boolean in the storage indicating the container is initialized.\n   */\n  storageKey: string;\n  /**\n   * Used to store initialization status.\n   */\n  storage: KeyValueStorage<string, boolean>;\n}\n\n/**\n * Initializer that sets up a container.\n * Will copy all the files and folders in the given path to the corresponding documents and containers.\n */\nexport class ContainerInitializer extends Initializer {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly store: ResourceStore;\n  private readonly containerId: ResourceIdentifier;\n  private readonly generator: ResourcesGenerator;\n  private readonly storageKey: string;\n  private readonly storage: KeyValueStorage<string, boolean>;\n\n  public constructor(args: ContainerInitializerArgs) {\n    super();\n    this.containerId = { path: ensureTrailingSlash(joinUrl(args.baseUrl, args.path)) };\n    this.store = args.store;\n    this.generator = args.generator;\n    this.storageKey = args.storageKey;\n    this.storage = args.storage;\n  }\n\n  public async handle(): Promise<void> {\n    this.logger.info(`Initializing container ${this.containerId.path}`);\n    const resources = this.generator.generate(this.containerId, {});\n    let count = 0;\n    for await (const { identifier: resourceId, representation } of resources) {\n      try {\n        await this.store.setRepresentation(resourceId, representation);\n        count += 1;\n      } catch (error: unknown) {\n        this.logger.warn(`Failed to create resource ${resourceId.path}: ${createErrorMessage(error)}`);\n      }\n    }\n    this.logger.info(`Initialized container ${this.containerId.path} with ${count} resources.`);\n\n    // Mark the initialization as finished\n    await this.storage.set(this.storageKey, true);\n  }\n}\n"]}