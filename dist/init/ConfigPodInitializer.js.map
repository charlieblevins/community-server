{"version":3,"file":"ConfigPodInitializer.js","sourceRoot":"","sources":["../../src/init/ConfigPodInitializer.ts"],"names":[],"mappings":";;;AAAA,gDAAkD;AAElD,oEAAmF;AAGnF,+CAA4C;AAE5C;;;;;;;;;;GAUG;AACH,MAAa,oBAAqB,SAAQ,yBAAW;IAMnD,YAAmB,YAAiC,EAClD,aAA+C,EAC/C,cAAsD;QACtD,KAAK,EAAE,CAAC;QARS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAS7C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,MAAM;QACjB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,KAAK,EAAE,MAAM,CAAE,IAAI,EAAE,KAAK,CAAE,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE;YAChE,MAAM,MAAM,GAAG,KAA4B,CAAC;YAC5C,MAAM,KAAK,GACT,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,6BAAiB,CAAC,cAAc,CAAE,EAAE,oBAAQ,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YAC9G,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC3C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAsB,IAAI,EAAE,CAAC,CAAC;YAChD,KAAK,IAAI,CAAC,CAAC;SACZ;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,KAAK,gBAAgB,CAAC,CAAC;IACzD,CAAC;CACF;AA3BD,oDA2BC","sourcesContent":["import { getLoggerFor } from '../logging/LogUtil';\nimport type { ComponentsJsFactory } from '../pods/generate/ComponentsJsFactory';\nimport { TEMPLATE, TEMPLATE_VARIABLE } from '../pods/generate/variables/Variables';\nimport type { KeyValueStorage } from '../storage/keyvalue/KeyValueStorage';\nimport type { ResourceStore } from '../storage/ResourceStore';\nimport { Initializer } from './Initializer';\n\n/**\n * Initializes all pods that have been stored and loads them in memory.\n * This reads the pod settings from a permanent storage and uses those\n * to create the corresponding ResourceStores in memory,\n * so this is required every time the server starts.\n *\n * Part of the dynamic pod creation.\n * Reads the contents from the configuration storage, uses those values to instantiate ResourceStores,\n * and then adds them to the routing storage.\n * @see {@link ConfigPodManager}, {@link TemplatedPodGenerator}, {@link BaseUrlRouterRule}\n */\nexport class ConfigPodInitializer extends Initializer {\n  protected readonly logger = getLoggerFor(this);\n  private readonly storeFactory: ComponentsJsFactory;\n  private readonly configStorage: KeyValueStorage<string, unknown>;\n  private readonly routingStorage: KeyValueStorage<string, ResourceStore>;\n\n  public constructor(storeFactory: ComponentsJsFactory,\n    configStorage: KeyValueStorage<string, unknown>,\n    routingStorage: KeyValueStorage<string, ResourceStore>) {\n    super();\n    this.storeFactory = storeFactory;\n    this.configStorage = configStorage;\n    this.routingStorage = routingStorage;\n  }\n\n  public async handle(): Promise<void> {\n    let count = 0;\n    for await (const [ path, value ] of this.configStorage.entries()) {\n      const config = value as NodeJS.Dict<string>;\n      const store: ResourceStore =\n        await this.storeFactory.generate(config[TEMPLATE_VARIABLE.templateConfig]!, TEMPLATE.ResourceStore, config);\n      await this.routingStorage.set(path, store);\n      this.logger.debug(`Initialized pod at ${path}`);\n      count += 1;\n    }\n    this.logger.info(`Initialized ${count} dynamic pods.`);\n  }\n}\n"]}