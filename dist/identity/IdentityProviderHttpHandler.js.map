{"version":3,"file":"IdentityProviderHttpHandler.js","sourceRoot":"","sources":["../../src/identity/IdentityProviderHttpHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Operation } from '../http/Operation';\nimport type { ErrorHandler } from '../http/output/error/ErrorHandler';\nimport { RedirectResponseDescription } from '../http/output/response/RedirectResponseDescription';\nimport { ResponseDescription } from '../http/output/response/ResponseDescription';\nimport { BasicRepresentation } from '../http/representation/BasicRepresentation';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { HttpRequest } from '../server/HttpRequest';\nimport type { OperationHttpHandlerInput } from '../server/OperationHttpHandler';\nimport { OperationHttpHandler } from '../server/OperationHttpHandler';\nimport type { RepresentationConverter } from '../storage/conversion/RepresentationConverter';\nimport { APPLICATION_JSON } from '../util/ContentTypes';\nimport { BadRequestHttpError } from '../util/errors/BadRequestHttpError';\nimport { joinUrl, trimTrailingSlashes } from '../util/PathUtil';\nimport { addTemplateMetadata, cloneRepresentation } from '../util/ResourceUtil';\nimport { readJsonStream } from '../util/StreamUtil';\nimport type { ProviderFactory } from './configuration/ProviderFactory';\nimport type { Interaction } from './interaction/email-password/handler/InteractionHandler';\nimport type { InteractionRoute, TemplatedInteractionResult } from './interaction/routing/InteractionRoute';\nimport type { InteractionCompleter } from './interaction/util/InteractionCompleter';\n\n// Registration is not standardized within Solid yet, so we use a custom versioned API for now\nconst API_VERSION = '0.2';\n\nexport interface IdentityProviderHttpHandlerArgs {\n  /**\n   * Base URL of the server.\n   */\n  baseUrl: string;\n  /**\n   * Relative path of the IDP entry point.\n   */\n  idpPath: string;\n  /**\n   * Used to generate the OIDC provider.\n   */\n  providerFactory: ProviderFactory;\n  /**\n   * All routes handling the custom IDP behaviour.\n   */\n  interactionRoutes: InteractionRoute[];\n  /**\n   * Used for content negotiation.\n   */\n  converter: RepresentationConverter;\n  /**\n   * Used for POST requests that need to be handled by the OIDC library.\n   */\n  interactionCompleter: InteractionCompleter;\n  /**\n   * Used for converting output errors.\n   */\n  errorHandler: ErrorHandler;\n}\n\n/**\n * Handles all requests relevant for the entire IDP interaction,\n * by sending them to either a matching {@link InteractionRoute},\n * or the generated Provider from the {@link ProviderFactory} if there is no match.\n *\n * The InteractionRoutes handle all requests where we need custom behaviour,\n * such as everything related to generating and validating an account.\n * The Provider handles all the default request such as the initial handshake.\n *\n * This handler handles all requests since it assumes all those requests are relevant for the IDP interaction.\n * A {@link RouterHandler} should be used to filter out other requests.\n */\nexport class IdentityProviderHttpHandler extends OperationHttpHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly baseUrl: string;\n  private readonly providerFactory: ProviderFactory;\n  private readonly interactionRoutes: InteractionRoute[];\n  private readonly converter: RepresentationConverter;\n  private readonly interactionCompleter: InteractionCompleter;\n  private readonly errorHandler: ErrorHandler;\n\n  private readonly controls: Record<string, string>;\n\n  public constructor(args: IdentityProviderHttpHandlerArgs) {\n    // It is important that the RequestParser does not read out the Request body stream.\n    // Otherwise we can't pass it anymore to the OIDC library when needed.\n    super();\n    // Trimming trailing slashes so the relative URL starts with a slash after slicing this off\n    this.baseUrl = trimTrailingSlashes(joinUrl(args.baseUrl, args.idpPath));\n    this.providerFactory = args.providerFactory;\n    this.interactionRoutes = args.interactionRoutes;\n    this.converter = args.converter;\n    this.interactionCompleter = args.interactionCompleter;\n    this.errorHandler = args.errorHandler;\n\n    this.controls = Object.assign(\n      {},\n      ...this.interactionRoutes.map((route): Record<string, string> => this.getRouteControls(route)),\n    );\n  }\n\n  /**\n   * Finds the matching route and resolves the operation.\n   */\n  public async handle({ operation, request, response }: OperationHttpHandlerInput):\n  Promise<ResponseDescription | undefined> {\n    // This being defined means we're in an OIDC session\n    let oidcInteraction: Interaction | undefined;\n    try {\n      const provider = await this.providerFactory.getProvider();\n      // This being defined means we're in an OIDC session\n      oidcInteraction = await provider.interactionDetails(request, response);\n    } catch {\n      // Just a regular request\n    }\n\n    // If our own interaction handler does not support the input, it is either invalid or a request for the OIDC library\n    const route = await this.findRoute(operation, oidcInteraction);\n\n    if (!route) {\n      const provider = await this.providerFactory.getProvider();\n      this.logger.debug(`Sending request to oidc-provider: ${request.url}`);\n      // Even though the typings do not indicate this, this is a Promise that needs to be awaited.\n      // Otherwise the `BaseHttpServerFactory` will write a 404 before the OIDC library could handle the response.\n      // eslint-disable-next-line @typescript-eslint/await-thenable\n      await provider.callback(request, response);\n      return;\n    }\n\n    // Cloning input data so it can be sent back in case of errors\n    let clone = operation.body;\n\n    // IDP handlers expect JSON data\n    if (!operation.body.isEmpty) {\n      const args = {\n        representation: operation.body,\n        preferences: { type: { [APPLICATION_JSON]: 1 }},\n        identifier: operation.target,\n      };\n      operation.body = await this.converter.handleSafe(args);\n      clone = await cloneRepresentation(operation.body);\n    }\n\n    const result = await route.handleOperation(operation, oidcInteraction);\n\n    // Reset the body so it can be reused when needed for output\n    operation.body = clone;\n\n    return this.handleInteractionResult(operation, request, result, oidcInteraction);\n  }\n\n  /**\n   * Finds a route that supports the given request.\n   */\n  private async findRoute(operation: Operation, oidcInteraction?: Interaction): Promise<InteractionRoute | undefined> {\n    if (!operation.target.path.startsWith(this.baseUrl)) {\n      // This is either an invalid request or a call to the .well-known configuration\n      return;\n    }\n    const pathName = operation.target.path.slice(this.baseUrl.length);\n\n    for (const route of this.interactionRoutes) {\n      if (route.supportsPath(pathName, oidcInteraction?.prompt.name)) {\n        return route;\n      }\n    }\n  }\n\n  /**\n   * Creates a ResponseDescription based on the InteractionHandlerResult.\n   * This will either be a redirect if type is \"complete\" or a data stream if the type is \"response\".\n   */\n  private async handleInteractionResult(operation: Operation, request: HttpRequest,\n    result: TemplatedInteractionResult, oidcInteraction?: Interaction): Promise<ResponseDescription> {\n    let responseDescription: ResponseDescription | undefined;\n\n    if (result.type === 'complete') {\n      if (!oidcInteraction) {\n        throw new BadRequestHttpError(\n          'This action can only be performed as part of an OIDC authentication flow.',\n          { errorCode: 'E0002' },\n        );\n      }\n      // Create a redirect URL with the OIDC library\n      const location = await this.interactionCompleter.handleSafe({ ...result.details, request });\n      responseDescription = new RedirectResponseDescription(location);\n    } else if (result.type === 'error') {\n      // We want to show the errors on the original page in case of html interactions, so we can't just throw them here\n      const preferences = { type: { [APPLICATION_JSON]: 1 }};\n      const response = await this.errorHandler.handleSafe({ error: result.error, preferences });\n      const details = await readJsonStream(response.data!);\n\n      // Add the input data to the JSON response;\n      if (!operation.body.isEmpty) {\n        details.prefilled = await readJsonStream(operation.body.data);\n\n        // Don't send passwords back\n        delete details.prefilled.password;\n        delete details.prefilled.confirmPassword;\n      }\n\n      responseDescription =\n        await this.handleResponseResult(details, operation, result.templateFiles, oidcInteraction, response.statusCode);\n    } else {\n      // Convert the response object to a data stream\n      responseDescription =\n        await this.handleResponseResult(result.details ?? {}, operation, result.templateFiles, oidcInteraction);\n    }\n\n    return responseDescription;\n  }\n\n  /**\n   * Converts an InteractionResponseResult to a ResponseDescription by first converting to a Representation\n   * and applying necessary conversions.\n   */\n  private async handleResponseResult(details: Record<string, any>, operation: Operation,\n    templateFiles: Record<string, string>, oidcInteraction?: Interaction, statusCode = 200):\n    Promise<ResponseDescription> {\n    const json = {\n      ...details,\n      apiVersion: API_VERSION,\n      authenticating: Boolean(oidcInteraction),\n      controls: this.controls,\n    };\n    const representation = new BasicRepresentation(JSON.stringify(json), operation.target, APPLICATION_JSON);\n\n    // Template metadata is required for conversion\n    for (const [ type, templateFile ] of Object.entries(templateFiles)) {\n      addTemplateMetadata(representation.metadata, templateFile, type);\n    }\n\n    // Potentially convert the Representation based on the preferences\n    const args = { representation, preferences: operation.preferences, identifier: operation.target };\n    const converted = await this.converter.handleSafe(args);\n\n    return new ResponseDescription(statusCode, converted.metadata, converted.data);\n  }\n\n  /**\n   * Converts the controls object of a route to one with full URLs.\n   */\n  private getRouteControls(route: InteractionRoute): Record<string, string> {\n    const entries = Object.entries(route.getControls())\n      .map(([ name, path ]): [ string, string ] => [ name, joinUrl(this.baseUrl, path) ]);\n    return Object.fromEntries(entries);\n  }\n}\n"]}