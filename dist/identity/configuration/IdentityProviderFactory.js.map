{"version":3,"file":"IdentityProviderFactory.js","sourceRoot":"","sources":["../../../src/identity/configuration/IdentityProviderFactory.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention, tsdoc/syntax */\n// tsdoc/syntax can't handle {json} parameter\nimport { randomBytes } from 'crypto';\nimport type { AnyObject,\n  CanBePromise,\n  KoaContextWithOIDC,\n  Configuration,\n  Account,\n  ErrorOut,\n  Adapter } from 'oidc-provider';\nimport { Provider } from 'oidc-provider';\nimport type { ErrorHandler } from '../../http/output/error/ErrorHandler';\nimport type { ResponseWriter } from '../../http/output/ResponseWriter';\nimport type { KeyValueStorage } from '../../storage/keyvalue/KeyValueStorage';\nimport { ensureTrailingSlash, joinUrl } from '../../util/PathUtil';\nimport type { AdapterFactory } from '../storage/AdapterFactory';\nimport type { JwksKeyGenerator } from './JwksKeyGenerator';\nimport type { ProviderFactory } from './ProviderFactory';\n\nexport interface IdentityProviderFactoryArgs {\n  /**\n   * Factory that creates the adapter used for OIDC data storage.\n   */\n  adapterFactory: AdapterFactory;\n  /**\n   * Base URL of the server.\n   */\n  baseUrl: string;\n  /**\n   * Path of the IDP component in the server.\n   * Should start with a slash.\n   */\n  idpPath: string;\n  /**\n   * Storage used to store cookie and JWT keys so they can be re-used in case of multithreading.\n   */\n  storage: KeyValueStorage<string, unknown>;\n  /**\n   * Used to convert errors thrown by the OIDC library.\n   */\n  errorHandler: ErrorHandler;\n  /**\n   * Used to write out errors thrown by the OIDC library.\n   */\n  responseWriter: ResponseWriter;\n  /**\n   * Used to generate and store JWKS\n   */\n  jwksKeyGenerator: JwksKeyGenerator;\n}\n\nconst JWKS_KEY = 'jwks';\nconst COOKIES_KEY = 'cookie-secret';\n\n/**\n * Creates an OIDC Provider based on the provided configuration and parameters.\n * The provider will be cached and returned on subsequent calls.\n * Cookie and JWT keys will be stored in an internal storage so they can be re-used over multiple threads.\n * Necessary claims for Solid OIDC interactions will be added.\n * Routes will be updated based on the `baseUrl` and `idpPath`.\n */\nexport class IdentityProviderFactory implements ProviderFactory {\n  private readonly config: Configuration;\n  private readonly adapterFactory!: AdapterFactory;\n  private readonly baseUrl!: string;\n  private readonly idpPath!: string;\n  private readonly storage!: KeyValueStorage<string, unknown>;\n  private readonly errorHandler!: ErrorHandler;\n  private readonly responseWriter!: ResponseWriter;\n  private readonly jwksKeyGenerator!: JwksKeyGenerator;\n\n  private provider?: Provider;\n\n  /**\n   * @param config - JSON config for the OIDC library @range {json}\n   * @param args - Remaining parameters required for the factory.\n   */\n  public constructor(config: Configuration, args: IdentityProviderFactoryArgs) {\n    if (!args.idpPath.startsWith('/')) {\n      throw new Error('idpPath needs to start with a /');\n    }\n    this.config = config;\n    Object.assign(this, args);\n  }\n\n  public async getProvider(): Promise<Provider> {\n    if (this.provider) {\n      return this.provider;\n    }\n    this.provider = await this.createProvider();\n    return this.provider;\n  }\n\n  /**\n   * Creates a Provider by building a Configuration using all the stored parameters.\n   */\n  private async createProvider(): Promise<Provider> {\n    const config = await this.initConfig();\n\n    // Add correct claims to IdToken/AccessToken responses\n    this.configureClaims(config);\n\n    // Make sure routes are contained in the IDP space\n    this.configureRoutes(config);\n\n    // Render errors with our own error handler\n    this.configureErrors(config);\n\n    // Allow provider to interpret reverse proxy headers\n    const provider = new Provider(this.baseUrl, config);\n    provider.proxy = true;\n    return provider;\n  }\n\n  /**\n   * Creates a configuration by copying the internal configuration\n   * and adding the adapter, default audience and jwks/cookie keys.\n   */\n  private async initConfig(): Promise<Configuration> {\n    // Create a deep copy\n    const config: Configuration = JSON.parse(JSON.stringify(this.config));\n\n    // Indicates which Adapter should be used for storing oidc data\n    // The adapter function MUST be a named function.\n    // See https://github.com/panva/node-oidc-provider/issues/799\n    const factory = this.adapterFactory;\n    config.adapter = function loadAdapter(name: string): Adapter {\n      return factory.createStorageAdapter(name);\n    };\n\n    // Cast necessary due to typing conflict between jose 2.x and 3.x\n    config.jwks = await this.jwksKeyGenerator.getPrivateJwks(JWKS_KEY) as any;\n    config.cookies = {\n      ...config.cookies ?? {},\n      keys: await this.generateCookieKeys(),\n    };\n\n    return config;\n  }\n\n  /**\n   * Generates a cookie secret to be used for cookie signing.\n   * The key will be cached so subsequent calls return the same key.\n   */\n  private async generateCookieKeys(): Promise<string[]> {\n    // Check to see if the keys are already saved\n    const cookieSecret = await this.storage.get(COOKIES_KEY);\n    if (Array.isArray(cookieSecret)) {\n      return cookieSecret;\n    }\n    // If they are not, generate and save them\n    const newCookieSecret = [ randomBytes(64).toString('hex') ];\n    await this.storage.set(COOKIES_KEY, newCookieSecret);\n    return newCookieSecret;\n  }\n\n  /**\n   * Checks if the given token is an access token.\n   * The AccessToken interface is not exported so we have to access it like this.\n   */\n  private isAccessToken(token: any): token is KoaContextWithOIDC['oidc']['accessToken'] {\n    return token.kind === 'AccessToken';\n  }\n\n  /**\n   * Adds the necessary claims the to id token and access token based on the Solid OIDC spec.\n   */\n  private configureClaims(config: Configuration): void {\n    // Access token audience is 'solid', ID token audience is the client_id\n    config.audiences = (ctx, sub, token, use): string =>\n      use === 'access_token' ? 'solid' : token.clientId!;\n\n    // Returns the id_token\n    // See https://solid.github.io/authentication-panel/solid-oidc/#tokens-id\n    config.findAccount = async(ctx: KoaContextWithOIDC, sub: string): Promise<Account> => ({\n      accountId: sub,\n      claims: async(): Promise<{ sub: string; [key: string]: any }> =>\n        ({ sub, webid: sub }),\n    });\n\n    // Add extra claims in case an AccessToken is being issued.\n    // Specifically this sets the required webid and client_id claims for the access token\n    // See https://solid.github.io/authentication-panel/solid-oidc/#tokens-access\n    config.extraAccessTokenClaims = (ctx, token): CanBePromise<AnyObject | void> =>\n      this.isAccessToken(token) ?\n        { webid: token.accountId, client_id: token.clientId } :\n        {};\n  }\n\n  /**\n   * Creates the route string as required by the `oidc-provider` library.\n   * In case base URL is `http://test.com/foo/`, `idpPath` is `/idp` and `relative` is `device/auth`,\n   * this would result in `/foo/idp/device/auth`.\n   */\n  private createRoute(relative: string): string {\n    return new URL(joinUrl(this.baseUrl, this.idpPath, relative)).pathname;\n  }\n\n  /**\n   * Sets up all the IDP routes relative to the IDP path.\n   */\n  private configureRoutes(config: Configuration): void {\n    // When oidc-provider cannot fulfill the authorization request for any of the possible reasons\n    // (missing user session, requested ACR not fulfilled, prompt requested, ...)\n    // it will resolve the interactions.url helper function and redirect the User-Agent to that url.\n    config.interactions = {\n      url: (): string => ensureTrailingSlash(this.idpPath),\n    };\n\n    config.routes = {\n      authorization: this.createRoute('auth'),\n      check_session: this.createRoute('session/check'),\n      code_verification: this.createRoute('device'),\n      device_authorization: this.createRoute('device/auth'),\n      end_session: this.createRoute('session/end'),\n      introspection: this.createRoute('token/introspection'),\n      jwks: this.createRoute('jwks'),\n      pushed_authorization_request: this.createRoute('request'),\n      registration: this.createRoute('reg'),\n      revocation: this.createRoute('token/revocation'),\n      token: this.createRoute('token'),\n      userinfo: this.createRoute('me'),\n    };\n  }\n\n  /**\n   * Pipes library errors to the provided ErrorHandler and ResponseWriter.\n   */\n  private configureErrors(config: Configuration): void {\n    config.renderError = async(ctx: KoaContextWithOIDC, out: ErrorOut, error: Error): Promise<void> => {\n      // This allows us to stream directly to to the response object, see https://github.com/koajs/koa/issues/944\n      ctx.respond = false;\n      const result = await this.errorHandler.handleSafe({ error, preferences: { type: { 'text/plain': 1 }}});\n      await this.responseWriter.handleSafe({ response: ctx.res, result });\n    };\n  }\n}\n"]}