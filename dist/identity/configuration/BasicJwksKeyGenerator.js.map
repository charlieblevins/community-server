{"version":3,"file":"BasicJwksKeyGenerator.js","sourceRoot":"","sources":["../../../src/identity/configuration/BasicJwksKeyGenerator.ts"],"names":[],"mappings":";;;AAAA,yCAAyC;AACzC,iDAAiD;AACjD,0DAAqD;AACrD,mEAA8D;AAQ9D,MAAa,qBAAqB;IAGhC,YAAmB,IAA+B;QAChD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,cAAc,CAAC,OAAe;QACzC,6CAA6C;QAC7C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,UAAU,CAAgC,CAAC;QACzF,IAAI,IAAI,EAAE;YACR,OAAO,IAAI,CAAC;SACb;QACD,OAAO,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;IAC3D,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAe;QACxC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,SAAS,CAAgC,CAAC;QACxF,IAAI,IAAI,EAAE;YACR,OAAO,IAAI,CAAC;SACb;QACD,OAAO,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;IAC1D,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,OAAe;QAC/C,0CAA0C;QAC1C,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,MAAM,mCAAe,CAAC,OAAO,CAAC,CAAC;QACjE,MAAM,UAAU,GAAG,MAAM,2BAAW,CAAC,UAAU,CAAC,CAAC;QACjD,MAAM,SAAS,GAAG,MAAM,2BAAW,CAAC,SAAS,CAAC,CAAC;QAC/C,kCAAkC;QAClC,UAAU,CAAC,GAAG,GAAG,OAAO,CAAC;QACzB,SAAS,CAAC,GAAG,GAAG,OAAO,CAAC;QACxB,yFAAyF;QACzF,uDAAuD;QACvD,kFAAkF;QAClF,MAAM,cAAc,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,UAAU,EAAE,CAAC,EAAC,CAAC;QACpD,MAAM,aAAa,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,SAAS,EAAE,CAAC,EAAC,CAAC;QAClD,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,UAAU,EAAE,cAAc,CAAC,CAAC;QAC7D,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,SAAS,EAAE,aAAa,CAAC,CAAC;QAC3D,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC;IAC5D,CAAC;CACF;AA7CD,sDA6CC","sourcesContent":["/* eslint-disable import/no-unresolved */\n// import/no-unresolved can't handle jose imports\nimport { fromKeyLike } from 'jose/jwk/from_key_like';\nimport { generateKeyPair } from 'jose/util/generate_key_pair';\nimport type { KeyValueStorage } from '../../storage/keyvalue/KeyValueStorage';\nimport type { JwksKeyGenerator } from './JwksKeyGenerator';\n\nexport interface BasicJwksKeyGeneratorArgs {\n  storage: KeyValueStorage<string, unknown>;\n}\n\nexport class BasicJwksKeyGenerator implements JwksKeyGenerator {\n  private readonly storage!: KeyValueStorage<string, unknown>;\n\n  public constructor(args: BasicJwksKeyGeneratorArgs) {\n    this.storage = args.storage;\n  }\n\n  /**\n   * Generates a JWKS using a single RS256 JWK..\n   * The JWKS will be cached so subsequent calls return the same key.\n   */\n  public async getPrivateJwks(keyName: string): Promise<{ keys: any[] }> {\n    // Check to see if the keys are already saved\n    const jwks = await this.storage.get(`${keyName}:private`) as { keys: any[] } | undefined;\n    if (jwks) {\n      return jwks;\n    }\n    return (await this.generateAndSaveKeys(keyName)).private;\n  }\n\n  public async getPublicJwks(keyName: string): Promise<{ keys: any[] }> {\n    const jwks = await this.storage.get(`${keyName}:public`) as { keys: any[] } | undefined;\n    if (jwks) {\n      return jwks;\n    }\n    return (await this.generateAndSaveKeys(keyName)).public;\n  }\n\n  private async generateAndSaveKeys(keyName: string): Promise<{ public: { keys: any[] }; private: { keys: any[] }}> {\n    // If they are not, generate and save them\n    const { privateKey, publicKey } = await generateKeyPair('RS256');\n    const jwkPrivate = await fromKeyLike(privateKey);\n    const jwkPublic = await fromKeyLike(publicKey);\n    // Required for Solid authn client\n    jwkPrivate.alg = 'RS256';\n    jwkPublic.alg = 'RS256';\n    // In node v15.12.0 the JWKS does not get accepted because the JWK is not a plain object,\n    // which is why we convert it into a plain object here.\n    // Potentially this can be changed at a later point in time to `{ keys: [ jwk ]}`.\n    const newPrivateJwks = { keys: [{ ...jwkPrivate }]};\n    const newPublicJwks = { keys: [{ ...jwkPublic }]};\n    await this.storage.set(`${keyName}:private`, newPrivateJwks);\n    await this.storage.set(`${keyName}:public`, newPublicJwks);\n    return { public: newPublicJwks, private: newPrivateJwks };\n  }\n}\n"]}