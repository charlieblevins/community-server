{"version":3,"file":"InteractionCompleter.js","sourceRoot":"","sources":["../../../../src/identity/interaction/util/InteractionCompleter.ts"],"names":[],"mappings":";;;AAAA,+BAAsC;AAGtC,sEAAmE;AAenE;;;GAGG;AACH,MAAa,oBAAqB,SAAQ,2BAA+C;IAGvF,YAAmB,eAAgC;QACjD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAgC;QAClD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;QAC1D,MAAM,MAAM,GAAuB;YACjC,KAAK,EAAE;gBACL,OAAO,EAAE,KAAK,CAAC,KAAK;gBACpB,QAAQ,EAAE,KAAK,CAAC,cAAc;gBAC9B,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;aAClC;YACD,OAAO,EAAE;gBACP,cAAc,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAE,gBAAgB,CAAE;aACjE;SACF,CAAC;QAEF,+EAA+E;QAC/E,qCAAqC;QACrC,mEAAmE;QACnE,OAAO,QAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,qBAAc,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC,CAAC;IACpG,CAAC;CACF;AA1BD,oDA0BC","sourcesContent":["import { ServerResponse } from 'http';\nimport type { InteractionResults } from 'oidc-provider';\nimport type { HttpRequest } from '../../../server/HttpRequest';\nimport { AsyncHandler } from '../../../util/handlers/AsyncHandler';\nimport type { ProviderFactory } from '../../configuration/ProviderFactory';\n\n/**\n * Parameters required to specify how the interaction should be completed.\n */\nexport interface InteractionCompleterParams {\n  webId: string;\n  shouldRemember?: boolean;\n}\n\nexport interface InteractionCompleterInput extends InteractionCompleterParams {\n  request: HttpRequest;\n}\n\n/**\n * Completes an IDP interaction, logging the user in.\n * Returns the URL the request should be redirected to.\n */\nexport class InteractionCompleter extends AsyncHandler<InteractionCompleterInput, string> {\n  private readonly providerFactory: ProviderFactory;\n\n  public constructor(providerFactory: ProviderFactory) {\n    super();\n    this.providerFactory = providerFactory;\n  }\n\n  public async handle(input: InteractionCompleterInput): Promise<string> {\n    const provider = await this.providerFactory.getProvider();\n    const result: InteractionResults = {\n      login: {\n        account: input.webId,\n        remember: input.shouldRemember,\n        ts: Math.floor(Date.now() / 1000),\n      },\n      consent: {\n        rejectedScopes: input.shouldRemember ? [] : [ 'offline_access' ],\n      },\n    };\n\n    // Response object is not actually needed here so we can just mock it like this\n    // to bypass the OIDC library checks.\n    // See https://github.com/panva/node-oidc-provider/discussions/1078\n    return provider.interactionResult(input.request, Object.create(ServerResponse.prototype), result);\n  }\n}\n"]}