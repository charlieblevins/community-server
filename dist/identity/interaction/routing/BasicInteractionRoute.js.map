{"version":3,"file":"BasicInteractionRoute.js","sourceRoot":"","sources":["../../../../src/identity/interaction/routing/BasicInteractionRoute.ts"],"names":[],"mappings":";;;AACA,kFAA+E;AAC/E,8DAA6E;AAC7E,kFAA+E;AAC/E,qDAA6D;AAO7D;;;GAGG;AACH,MAAa,qBAAqB;IAQhC;;;;;;;;;;OAUG;IACH,YAAmB,KAAa,EAC9B,aAAqC,EACrC,OAA2B,EAC3B,MAAe,EACf,oBAA4C,EAAE,EAC9C,WAAmC,EAAE;QACrC,IAAI,CAAC,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED;;OAEG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;OAGG;IACI,YAAY,CAAC,IAAY,EAAE,MAAe;QAC/C,oFAAoF;QACpF,IAAI,8BAAmB,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,EAAE;YACpD,OAAO,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC;SAC/B;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;;;;OAQG;IACI,KAAK,CAAC,eAAe,CAAC,SAAoB,EAAE,eAA6B;QAE9E,QAAQ,SAAS,CAAC,MAAM,EAAE;YACxB,KAAK,KAAK;gBACR,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC;YACjE,KAAK,MAAM;gBACT,IAAI;oBACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC;oBAC7E,OAAO,EAAE,GAAG,MAAM,EAAE,aAAa,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC7D;gBAAC,OAAO,GAAY,EAAE;oBACrB,MAAM,KAAK,GAAG,mBAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,yCAAmB,CAAC,8BAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;oBACpF,2CAA2C;oBAC3C,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC;iBACpE;YACH;gBACE,MAAM,IAAI,yCAAmB,CAAC,wBAAwB,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;SACtG;IACH,CAAC;CACF;AA/ED,sDA+EC","sourcesContent":["import type { Operation } from '../../../http/Operation';\nimport { BadRequestHttpError } from '../../../util/errors/BadRequestHttpError';\nimport { createErrorMessage, isError } from '../../../util/errors/ErrorUtil';\nimport { InternalServerError } from '../../../util/errors/InternalServerError';\nimport { trimTrailingSlashes } from '../../../util/PathUtil';\nimport type {\n  InteractionHandler,\n  Interaction,\n} from '../email-password/handler/InteractionHandler';\nimport type { InteractionRoute, TemplatedInteractionResult } from './InteractionRoute';\n\n/**\n * Default implementation of the InteractionRoute.\n * See function comments for specifics.\n */\nexport class BasicInteractionRoute implements InteractionRoute {\n  public readonly route: RegExp;\n  public readonly handler: InteractionHandler;\n  public readonly viewTemplates: Record<string, string>;\n  public readonly prompt?: string;\n  public readonly responseTemplates: Record<string, string>;\n  public readonly controls: Record<string, string>;\n\n  /**\n   * @param route - Regex to match this route.\n   * @param viewTemplates - Templates to render on GET requests.\n   *                        Keys are content-types, values paths to a template.\n   * @param handler - Handler to call on POST requests.\n   * @param prompt - In case of requests to the IDP entry point, the session prompt will be compared to this.\n   * @param responseTemplates - Templates to render as a response to POST requests when required.\n   *                            Keys are content-types, values paths to a template.\n   * @param controls - Controls to add to the response JSON.\n   *                   The keys will be copied and the values will be converted to full URLs.\n   */\n  public constructor(route: string,\n    viewTemplates: Record<string, string>,\n    handler: InteractionHandler,\n    prompt?: string,\n    responseTemplates: Record<string, string> = {},\n    controls: Record<string, string> = {}) {\n    this.route = new RegExp(route, 'u');\n    this.viewTemplates = viewTemplates;\n    this.handler = handler;\n    this.prompt = prompt;\n    this.responseTemplates = responseTemplates;\n    this.controls = controls;\n  }\n\n  /**\n   * Returns the stored controls.\n   */\n  public getControls(): Record<string, string> {\n    return this.controls;\n  }\n\n  /**\n   * Checks support by comparing the prompt if the path targets the base URL,\n   * and otherwise comparing with the stored route regular expression.\n   */\n  public supportsPath(path: string, prompt?: string): boolean {\n    // In case the request targets the IDP entry point the prompt determines where to go\n    if (trimTrailingSlashes(path).length === 0 && prompt) {\n      return this.prompt === prompt;\n    }\n    return this.route.test(path);\n  }\n\n  /**\n   * GET requests return a default response result.\n   * POST requests return the InteractionHandler result.\n   * InteractionHandler errors will be converted into response results.\n   *\n   * All results will be appended with the matching template paths.\n   *\n   * Will error for other methods\n   */\n  public async handleOperation(operation: Operation, oidcInteraction?: Interaction):\n  Promise<TemplatedInteractionResult> {\n    switch (operation.method) {\n      case 'GET':\n        return { type: 'response', templateFiles: this.viewTemplates };\n      case 'POST':\n        try {\n          const result = await this.handler.handleSafe({ operation, oidcInteraction });\n          return { ...result, templateFiles: this.responseTemplates };\n        } catch (err: unknown) {\n          const error = isError(err) ? err : new InternalServerError(createErrorMessage(err));\n          // Potentially render the error in the view\n          return { type: 'error', error, templateFiles: this.viewTemplates };\n        }\n      default:\n        throw new BadRequestHttpError(`Unsupported request: ${operation.method} ${operation.target.path}`);\n    }\n  }\n}\n"]}