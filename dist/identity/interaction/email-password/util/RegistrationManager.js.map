{"version":3,"file":"RegistrationManager.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/util/RegistrationManager.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport type { ResourceIdentifier } from '../../../../http/representation/ResourceIdentifier';\nimport { getLoggerFor } from '../../../../logging/LogUtil';\nimport type { IdentifierGenerator } from '../../../../pods/generate/IdentifierGenerator';\nimport type { PodManager } from '../../../../pods/PodManager';\nimport type { PodSettings } from '../../../../pods/settings/PodSettings';\nimport { joinUrl } from '../../../../util/PathUtil';\nimport type { OwnershipValidator } from '../../../ownership/OwnershipValidator';\nimport { assertPassword } from '../EmailPasswordUtil';\nimport type { AccountSettings, AccountStore } from '../storage/AccountStore';\n\nexport interface RegistrationManagerArgs {\n  /**\n   * Used to set the `oidcIssuer` value of newly registered pods.\n   */\n  baseUrl: string;\n  /**\n   * Appended to the generated pod identifier to create the corresponding WebID.\n   */\n  webIdSuffix: string;\n  /**\n   * Generates identifiers for new pods.\n   */\n  identifierGenerator: IdentifierGenerator;\n  /**\n   * Verifies the user is the owner of the WebID they provide.\n   */\n  ownershipValidator: OwnershipValidator;\n  /**\n   * Stores all the registered account information.\n   */\n  accountStore: AccountStore;\n  /**\n   * Creates the new pods.\n   */\n  podManager: PodManager;\n}\n\n/**\n * The parameters expected for registration.\n */\nexport interface RegistrationParams {\n  email: string;\n  webId?: string;\n  password: string;\n  podName?: string;\n  template?: string;\n  createWebId: boolean;\n  register: boolean;\n  createPod: boolean;\n  rootPod: boolean;\n}\n\n/**\n * The result of a registration action.\n */\nexport interface RegistrationResponse {\n  email: string;\n  webId?: string;\n  oidcIssuer?: string;\n  podBaseUrl?: string;\n  createWebId: boolean;\n  register: boolean;\n  createPod: boolean;\n}\n\nconst emailRegex = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/u;\n\n/**\n * Supports IDP registration and pod creation based on input parameters.\n *\n * The above behaviour is combined in the two class functions.\n * `validateInput` will make sure all incoming data is correct and makes sense.\n * `register` will call all the correct handlers based on the requirements of the validated parameters.\n */\nexport class RegistrationManager {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly baseUrl: string;\n  private readonly webIdSuffix: string;\n  private readonly identifierGenerator: IdentifierGenerator;\n  private readonly ownershipValidator: OwnershipValidator;\n  private readonly accountStore: AccountStore;\n  private readonly podManager: PodManager;\n\n  public constructor(args: RegistrationManagerArgs) {\n    this.baseUrl = args.baseUrl;\n    this.webIdSuffix = args.webIdSuffix;\n    this.identifierGenerator = args.identifierGenerator;\n    this.ownershipValidator = args.ownershipValidator;\n    this.accountStore = args.accountStore;\n    this.podManager = args.podManager;\n  }\n\n  /**\n   * Trims the input if it is a string, returns `undefined` otherwise.\n   */\n  private trimString(input: unknown): string | undefined {\n    if (typeof input === 'string') {\n      return input.trim();\n    }\n  }\n\n  /**\n   * Makes sure the input conforms to the following requirements when relevant:\n   *  * At least one option needs to be chosen.\n   *  * In case a new WebID needs to be created, the other 2 steps will be set to true.\n   *  * Valid email/WebID/password/podName when required.\n   *  * Only create a root pod when allowed.\n   *\n   * @param input - Input parameters for the registration procedure.\n   * @param allowRoot - If creating a pod in the root container should be allowed.\n   *\n   * @returns A cleaned up version of the input parameters.\n   * Only (trimmed) parameters that are relevant to the registration procedure will be retained.\n   */\n  public validateInput(input: NodeJS.Dict<unknown>, allowRoot = false): RegistrationParams {\n    const {\n      email, password, confirmPassword, webId, podName, register, createPod, createWebId, template, rootPod,\n    } = input;\n\n    // Parse email\n    const trimmedEmail = this.trimString(email);\n    assert(trimmedEmail && emailRegex.test(trimmedEmail), 'Please enter a valid e-mail address.');\n\n    assertPassword(password, confirmPassword);\n\n    const validated: RegistrationParams = {\n      email: trimmedEmail,\n      password,\n      register: Boolean(register) || Boolean(createWebId),\n      createPod: Boolean(createPod) || Boolean(createWebId),\n      createWebId: Boolean(createWebId),\n      rootPod: Boolean(rootPod),\n    };\n    assert(validated.register || validated.createPod, 'Please register for a WebID or create a Pod.');\n    assert(allowRoot || !validated.rootPod, 'Creating a root pod is not supported.');\n\n    // Parse WebID\n    if (!validated.createWebId) {\n      const trimmedWebId = this.trimString(webId);\n      assert(trimmedWebId && /^https?:\\/\\/[^/]+/u.test(trimmedWebId), 'Please enter a valid WebID.');\n      validated.webId = trimmedWebId;\n    }\n\n    // Parse Pod name\n    if (validated.createPod && !validated.rootPod) {\n      const trimmedPodName = this.trimString(podName);\n      assert(trimmedPodName && trimmedPodName.length > 0, 'Please specify a Pod name.');\n      validated.podName = trimmedPodName;\n    }\n\n    // Parse template if there is one\n    if (template) {\n      validated.template = this.trimString(template);\n    }\n\n    return validated;\n  }\n\n  /**\n   * Handles the 3 potential steps of the registration process:\n   *  1. Generating a new WebID.\n   *  2. Registering a WebID with the IDP.\n   *  3. Creating a new pod for a given WebID.\n   *\n   * All of these steps are optional and will be determined based on the input parameters.\n   *\n   * This includes the following steps:\n   *  * Ownership will be verified when the WebID is provided.\n   *  * When registering and creating a pod, the base URL will be used as oidcIssuer value.\n   */\n  public async register(input: RegistrationParams, allowRoot = false): Promise<RegistrationResponse> {\n    // This is only used when createWebId and/or createPod are true\n    let podBaseUrl: ResourceIdentifier | undefined;\n    if (input.createPod) {\n      if (input.rootPod) {\n        podBaseUrl = { path: this.baseUrl };\n      } else {\n        podBaseUrl = this.identifierGenerator.generate(input.podName!);\n      }\n    }\n\n    // Create or verify the WebID\n    if (input.createWebId) {\n      input.webId = joinUrl(podBaseUrl!.path, this.webIdSuffix);\n    } else {\n      await this.ownershipValidator.handleSafe({ webId: input.webId! });\n    }\n\n    // Register the account\n    const settings: AccountSettings = {\n      useIdp: input.register,\n      podBaseUrl: podBaseUrl?.path,\n    };\n    await this.accountStore.create(input.email, input.webId!, input.password, settings);\n\n    // Create the pod\n    if (input.createPod) {\n      const podSettings: PodSettings = {\n        email: input.email,\n        webId: input.webId!,\n        template: input.template,\n        podBaseUrl: podBaseUrl!.path,\n      };\n\n      // Set the OIDC issuer to our server when registering with the IDP\n      if (input.register) {\n        podSettings.oidcIssuer = this.baseUrl;\n      }\n\n      try {\n        // Only allow overwrite for root pods\n        await this.podManager.createPod(podBaseUrl!, podSettings, allowRoot);\n      } catch (error: unknown) {\n        await this.accountStore.deleteAccount(input.email);\n        throw error;\n      }\n    }\n\n    // Verify the account\n    // This prevents there being a small timeframe where the account can be used before the pod creation is finished.\n    // That timeframe could potentially be used by malicious users.\n    await this.accountStore.verify(input.email);\n\n    return {\n      webId: input.webId,\n      email: input.email,\n      oidcIssuer: this.baseUrl,\n      podBaseUrl: podBaseUrl?.path,\n      createWebId: input.createWebId,\n      register: input.register,\n      createPod: input.createPod,\n    };\n  }\n}\n\n"]}