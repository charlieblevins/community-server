{"version":3,"file":"InteractionHandler.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/handler/InteractionHandler.ts"],"names":[],"mappings":";;;AAEA,gEAAiE;AACjE,6FAA0F;AAC1F,yEAAsE;AAmCtE;;;GAGG;AACH,MAAsB,kBAAmB,SAAQ,2BAA+D;IACvG,KAAK,CAAC,SAAS,CAAC,EAAE,SAAS,EAA2B;;QAC3D,IAAI,CAAA,MAAA,SAAS,CAAC,IAAI,0CAAE,QAAQ,CAAC,WAAW,MAAK,+BAAgB,EAAE;YAC7D,MAAM,IAAI,iDAAuB,CAAC,0CAA0C,CAAC,CAAC;SAC/E;IACH,CAAC;CACF;AAND,gDAMC","sourcesContent":["import type { KoaContextWithOIDC } from 'oidc-provider';\nimport type { Operation } from '../../../../http/Operation';\nimport { APPLICATION_JSON } from '../../../../util/ContentTypes';\nimport { NotImplementedHttpError } from '../../../../util/errors/NotImplementedHttpError';\nimport { AsyncHandler } from '../../../../util/handlers/AsyncHandler';\nimport type { InteractionCompleterParams } from '../../util/InteractionCompleter';\n\n// OIDC library does not directly export the Interaction type\nexport type Interaction = KoaContextWithOIDC['oidc']['entities']['Interaction'];\n\nexport interface InteractionHandlerInput {\n  /**\n   * The operation to execute\n   */\n  operation: Operation;\n  /**\n   * Will be defined if the OIDC library expects us to resolve an interaction it can't handle itself,\n   * such as logging a user in.\n   */\n  oidcInteraction?: Interaction;\n}\n\nexport type InteractionHandlerResult = InteractionResponseResult | InteractionCompleteResult | InteractionErrorResult;\n\nexport interface InteractionResponseResult<T = NodeJS.Dict<any>> {\n  type: 'response';\n  details?: T;\n}\n\nexport interface InteractionCompleteResult {\n  type: 'complete';\n  details: InteractionCompleterParams;\n}\n\nexport interface InteractionErrorResult {\n  type: 'error';\n  error: Error;\n}\n\n/**\n * Handler used for IDP interactions.\n * Only supports JSON data.\n */\nexport abstract class InteractionHandler extends AsyncHandler<InteractionHandlerInput, InteractionHandlerResult> {\n  public async canHandle({ operation }: InteractionHandlerInput): Promise<void> {\n    if (operation.body?.metadata.contentType !== APPLICATION_JSON) {\n      throw new NotImplementedHttpError('Only application/json data is supported.');\n    }\n  }\n}\n"]}