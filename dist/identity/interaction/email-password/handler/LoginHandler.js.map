{"version":3,"file":"LoginHandler.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/handler/LoginHandler.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAE5B,yDAA2D;AAC3D,qFAAkF;AAClF,4DAA6D;AAE7D,6DAA0D;AAG1D;;GAEG;AACH,MAAa,YAAa,SAAQ,uCAAkB;IAKlD,YAAmB,YAA0B;QAC3C,KAAK,EAAE,CAAC;QALS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAM7C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAA2B;QACxD,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QACvE,qEAAqE;QACrE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACpE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC5D,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACpB,sEAAsE;YACtE,MAAM,IAAI,yCAAmB,CAAC,2DAA2D,CAAC,CAAC;SAC5F;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,KAAK,EAAE,CAAC,CAAC;QAC9C,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,QAAQ,EAAE;SAC7C,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,UAAU,CAAC,SAAoB;QAC3C,MAAM,SAAS,GAA2B,EAAE,CAAC;QAC7C,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,2BAAc,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChF,gBAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC;QACxE,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;QACxB,gBAAM,CAAC,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,mBAAmB,CAAC,CAAC;QACjF,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;IAC1D,CAAC;CACF;AAvCD,oCAuCC","sourcesContent":["import assert from 'assert';\nimport type { Operation } from '../../../../http/Operation';\nimport { getLoggerFor } from '../../../../logging/LogUtil';\nimport { BadRequestHttpError } from '../../../../util/errors/BadRequestHttpError';\nimport { readJsonStream } from '../../../../util/StreamUtil';\nimport type { AccountStore } from '../storage/AccountStore';\nimport { InteractionHandler } from './InteractionHandler';\nimport type { InteractionCompleteResult, InteractionHandlerInput } from './InteractionHandler';\n\n/**\n * Handles the submission of the Login Form and logs the user in.\n */\nexport class LoginHandler extends InteractionHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly accountStore: AccountStore;\n\n  public constructor(accountStore: AccountStore) {\n    super();\n    this.accountStore = accountStore;\n  }\n\n  public async handle({ operation }: InteractionHandlerInput): Promise<InteractionCompleteResult> {\n    const { email, password, remember } = await this.parseInput(operation);\n    // Try to log in, will error if email/password combination is invalid\n    const webId = await this.accountStore.authenticate(email, password);\n    const settings = await this.accountStore.getSettings(webId);\n    if (!settings.useIdp) {\n      // There is an account but is not used for identification with the IDP\n      throw new BadRequestHttpError('This server is not an identity provider for this account.');\n    }\n    this.logger.debug(`Logging in user ${email}`);\n    return {\n      type: 'complete',\n      details: { webId, shouldRemember: remember },\n    };\n  }\n\n  /**\n   * Parses and validates the input form data.\n   * Will throw an error in case something is wrong.\n   * All relevant data that was correct up to that point will be prefilled.\n   */\n  private async parseInput(operation: Operation): Promise<{ email: string; password: string; remember: boolean }> {\n    const prefilled: Record<string, string> = {};\n    const { email, password, remember } = await readJsonStream(operation.body.data);\n    assert(typeof email === 'string' && email.length > 0, 'Email required');\n    prefilled.email = email;\n    assert(typeof password === 'string' && password.length > 0, 'Password required');\n    return { email, password, remember: Boolean(remember) };\n  }\n}\n"]}