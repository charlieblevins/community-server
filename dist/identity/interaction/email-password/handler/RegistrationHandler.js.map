{"version":3,"file":"RegistrationHandler.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/handler/RegistrationHandler.ts"],"names":[],"mappings":";;;AAAA,yDAA2D;AAC3D,4DAA6D;AAG7D,6DAA0D;AAE1D;;GAEG;AACH,MAAa,mBAAoB,SAAQ,uCAAkB;IAKzD,YAAmB,mBAAwC;QACzD,KAAK,EAAE,CAAC;QALS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAM7C,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IACjD,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAA2B;QAExD,MAAM,IAAI,GAAG,MAAM,2BAAc,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACtE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC1E,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC;IACvC,CAAC;CACF;AAjBD,kDAiBC","sourcesContent":["import { getLoggerFor } from '../../../../logging/LogUtil';\nimport { readJsonStream } from '../../../../util/StreamUtil';\nimport type { RegistrationManager, RegistrationResponse } from '../util/RegistrationManager';\nimport type { InteractionResponseResult, InteractionHandlerInput } from './InteractionHandler';\nimport { InteractionHandler } from './InteractionHandler';\n\n/**\n * Supports registration based on the `RegistrationManager` behaviour.\n */\nexport class RegistrationHandler extends InteractionHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly registrationManager: RegistrationManager;\n\n  public constructor(registrationManager: RegistrationManager) {\n    super();\n    this.registrationManager = registrationManager;\n  }\n\n  public async handle({ operation }: InteractionHandlerInput):\n  Promise<InteractionResponseResult<RegistrationResponse>> {\n    const data = await readJsonStream(operation.body.data);\n    const validated = this.registrationManager.validateInput(data, false);\n    const details = await this.registrationManager.register(validated, false);\n    return { type: 'response', details };\n  }\n}\n"]}