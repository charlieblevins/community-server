{"version":3,"file":"ForgotPasswordHandler.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/handler/ForgotPasswordHandler.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAC5B,yDAA2D;AAC3D,wDAAyE;AACzE,4DAA6D;AAI7D,6DAA0D;AAW1D;;GAEG;AACH,MAAa,qBAAsB,SAAQ,uCAAkB;IAS3D,YAAmB,IAA+B;QAChD,KAAK,EAAE,CAAC;QATS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAU7C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,IAAI,CAAC,OAAO,GAAG,8BAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;IACtC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAA2B;QACxD,yBAAyB;QACzB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,2BAAc,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5D,gBAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC;QAExE,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAChC,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,EAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,aAAa,CAAC,KAAa;QACvC,IAAI,QAAgB,CAAC;QACrB,IAAI;YACF,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;SACxE;QAAC,MAAM;YACN,0CAA0C;YAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4CAA4C,KAAK,EAAE,CAAC,CAAC;YACtE,OAAO;SACR;QACD,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,aAAa,CAAC,QAAgB,EAAE,KAAa;QACzD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6BAA6B,KAAK,EAAE,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,kBAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,iBAAiB,QAAQ,EAAE,CAAC,CAAC;QACnF,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;QACtE,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;YAChC,SAAS,EAAE,KAAK;YAChB,OAAO,EAAE,qBAAqB;YAC9B,IAAI,EAAE,4CAA4C,SAAS,EAAE;YAC7D,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;IACL,CAAC;CACF;AA1DD,sDA0DC","sourcesContent":["import assert from 'assert';\nimport { getLoggerFor } from '../../../../logging/LogUtil';\nimport { ensureTrailingSlash, joinUrl } from '../../../../util/PathUtil';\nimport { readJsonStream } from '../../../../util/StreamUtil';\nimport type { TemplateEngine } from '../../../../util/templates/TemplateEngine';\nimport type { EmailSender } from '../../util/EmailSender';\nimport type { AccountStore } from '../storage/AccountStore';\nimport { InteractionHandler } from './InteractionHandler';\nimport type { InteractionResponseResult, InteractionHandlerInput } from './InteractionHandler';\n\nexport interface ForgotPasswordHandlerArgs {\n  accountStore: AccountStore;\n  baseUrl: string;\n  idpPath: string;\n  templateEngine: TemplateEngine<{ resetLink: string }>;\n  emailSender: EmailSender;\n}\n\n/**\n * Handles the submission of the ForgotPassword form\n */\nexport class ForgotPasswordHandler extends InteractionHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly accountStore: AccountStore;\n  private readonly baseUrl: string;\n  private readonly idpPath: string;\n  private readonly templateEngine: TemplateEngine<{ resetLink: string }>;\n  private readonly emailSender: EmailSender;\n\n  public constructor(args: ForgotPasswordHandlerArgs) {\n    super();\n    this.accountStore = args.accountStore;\n    this.baseUrl = ensureTrailingSlash(args.baseUrl);\n    this.idpPath = args.idpPath;\n    this.templateEngine = args.templateEngine;\n    this.emailSender = args.emailSender;\n  }\n\n  public async handle({ operation }: InteractionHandlerInput): Promise<InteractionResponseResult<{ email: string }>> {\n    // Validate incoming data\n    const { email } = await readJsonStream(operation.body.data);\n    assert(typeof email === 'string' && email.length > 0, 'Email required');\n\n    await this.resetPassword(email);\n    return { type: 'response', details: { email }};\n  }\n\n  /**\n   * Generates a record to reset the password for the given email address and then mails it.\n   * In case there is no account, no error wil be thrown for privacy reasons.\n   * Instead nothing will happen instead.\n   */\n  private async resetPassword(email: string): Promise<void> {\n    let recordId: string;\n    try {\n      recordId = await this.accountStore.generateForgotPasswordRecord(email);\n    } catch {\n      // Don't emit an error for privacy reasons\n      this.logger.warn(`Password reset request for unknown email ${email}`);\n      return;\n    }\n    await this.sendResetMail(recordId, email);\n  }\n\n  /**\n   * Generates the link necessary for resetting the password and mails it to the given email address.\n   */\n  private async sendResetMail(recordId: string, email: string): Promise<void> {\n    this.logger.info(`Sending password reset to ${email}`);\n    const resetLink = joinUrl(this.baseUrl, this.idpPath, `resetpassword/${recordId}`);\n    const renderedEmail = await this.templateEngine.render({ resetLink });\n    await this.emailSender.handleSafe({\n      recipient: email,\n      subject: 'Reset your password',\n      text: `To reset your password, go to this link: ${resetLink}`,\n      html: renderedEmail,\n    });\n  }\n}\n"]}