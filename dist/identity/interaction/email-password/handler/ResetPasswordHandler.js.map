{"version":3,"file":"ResetPasswordHandler.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/handler/ResetPasswordHandler.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAC5B,yDAA2D;AAC3D,4DAA6D;AAC7D,4DAAsD;AAGtD,6DAA0D;AAE1D;;;GAGG;AACH,MAAa,oBAAqB,SAAQ,uCAAkB;IAK1D,YAAmB,YAA0B;QAC3C,KAAK,EAAE,CAAC;QALS,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAM7C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,SAAS,EAA2B;;QACxD,qCAAqC;QACrC,MAAM,QAAQ,GAAG,MAAA,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,0CAAG,CAAC,CAAC,CAAC;QAChE,sBAAsB;QACtB,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,MAAM,2BAAc,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChF,gBAAM,CACJ,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EACnD,sDAAsD,CACvD,CAAC;QACF,kCAAc,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;QAE1C,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC7C,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;IAC9B,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,aAAa,CAAC,QAAgB,EAAE,WAAmB;QAC/D,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACxE,gBAAM,CAAC,KAAK,EAAE,8CAA8C,CAAC,CAAC;QAC9D,MAAM,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;QAC7D,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,KAAK,EAAE,CAAC,CAAC;IAC5D,CAAC;CACF;AAnCD,oDAmCC","sourcesContent":["import assert from 'assert';\nimport { getLoggerFor } from '../../../../logging/LogUtil';\nimport { readJsonStream } from '../../../../util/StreamUtil';\nimport { assertPassword } from '../EmailPasswordUtil';\nimport type { AccountStore } from '../storage/AccountStore';\nimport type { InteractionResponseResult, InteractionHandlerInput } from './InteractionHandler';\nimport { InteractionHandler } from './InteractionHandler';\n\n/**\n * Handles the submission of the ResetPassword form:\n * this is the form that is linked in the reset password email.\n */\nexport class ResetPasswordHandler extends InteractionHandler {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly accountStore: AccountStore;\n\n  public constructor(accountStore: AccountStore) {\n    super();\n    this.accountStore = accountStore;\n  }\n\n  public async handle({ operation }: InteractionHandlerInput): Promise<InteractionResponseResult> {\n    // Extract record ID from request URL\n    const recordId = /\\/([^/]+)$/u.exec(operation.target.path)?.[1];\n    // Validate input data\n    const { password, confirmPassword } = await readJsonStream(operation.body.data);\n    assert(\n      typeof recordId === 'string' && recordId.length > 0,\n      'Invalid request. Open the link from your email again',\n    );\n    assertPassword(password, confirmPassword);\n\n    await this.resetPassword(recordId, password);\n    return { type: 'response' };\n  }\n\n  /**\n   * Resets the password for the account associated with the given recordId.\n   */\n  private async resetPassword(recordId: string, newPassword: string): Promise<void> {\n    const email = await this.accountStore.getForgotPasswordRecord(recordId);\n    assert(email, 'This reset password link is no longer valid.');\n    await this.accountStore.deleteForgotPasswordRecord(recordId);\n    await this.accountStore.changePassword(email, newPassword);\n    this.logger.debug(`Resetting password for user ${email}`);\n  }\n}\n"]}