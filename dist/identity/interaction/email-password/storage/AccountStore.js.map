{"version":3,"file":"AccountStore.js","sourceRoot":"","sources":["../../../../../src/identity/interaction/email-password/storage/AccountStore.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Options that can be set on an account.\n */\nexport interface AccountSettings {\n  /**\n   * If this account can be used to identify as the corresponding WebID in the IDP.\n   */\n  useIdp: boolean;\n  /**\n   * The base URL of the pod associated with this account, if there is one.\n   */\n  podBaseUrl?: string;\n}\n\n/**\n * Storage needed for the email-password interaction\n */\nexport interface AccountStore {\n  /**\n   * Authenticate if the username and password are correct and return the WebID\n   * if it is. Throw an error if it is not.\n   * @param email - The user's email.\n   * @param password - This user's password.\n   * @returns The user's WebID.\n   */\n  authenticate: (email: string, password: string) => Promise<string>;\n\n  /**\n   * Creates a new account.\n   * @param email - Account email.\n   * @param webId - Account WebID.\n   * @param password - Account password.\n   * @param settings - Specific settings for the account.\n   */\n  create: (email: string, webId: string, password: string, settings: AccountSettings) => Promise<void>;\n\n  /**\n   * Verifies the account creation. This can be used with, for example, e-mail verification.\n   * The account can only be used after it is verified.\n   * In case verification is not required, this should be called immediately after the `create` call.\n   * @param email - The account email.\n   */\n  verify: (email: string) => Promise<void>;\n\n  /**\n   * Changes the password.\n   * @param email - The user's email.\n   * @param password - The user's password.\n   */\n  changePassword: (email: string, password: string) => Promise<void>;\n\n  /**\n   * Gets the settings associated with this account.\n   * Errors if there is no matching account.\n   * @param webId - The account WebID.\n   */\n  getSettings: (webId: string) => Promise<AccountSettings>;\n\n  /**\n   * Updates the settings associated with this account.\n   * @param webId - The account WebID.\n   * @param settings - New settings for the account.\n   */\n  updateSettings: (webId: string, settings: AccountSettings) => Promise<void>;\n\n  /**\n   * Delete the account.\n   * @param email - The user's email.\n   */\n  deleteAccount: (email: string) => Promise<void>;\n\n  /**\n   * Creates a Forgot Password Confirmation Record. This will be to remember that\n   * a user has made a request to reset a password. Throws an error if the email doesn't\n   * exist\n   * @param email - The user's email.\n   * @returns The record id. This should be included in the reset password link.\n   */\n  generateForgotPasswordRecord: (email: string) => Promise<string>;\n\n  /**\n   * Gets the email associated with the forgot password confirmation record or undefined\n   * if it's not present\n   * @param recordId - The record id retrieved from the link.\n   * @returns The user's email.\n   */\n  getForgotPasswordRecord: (recordId: string) => Promise<string | undefined>;\n\n  /**\n   * Deletes the Forgot Password Confirmation Record\n   * @param recordId - The record id of the forgot password confirmation record.\n   */\n  deleteForgotPasswordRecord: (recordId: string) => Promise<void>;\n}\n"]}