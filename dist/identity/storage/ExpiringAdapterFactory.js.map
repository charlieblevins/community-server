{"version":3,"file":"ExpiringAdapterFactory.js","sourceRoot":"","sources":["../../../src/identity/storage/ExpiringAdapterFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Adapter, AdapterPayload } from 'oidc-provider';\nimport { getLoggerFor } from '../../logging/LogUtil';\nimport type { ExpiringStorage } from '../../storage/keyvalue/ExpiringStorage';\nimport type { AdapterFactory } from './AdapterFactory';\n\n/**\n * An IDP storage adapter that uses an ExpiringStorage\n * to persist data.\n */\nexport class ExpiringAdapter implements Adapter {\n  protected readonly logger = getLoggerFor(this);\n\n  private readonly name: string;\n  private readonly storage: ExpiringStorage<string, unknown>;\n\n  public constructor(name: string, storage: ExpiringStorage<string, unknown>) {\n    this.name = name;\n    this.storage = storage;\n  }\n\n  private grantKeyFor(id: string): string {\n    return `grant/${encodeURIComponent(id)}`;\n  }\n\n  private userCodeKeyFor(userCode: string): string {\n    return `user_code/${encodeURIComponent(userCode)}`;\n  }\n\n  private uidKeyFor(uid: string): string {\n    return `uid/${encodeURIComponent(uid)}`;\n  }\n\n  private keyFor(id: string): string {\n    return `${this.name}/${encodeURIComponent(id)}`;\n  }\n\n  public async upsert(id: string, payload: AdapterPayload, expiresIn?: number): Promise<void> {\n    // Despite what the typings say, `expiresIn` can be undefined\n    const expiration = expiresIn ? expiresIn * 1000 : undefined;\n    const key = this.keyFor(id);\n\n    this.logger.debug(`Storing payload data for ${id}`);\n\n    const storagePromises: Promise<unknown>[] = [\n      this.storage.set(key, payload, expiration),\n    ];\n    if (payload.grantId) {\n      storagePromises.push(\n        (async(): Promise<void> => {\n          const grantKey = this.grantKeyFor(payload.grantId!);\n          const grants = (await this.storage.get(grantKey) || []) as string[];\n          grants.push(key);\n          await this.storage.set(grantKey, grants, expiration);\n        })(),\n      );\n    }\n    if (payload.userCode) {\n      storagePromises.push(this.storage.set(this.userCodeKeyFor(payload.userCode), id, expiration));\n    }\n    if (payload.uid) {\n      storagePromises.push(this.storage.set(this.uidKeyFor(payload.uid), id, expiration));\n    }\n    await Promise.all(storagePromises);\n  }\n\n  public async find(id: string): Promise<AdapterPayload | void> {\n    return await this.storage.get(this.keyFor(id)) as AdapterPayload | undefined;\n  }\n\n  public async findByUserCode(userCode: string): Promise<AdapterPayload | void> {\n    const id = await this.storage.get(this.userCodeKeyFor(userCode)) as string;\n    return this.find(id);\n  }\n\n  public async findByUid(uid: string): Promise<AdapterPayload | void> {\n    const id = await this.storage.get(this.uidKeyFor(uid)) as string;\n    return this.find(id);\n  }\n\n  public async destroy(id: string): Promise<void> {\n    await this.storage.delete(this.keyFor(id));\n  }\n\n  public async revokeByGrantId(grantId: string): Promise<void> {\n    this.logger.debug(`Revoking grantId ${grantId}`);\n    const grantKey = this.grantKeyFor(grantId);\n    const grants = await this.storage.get(grantKey) as string[] | undefined;\n    if (!grants) {\n      return;\n    }\n    const deletePromises: Promise<unknown>[] = [];\n    grants.forEach((grant): void => {\n      deletePromises.push(this.storage.delete(grant));\n    });\n    deletePromises.push(this.storage.delete(grantKey));\n    await Promise.all(deletePromises);\n  }\n\n  public async consume(id: string): Promise<void> {\n    const payload = await this.find(id);\n    if (!payload) {\n      return;\n    }\n    payload.consumed = Math.floor(Date.now() / 1000);\n    await this.storage.set(this.keyFor(id), payload);\n  }\n}\n\n/**\n * The factory for a ExpiringStorageAdapter\n */\nexport class ExpiringAdapterFactory implements AdapterFactory {\n  private readonly storage: ExpiringStorage<string, unknown>;\n\n  public constructor(storage: ExpiringStorage<string, unknown>) {\n    this.storage = storage;\n  }\n\n  public createStorageAdapter(name: string): ExpiringAdapter {\n    return new ExpiringAdapter(name, this.storage);\n  }\n}\n"]}