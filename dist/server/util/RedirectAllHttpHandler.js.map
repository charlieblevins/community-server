{"version":3,"file":"RedirectAllHttpHandler.js","sourceRoot":"","sources":["../../../src/server/util/RedirectAllHttpHandler.ts"],"names":[],"mappings":";;;AACA,wGAAqG;AAErG,uFAAoF;AACpF,kDAA8D;AAE9D,gDAA6C;AAS7C;;;;GAIG;AACH,MAAa,sBAAuB,SAAQ,yBAAW;IAMrD,YAAmB,IAAgC;QACjD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAC5C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,OAAO,EAAoB;QAClD,MAAM,MAAM,GAAG,MAAM,yBAAc,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACjF,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;YAC1B,MAAM,IAAI,iDAAuB,CAAC,4BAA4B,CAAC,CAAC;SACjE;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAoB;QAChD,MAAM,MAAM,GAAG,IAAI,yDAA2B,CAAC,kBAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACnF,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;IAC7D,CAAC;CACF;AAzBD,wDAyBC","sourcesContent":["import type { TargetExtractor } from '../../http/input/identifier/TargetExtractor';\nimport { RedirectResponseDescription } from '../../http/output/response/RedirectResponseDescription';\nimport type { ResponseWriter } from '../../http/output/ResponseWriter';\nimport { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';\nimport { getRelativeUrl, joinUrl } from '../../util/PathUtil';\nimport type { HttpHandlerInput } from '../HttpHandler';\nimport { HttpHandler } from '../HttpHandler';\n\nexport interface RedirectAllHttpHandlerArgs {\n  baseUrl: string;\n  target: string;\n  targetExtractor: TargetExtractor;\n  responseWriter: ResponseWriter;\n}\n\n/**\n * Will redirect all incoming requests to the given target.\n * In case the incoming request already has the correct target,\n * the `canHandle` call will reject the input.\n */\nexport class RedirectAllHttpHandler extends HttpHandler {\n  private readonly baseUrl: string;\n  private readonly target: string;\n  private readonly targetExtractor: TargetExtractor;\n  private readonly responseWriter: ResponseWriter;\n\n  public constructor(args: RedirectAllHttpHandlerArgs) {\n    super();\n    this.baseUrl = args.baseUrl;\n    this.target = args.target;\n    this.targetExtractor = args.targetExtractor;\n    this.responseWriter = args.responseWriter;\n  }\n\n  public async canHandle({ request }: HttpHandlerInput): Promise<void> {\n    const target = await getRelativeUrl(this.baseUrl, request, this.targetExtractor);\n    if (target === this.target) {\n      throw new NotImplementedHttpError('Target is already correct.');\n    }\n  }\n\n  public async handle({ response }: HttpHandlerInput): Promise<void> {\n    const result = new RedirectResponseDescription(joinUrl(this.baseUrl, this.target));\n    await this.responseWriter.handleSafe({ response, result });\n  }\n}\n"]}