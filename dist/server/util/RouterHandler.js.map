{"version":3,"file":"RouterHandler.js","sourceRoot":"","sources":["../../../src/server/util/RouterHandler.ts"],"names":[],"mappings":";;;AACA,+EAA4E;AAC5E,2FAAwF;AACxF,2EAAwE;AACxE,kDAA0E;AAE1E,gDAA6C;AAU7C;;;;;GAKG;AACH,MAAa,aAAc,SAAQ,yBAAW;IAQ5C,YAAmB,IAAuB;QACxC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,8BAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACpD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAE,EAAU,EAAE,CAAC,IAAI,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;IAC9F,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAAuB;QAC5C,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;YAChB,MAAM,IAAI,yCAAmB,CAAC,qCAAqC,CAAC,CAAC;SACtE;QACD,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACnB,MAAM,IAAI,yCAAmB,CAAC,wCAAwC,CAAC,CAAC;SACzE;QACD,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACrE,MAAM,IAAI,qDAAyB,CAAC,GAAG,OAAO,CAAC,MAAM,kBAAkB,CAAC,CAAC;SAC1E;QACD,MAAM,QAAQ,GAAG,MAAM,yBAAc,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACnF,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,KAAK,EAAW,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE;YAC9E,MAAM,IAAI,qCAAiB,CAAC,uBAAuB,QAAQ,EAAE,CAAC,CAAC;SAChE;QACD,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAuB;QACzC,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;CACF;AAvCD,sCAuCC","sourcesContent":["import type { TargetExtractor } from '../../http/input/identifier/TargetExtractor';\nimport { BadRequestHttpError } from '../../util/errors/BadRequestHttpError';\nimport { MethodNotAllowedHttpError } from '../../util/errors/MethodNotAllowedHttpError';\nimport { NotFoundHttpError } from '../../util/errors/NotFoundHttpError';\nimport { ensureTrailingSlash, getRelativeUrl } from '../../util/PathUtil';\nimport type { HttpHandlerInput } from '../HttpHandler';\nimport { HttpHandler } from '../HttpHandler';\n\nexport interface RouterHandlerArgs {\n  baseUrl: string;\n  targetExtractor: TargetExtractor;\n  handler: HttpHandler;\n  allowedMethods: string[];\n  allowedPathNames: string[];\n}\n\n/**\n * An HttpHandler that checks if a given method and path are satisfied\n * and allows its handler to be executed if so.\n *\n * If `allowedMethods` contains '*' it will match all methods.\n */\nexport class RouterHandler extends HttpHandler {\n  private readonly baseUrl: string;\n  private readonly targetExtractor: TargetExtractor;\n  private readonly handler: HttpHandler;\n  private readonly allowedMethods: string[];\n  private readonly allMethods: boolean;\n  private readonly allowedPathNamesRegEx: RegExp[];\n\n  public constructor(args: RouterHandlerArgs) {\n    super();\n    this.baseUrl = ensureTrailingSlash(args.baseUrl);\n    this.targetExtractor = args.targetExtractor;\n    this.handler = args.handler;\n    this.allowedMethods = args.allowedMethods;\n    this.allMethods = args.allowedMethods.includes('*');\n    this.allowedPathNamesRegEx = args.allowedPathNames.map((pn): RegExp => new RegExp(pn, 'u'));\n  }\n\n  public async canHandle(input: HttpHandlerInput): Promise<void> {\n    const { request } = input;\n    if (!request.url) {\n      throw new BadRequestHttpError('Cannot handle request without a url');\n    }\n    if (!request.method) {\n      throw new BadRequestHttpError('Cannot handle request without a method');\n    }\n    if (!this.allMethods && !this.allowedMethods.includes(request.method)) {\n      throw new MethodNotAllowedHttpError(`${request.method} is not allowed.`);\n    }\n    const pathName = await getRelativeUrl(this.baseUrl, request, this.targetExtractor);\n    if (!this.allowedPathNamesRegEx.some((regex): boolean => regex.test(pathName))) {\n      throw new NotFoundHttpError(`Cannot handle route ${pathName}`);\n    }\n    await this.handler.canHandle(input);\n  }\n\n  public async handle(input: HttpHandlerInput): Promise<void> {\n    await this.handler.handle(input);\n  }\n}\n"]}