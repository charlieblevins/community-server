{"version":3,"file":"BaseHttpServerFactory.js","sourceRoot":"","sources":["../../src/server/BaseHttpServerFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFileSync } from 'fs';\nimport type { Server, IncomingMessage, ServerResponse } from 'http';\nimport { createServer as createHttpServer } from 'http';\nimport { createServer as createHttpsServer } from 'https';\nimport { URL } from 'url';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport { isError } from '../util/errors/ErrorUtil';\nimport { guardStream } from '../util/GuardedStream';\nimport type { HttpHandler } from './HttpHandler';\nimport type { HttpServerFactory } from './HttpServerFactory';\n\n/**\n * Options to be used when creating the server.\n * Due to Components.js not supporting external types, this has been simplified (for now?).\n * The common https keys here (key/cert/pfx) will be interpreted as file paths that need to be read\n * before passing the options to the `createServer` function.\n */\nexport interface BaseHttpServerOptions {\n  /**\n   * If the server should start as an http or https server.\n   */\n  https?: boolean;\n\n  /**\n   * If the error stack traces should be shown in case the HttpHandler throws one.\n   */\n  showStackTrace?: boolean;\n\n  key?: string;\n  cert?: string;\n\n  pfx?: string;\n  passphrase?: string;\n}\n\n/**\n * HttpServerFactory based on the native Node.js http module\n */\nexport class BaseHttpServerFactory implements HttpServerFactory {\n  protected readonly logger = getLoggerFor(this);\n\n  /** The main HttpHandler */\n  private readonly handler: HttpHandler;\n  private readonly options: BaseHttpServerOptions;\n\n  public constructor(handler: HttpHandler, options: BaseHttpServerOptions = { https: false }) {\n    this.handler = handler;\n    this.options = { ...options };\n  }\n\n  /**\n   * Creates and starts an HTTP(S) server\n   * @param port - Port on which the server listens\n   */\n  public startServer(port: number): Server {\n    const protocol = this.options.https ? 'https' : 'http';\n    const url = new URL(`${protocol}://localhost:${port}/`).href;\n    this.logger.info(`Starting server at ${url}`);\n\n    const createServer = this.options.https ? createHttpsServer : createHttpServer;\n    const options = this.createServerOptions();\n\n    const server = createServer(options,\n      async(request: IncomingMessage, response: ServerResponse): Promise<void> => {\n        try {\n          this.logger.info(`Received ${request.method} request for ${request.url}`);\n          await this.handler.handleSafe({ request: guardStream(request), response });\n        } catch (error: unknown) {\n          let errMsg: string;\n          if (!isError(error)) {\n            errMsg = `Unknown error: ${error}.\\n`;\n          } else if (this.options.showStackTrace && error.stack) {\n            errMsg = `${error.stack}\\n`;\n          } else {\n            errMsg = `${error.name}: ${error.message}\\n`;\n          }\n          this.logger.error(errMsg);\n          if (response.headersSent) {\n            response.end();\n          } else {\n            response.setHeader('Content-Type', 'text/plain; charset=utf-8');\n            response.writeHead(500).end(errMsg);\n          }\n        } finally {\n          if (!response.headersSent) {\n            response.writeHead(404).end();\n          }\n        }\n      });\n\n    return server.listen(port);\n  }\n\n  private createServerOptions(): BaseHttpServerOptions {\n    const options = { ...this.options };\n    for (const id of [ 'key', 'cert', 'pfx' ] as const) {\n      const val = options[id];\n      if (val) {\n        options[id] = readFileSync(val, 'utf8');\n      }\n    }\n    return options;\n  }\n}\n"]}