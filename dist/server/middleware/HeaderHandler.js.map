{"version":3,"file":"HeaderHandler.js","sourceRoot":"","sources":["../../../src/server/middleware/HeaderHandler.ts"],"names":[],"mappings":";;;AAAA,gDAA6C;AAG7C;;GAEG;AACH,MAAa,aAAc,SAAQ,yBAAW;IAG5C,YAAmB,OAA+B;QAChD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,OAAO,EAAE,CAAC;IAChC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,EAAE,QAAQ,EAA8B;QAC1D,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAC9C,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;SAClD;IACH,CAAC;CACF;AAbD,sCAaC","sourcesContent":["import { HttpHandler } from '../HttpHandler';\nimport type { HttpResponse } from '../HttpResponse';\n\n/**\n * Handler that sets custom headers on the response.\n */\nexport class HeaderHandler extends HttpHandler {\n  private readonly headers: Record<string, string>;\n\n  public constructor(headers: Record<string, string>) {\n    super();\n    this.headers = { ...headers };\n  }\n\n  public async handle({ response }: { response: HttpResponse }): Promise<void> {\n    for (const header of Object.keys(this.headers)) {\n      response.setHeader(header, this.headers[header]);\n    }\n  }\n}\n"]}