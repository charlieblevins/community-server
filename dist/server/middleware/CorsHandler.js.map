{"version":3,"file":"CorsHandler.js","sourceRoot":"","sources":["../../../src/server/middleware/CorsHandler.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AAGxB,gDAA6C;AAE7C,MAAM,cAAc,GAAgB;IAClC,MAAM,EAAE,CAAC,MAAW,EAAE,QAAa,EAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,GAAG,CAAC;CAC5E,CAAC;AAcF;;;;;;;;GAQG;AACH,MAAa,WAAY,SAAQ,yBAAW;IAW1C,YAAmB,UAA6B,EAAE;QAChD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,cAAI,CAAC,EAAE,GAAG,cAAc,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;IAC7D,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAuB;QACzC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAQ,EAAE;YACnC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAc,EAAE,KAAK,CAAC,QAAe,EAAE,GAAS,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AArBD,kCAqBC","sourcesContent":["import cors from 'cors';\nimport type { CorsOptions, CorsRequest } from 'cors';\nimport type { HttpHandlerInput } from '../HttpHandler';\nimport { HttpHandler } from '../HttpHandler';\n\nconst defaultOptions: CorsOptions = {\n  origin: (origin: any, callback: any): void => callback(null, origin ?? '*'),\n};\n\n// Components.js does not support the full CorsOptions yet\ninterface SimpleCorsOptions {\n  origin?: string;\n  methods?: string[];\n  allowedHeaders?: string[];\n  exposedHeaders?: string[];\n  credentials?: boolean;\n  maxAge?: number;\n  preflightContinue?: boolean;\n  optionsSuccessStatus?: number;\n}\n\n/**\n * Handler that sets CORS options on the response.\n * In case of an OPTIONS request this handler will close the connection after adding its headers.\n *\n * Solid, ยง7.1: \"A data pod MUST implement the CORS protocol [FETCH] such that, to the extent possible,\n * the browser allows Solid apps to send any request and combination of request headers to the data pod,\n * and the Solid app can read any response and response headers received from the data pod.\"\n * Full details: https://solid.github.io/specification/protocol#cors-server\n */\nexport class CorsHandler extends HttpHandler {\n  private readonly corsHandler: (\n    req: CorsRequest,\n    res: {\n      statusCode?: number;\n      setHeader: (key: string, value: string) => any;\n      end: () => any;\n    },\n    next: (err?: any) => any,\n  ) => void;\n\n  public constructor(options: SimpleCorsOptions = {}) {\n    super();\n    this.corsHandler = cors({ ...defaultOptions, ...options });\n  }\n\n  public async handle(input: HttpHandlerInput): Promise<void> {\n    return new Promise((resolve): void => {\n      this.corsHandler(input.request as any, input.response as any, (): void => resolve());\n    });\n  }\n}\n"]}