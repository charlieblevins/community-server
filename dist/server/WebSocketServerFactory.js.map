{"version":3,"file":"WebSocketServerFactory.js","sourceRoot":"","sources":["../../src/server/WebSocketServerFactory.ts"],"names":[],"mappings":";;;AAGA,2BAA+C;AAK/C;;GAEG;AACH,MAAa,sBAAsB;IAIjC,YAAmB,iBAAoC,EAAE,gBAAkC;QACzF,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAEM,WAAW,CAAC,IAAY;QAC7B,0BAA0B;QAC1B,MAAM,eAAe,GAAG,IAAI,WAAe,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAChE,eAAe,CAAC,EAAE,CAAC,YAAY,EAAE,KAAK,EAAC,SAAoB,EAAE,cAA2B,EAAiB,EAAE;YACzG,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,0BAA0B;QAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC5D,UAAU,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,cAA2B,EAAE,MAAc,EAAE,IAAY,EAAQ,EAAE;YAC3F,eAAe,CAAC,aAAa,CAAC,cAAc,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,SAAoB,EAAQ,EAAE;gBACzF,eAAe,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;YAChE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,UAAU,CAAC;IACpB,CAAC;CACF;AAzBD,wDAyBC","sourcesContent":["import type { Server } from 'http';\nimport type { Socket } from 'net';\nimport type { WebSocket } from 'ws';\nimport { Server as WebSocketServer } from 'ws';\nimport type { HttpRequest } from './HttpRequest';\nimport type { HttpServerFactory } from './HttpServerFactory';\nimport type { WebSocketHandler } from './WebSocketHandler';\n\n/**\n * Factory that adds WebSocket functionality to an existing server\n */\nexport class WebSocketServerFactory implements HttpServerFactory {\n  private readonly baseServerFactory: HttpServerFactory;\n  private readonly webSocketHandler: WebSocketHandler;\n\n  public constructor(baseServerFactory: HttpServerFactory, webSocketHandler: WebSocketHandler) {\n    this.baseServerFactory = baseServerFactory;\n    this.webSocketHandler = webSocketHandler;\n  }\n\n  public startServer(port: number): Server {\n    // Create WebSocket server\n    const webSocketServer = new WebSocketServer({ noServer: true });\n    webSocketServer.on('connection', async(webSocket: WebSocket, upgradeRequest: HttpRequest): Promise<void> => {\n      await this.webSocketHandler.handleSafe({ webSocket, upgradeRequest });\n    });\n\n    // Create base HTTP server\n    const httpServer = this.baseServerFactory.startServer(port);\n    httpServer.on('upgrade', (upgradeRequest: HttpRequest, socket: Socket, head: Buffer): void => {\n      webSocketServer.handleUpgrade(upgradeRequest, socket, head, (webSocket: WebSocket): void => {\n        webSocketServer.emit('connection', webSocket, upgradeRequest);\n      });\n    });\n    return httpServer;\n  }\n}\n"]}