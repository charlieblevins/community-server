{"version":3,"file":"AuthorizingHttpHandler.js","sourceRoot":"","sources":["../../src/server/AuthorizingHttpHandler.ts"],"names":[],"mappings":";;;AAMA,gDAAkD;AAElD,iEAA8D;AAyB9D;;;;;;;;GAQG;AACH,MAAa,sBAAuB,SAAQ,2CAAoB;IAS9D,YAAmB,IAAgC;QACjD,KAAK,EAAE,CAAC;QATO,WAAM,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;QAU3C,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;QACtD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC9C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;IAChD,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAAgC;QAClD,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;QACrC,MAAM,WAAW,GAAkB,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACvF,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,0BAA0B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAE7E,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAC9D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,4BAA4B,CAAE,GAAG,KAAK,CAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAE1E,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC;QAC5G,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,6BAA6B,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAElF,IAAI;YACF,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;YACtG,SAAS,CAAC,aAAa,GAAG,aAAa,CAAC;SACzC;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,yBAA0B,KAAa,CAAC,OAAO,EAAE,CAAC,CAAC;YACvE,MAAM,KAAK,CAAC;SACb;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,iDAAiD,CAAC,CAAC;QAEvE,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;CACF;AAzCD,wDAyCC","sourcesContent":["import type { CredentialSet } from '../authentication/Credentials';\nimport type { CredentialsExtractor } from '../authentication/CredentialsExtractor';\nimport type { Authorizer } from '../authorization/Authorizer';\nimport type { PermissionReader } from '../authorization/PermissionReader';\nimport type { ModesExtractor } from '../authorization/permissions/ModesExtractor';\nimport type { ResponseDescription } from '../http/output/response/ResponseDescription';\nimport { getLoggerFor } from '../logging/LogUtil';\nimport type { OperationHttpHandlerInput } from './OperationHttpHandler';\nimport { OperationHttpHandler } from './OperationHttpHandler';\n\nexport interface AuthorizingHttpHandlerArgs {\n  /**\n   * Extracts the credentials from the incoming request.\n   */\n  credentialsExtractor: CredentialsExtractor;\n  /**\n   * Extracts the required modes from the generated Operation.\n   */\n  modesExtractor: ModesExtractor;\n  /**\n   * Reads the permissions available for the Operation.\n   */\n  permissionReader: PermissionReader;\n  /**\n   * Verifies if the requested operation is allowed.\n   */\n  authorizer: Authorizer;\n  /**\n   * Handler to call if the operation is authorized.\n   */\n  operationHandler: OperationHttpHandler;\n}\n\n/**\n * Handles all the necessary steps for an authorization.\n * Errors if authorization fails, otherwise passes the parameter to the operationHandler handler.\n * The following steps are executed:\n *  - Extracting credentials from the request.\n *  - Extracting the required permissions.\n *  - Reading the allowed permissions for the credentials.\n *  - Validating if this operation is allowed.\n */\nexport class AuthorizingHttpHandler extends OperationHttpHandler {\n  private readonly logger = getLoggerFor(this);\n\n  private readonly credentialsExtractor: CredentialsExtractor;\n  private readonly modesExtractor: ModesExtractor;\n  private readonly permissionReader: PermissionReader;\n  private readonly authorizer: Authorizer;\n  private readonly operationHandler: OperationHttpHandler;\n\n  public constructor(args: AuthorizingHttpHandlerArgs) {\n    super();\n    this.credentialsExtractor = args.credentialsExtractor;\n    this.modesExtractor = args.modesExtractor;\n    this.permissionReader = args.permissionReader;\n    this.authorizer = args.authorizer;\n    this.operationHandler = args.operationHandler;\n  }\n\n  public async handle(input: OperationHttpHandlerInput): Promise<ResponseDescription | undefined> {\n    const { request, operation } = input;\n    const credentials: CredentialSet = await this.credentialsExtractor.handleSafe(request);\n    this.logger.verbose(`Extracted credentials: ${JSON.stringify(credentials)}`);\n\n    const modes = await this.modesExtractor.handleSafe(operation);\n    this.logger.verbose(`Required modes are read: ${[ ...modes ].join(',')}`);\n\n    const permissionSet = await this.permissionReader.handleSafe({ credentials, identifier: operation.target });\n    this.logger.verbose(`Available permissions are ${JSON.stringify(permissionSet)}`);\n\n    try {\n      await this.authorizer.handleSafe({ credentials, identifier: operation.target, modes, permissionSet });\n      operation.permissionSet = permissionSet;\n    } catch (error: unknown) {\n      this.logger.verbose(`Authorization failed: ${(error as any).message}`);\n      throw error;\n    }\n\n    this.logger.verbose(`Authorization succeeded, calling source handler`);\n\n    return this.operationHandler.handleSafe(input);\n  }\n}\n"]}