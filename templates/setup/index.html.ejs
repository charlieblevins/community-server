<div id="input-partial">
  <%- include('./input-partial.html.ejs') %>
</div>
<div id="response-partial">
  <%- include('./response-partial.html.ejs') %>
</div>

<script>
  const inputDiv = document.getElementById('input-partial');
  const responseDiv = document.getElementById('response-partial');
  responseDiv.hidden = true;

  const form = document.getElementById('mainForm');
  form.addEventListener('submit', postForm);

  const errorBlock = document.getElementById('error');

  function updateResponse(params) {
    // Swap visibility
    inputDiv.hidden = true;
    responseDiv.hidden = false;

    if (!params.initialize || params.registration) {
      const initialize = document.getElementById('response-initialize');
      initialize.hidden = true;
    }

    if (!params.registration) {
      const registration = document.getElementById('response-registration');
      registration.hidden = true;
    } else {
      // This entire block is almost the same as the register-response-partial template
      const podBaseUrl = document.getElementById('response-podBaseUrl');
      podBaseUrl.innerText = params.podBaseUrl;
      podBaseUrl.href = params.podBaseUrl;

      const createdWebId = document.getElementById('response-createdWebId');
      createdWebId.innerText = params.webId;
      createdWebId.href = params.webId;

      const registeredWebId = document.getElementById('response-registeredWebId');
      registeredWebId.innerText = params.webId;
      registeredWebId.href = params.webId;

      const oidcIssuerTriple = document.getElementById('response-oidcIssuerTriple');
      oidcIssuerTriple.innerText = `<${params.webId}> <http://www.w3.org/ns/solid/terms#oidcIssuer> <${params.oidcIssuer}>.`;

      const existingWebId = document.getElementById('response-existingWebId');
      existingWebId.innerText = params.webId;

      const email = document.getElementById('response-email');
      email.innerText = params.email;

      if (!params.createPod) {
        document.getElementById('response-createPod').remove();
      }

      if (!params.createWebId) {
        document.getElementById('response-createWebId').remove();
      } else {
        document.getElementById('response-registerWebId').remove();
      }

      if (!params.register) {
        document.getElementById('response-register').remove();
      }
    }
  }

  async function postForm(event) {
    event.preventDefault();

    const formData = new FormData(form);
    const res = await fetch('', {
      method: 'POST',
      credentials: 'include',
      headers: { 'accept': 'application/json', 'content-type': 'application/json' },
      body: JSON.stringify(Object.fromEntries(formData)),
    });
    if (res.status >= 400) {
      const error = await res.json();
      errorBlock.innerText = `${error.statusCode} - ${error.name}: ${error.message}`;
    } else if (res.status === 200 || res.status === 201) {
      const json = await res.json();
      updateResponse(json);
    }
  }
</script>
